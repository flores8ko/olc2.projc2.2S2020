(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["ast"] = factory();
	else
		root["ast"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	function hotDisposeChunk(chunkId) {
/******/ 		delete installedChunks[chunkId];
/******/ 	}
/******/ 	var parentHotUpdateCallback = this["webpackHotUpdateast"];
/******/ 	this["webpackHotUpdateast"] = // eslint-disable-next-line no-unused-vars
/******/ 	function webpackHotUpdateCallback(chunkId, moreModules) {
/******/ 		hotAddUpdateChunk(chunkId, moreModules);
/******/ 		if (parentHotUpdateCallback) parentHotUpdateCallback(chunkId, moreModules);
/******/ 	} ;
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotDownloadUpdateChunk(chunkId) {
/******/ 		var script = document.createElement("script");
/******/ 		script.charset = "utf-8";
/******/ 		script.src = __webpack_require__.p + "" + chunkId + "." + hotCurrentHash + ".hot-update.js";
/******/ 		if (null) script.crossOrigin = null;
/******/ 		document.head.appendChild(script);
/******/ 	}
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotDownloadManifest(requestTimeout) {
/******/ 		requestTimeout = requestTimeout || 10000;
/******/ 		return new Promise(function(resolve, reject) {
/******/ 			if (typeof XMLHttpRequest === "undefined") {
/******/ 				return reject(new Error("No browser support"));
/******/ 			}
/******/ 			try {
/******/ 				var request = new XMLHttpRequest();
/******/ 				var requestPath = __webpack_require__.p + "" + hotCurrentHash + ".hot-update.json";
/******/ 				request.open("GET", requestPath, true);
/******/ 				request.timeout = requestTimeout;
/******/ 				request.send(null);
/******/ 			} catch (err) {
/******/ 				return reject(err);
/******/ 			}
/******/ 			request.onreadystatechange = function() {
/******/ 				if (request.readyState !== 4) return;
/******/ 				if (request.status === 0) {
/******/ 					// timeout
/******/ 					reject(
/******/ 						new Error("Manifest request to " + requestPath + " timed out.")
/******/ 					);
/******/ 				} else if (request.status === 404) {
/******/ 					// no update available
/******/ 					resolve();
/******/ 				} else if (request.status !== 200 && request.status !== 304) {
/******/ 					// other failure
/******/ 					reject(new Error("Manifest request to " + requestPath + " failed."));
/******/ 				} else {
/******/ 					// success
/******/ 					try {
/******/ 						var update = JSON.parse(request.responseText);
/******/ 					} catch (e) {
/******/ 						reject(e);
/******/ 						return;
/******/ 					}
/******/ 					resolve(update);
/******/ 				}
/******/ 			};
/******/ 		});
/******/ 	}
/******/
/******/ 	var hotApplyOnUpdate = true;
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	var hotCurrentHash = "e79efd9902ba6caff49e";
/******/ 	var hotRequestTimeout = 10000;
/******/ 	var hotCurrentModuleData = {};
/******/ 	var hotCurrentChildModule;
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	var hotCurrentParents = [];
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	var hotCurrentParentsTemp = [];
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotCreateRequire(moduleId) {
/******/ 		var me = installedModules[moduleId];
/******/ 		if (!me) return __webpack_require__;
/******/ 		var fn = function(request) {
/******/ 			if (me.hot.active) {
/******/ 				if (installedModules[request]) {
/******/ 					if (installedModules[request].parents.indexOf(moduleId) === -1) {
/******/ 						installedModules[request].parents.push(moduleId);
/******/ 					}
/******/ 				} else {
/******/ 					hotCurrentParents = [moduleId];
/******/ 					hotCurrentChildModule = request;
/******/ 				}
/******/ 				if (me.children.indexOf(request) === -1) {
/******/ 					me.children.push(request);
/******/ 				}
/******/ 			} else {
/******/ 				console.warn(
/******/ 					"[HMR] unexpected require(" +
/******/ 						request +
/******/ 						") from disposed module " +
/******/ 						moduleId
/******/ 				);
/******/ 				hotCurrentParents = [];
/******/ 			}
/******/ 			return __webpack_require__(request);
/******/ 		};
/******/ 		var ObjectFactory = function ObjectFactory(name) {
/******/ 			return {
/******/ 				configurable: true,
/******/ 				enumerable: true,
/******/ 				get: function() {
/******/ 					return __webpack_require__[name];
/******/ 				},
/******/ 				set: function(value) {
/******/ 					__webpack_require__[name] = value;
/******/ 				}
/******/ 			};
/******/ 		};
/******/ 		for (var name in __webpack_require__) {
/******/ 			if (
/******/ 				Object.prototype.hasOwnProperty.call(__webpack_require__, name) &&
/******/ 				name !== "e" &&
/******/ 				name !== "t"
/******/ 			) {
/******/ 				Object.defineProperty(fn, name, ObjectFactory(name));
/******/ 			}
/******/ 		}
/******/ 		fn.e = function(chunkId) {
/******/ 			if (hotStatus === "ready") hotSetStatus("prepare");
/******/ 			hotChunksLoading++;
/******/ 			return __webpack_require__.e(chunkId).then(finishChunkLoading, function(err) {
/******/ 				finishChunkLoading();
/******/ 				throw err;
/******/ 			});
/******/
/******/ 			function finishChunkLoading() {
/******/ 				hotChunksLoading--;
/******/ 				if (hotStatus === "prepare") {
/******/ 					if (!hotWaitingFilesMap[chunkId]) {
/******/ 						hotEnsureUpdateChunk(chunkId);
/******/ 					}
/******/ 					if (hotChunksLoading === 0 && hotWaitingFiles === 0) {
/******/ 						hotUpdateDownloaded();
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 		fn.t = function(value, mode) {
/******/ 			if (mode & 1) value = fn(value);
/******/ 			return __webpack_require__.t(value, mode & ~1);
/******/ 		};
/******/ 		return fn;
/******/ 	}
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotCreateModule(moduleId) {
/******/ 		var hot = {
/******/ 			// private stuff
/******/ 			_acceptedDependencies: {},
/******/ 			_declinedDependencies: {},
/******/ 			_selfAccepted: false,
/******/ 			_selfDeclined: false,
/******/ 			_selfInvalidated: false,
/******/ 			_disposeHandlers: [],
/******/ 			_main: hotCurrentChildModule !== moduleId,
/******/
/******/ 			// Module API
/******/ 			active: true,
/******/ 			accept: function(dep, callback) {
/******/ 				if (dep === undefined) hot._selfAccepted = true;
/******/ 				else if (typeof dep === "function") hot._selfAccepted = dep;
/******/ 				else if (typeof dep === "object")
/******/ 					for (var i = 0; i < dep.length; i++)
/******/ 						hot._acceptedDependencies[dep[i]] = callback || function() {};
/******/ 				else hot._acceptedDependencies[dep] = callback || function() {};
/******/ 			},
/******/ 			decline: function(dep) {
/******/ 				if (dep === undefined) hot._selfDeclined = true;
/******/ 				else if (typeof dep === "object")
/******/ 					for (var i = 0; i < dep.length; i++)
/******/ 						hot._declinedDependencies[dep[i]] = true;
/******/ 				else hot._declinedDependencies[dep] = true;
/******/ 			},
/******/ 			dispose: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			addDisposeHandler: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			removeDisposeHandler: function(callback) {
/******/ 				var idx = hot._disposeHandlers.indexOf(callback);
/******/ 				if (idx >= 0) hot._disposeHandlers.splice(idx, 1);
/******/ 			},
/******/ 			invalidate: function() {
/******/ 				this._selfInvalidated = true;
/******/ 				switch (hotStatus) {
/******/ 					case "idle":
/******/ 						hotUpdate = {};
/******/ 						hotUpdate[moduleId] = modules[moduleId];
/******/ 						hotSetStatus("ready");
/******/ 						break;
/******/ 					case "ready":
/******/ 						hotApplyInvalidatedModule(moduleId);
/******/ 						break;
/******/ 					case "prepare":
/******/ 					case "check":
/******/ 					case "dispose":
/******/ 					case "apply":
/******/ 						(hotQueuedInvalidatedModules =
/******/ 							hotQueuedInvalidatedModules || []).push(moduleId);
/******/ 						break;
/******/ 					default:
/******/ 						// ignore requests in error states
/******/ 						break;
/******/ 				}
/******/ 			},
/******/
/******/ 			// Management API
/******/ 			check: hotCheck,
/******/ 			apply: hotApply,
/******/ 			status: function(l) {
/******/ 				if (!l) return hotStatus;
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			addStatusHandler: function(l) {
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			removeStatusHandler: function(l) {
/******/ 				var idx = hotStatusHandlers.indexOf(l);
/******/ 				if (idx >= 0) hotStatusHandlers.splice(idx, 1);
/******/ 			},
/******/
/******/ 			//inherit from previous dispose call
/******/ 			data: hotCurrentModuleData[moduleId]
/******/ 		};
/******/ 		hotCurrentChildModule = undefined;
/******/ 		return hot;
/******/ 	}
/******/
/******/ 	var hotStatusHandlers = [];
/******/ 	var hotStatus = "idle";
/******/
/******/ 	function hotSetStatus(newStatus) {
/******/ 		hotStatus = newStatus;
/******/ 		for (var i = 0; i < hotStatusHandlers.length; i++)
/******/ 			hotStatusHandlers[i].call(null, newStatus);
/******/ 	}
/******/
/******/ 	// while downloading
/******/ 	var hotWaitingFiles = 0;
/******/ 	var hotChunksLoading = 0;
/******/ 	var hotWaitingFilesMap = {};
/******/ 	var hotRequestedFilesMap = {};
/******/ 	var hotAvailableFilesMap = {};
/******/ 	var hotDeferred;
/******/
/******/ 	// The update info
/******/ 	var hotUpdate, hotUpdateNewHash, hotQueuedInvalidatedModules;
/******/
/******/ 	function toModuleId(id) {
/******/ 		var isNumber = +id + "" === id;
/******/ 		return isNumber ? +id : id;
/******/ 	}
/******/
/******/ 	function hotCheck(apply) {
/******/ 		if (hotStatus !== "idle") {
/******/ 			throw new Error("check() is only allowed in idle status");
/******/ 		}
/******/ 		hotApplyOnUpdate = apply;
/******/ 		hotSetStatus("check");
/******/ 		return hotDownloadManifest(hotRequestTimeout).then(function(update) {
/******/ 			if (!update) {
/******/ 				hotSetStatus(hotApplyInvalidatedModules() ? "ready" : "idle");
/******/ 				return null;
/******/ 			}
/******/ 			hotRequestedFilesMap = {};
/******/ 			hotWaitingFilesMap = {};
/******/ 			hotAvailableFilesMap = update.c;
/******/ 			hotUpdateNewHash = update.h;
/******/
/******/ 			hotSetStatus("prepare");
/******/ 			var promise = new Promise(function(resolve, reject) {
/******/ 				hotDeferred = {
/******/ 					resolve: resolve,
/******/ 					reject: reject
/******/ 				};
/******/ 			});
/******/ 			hotUpdate = {};
/******/ 			var chunkId = "main";
/******/ 			// eslint-disable-next-line no-lone-blocks
/******/ 			{
/******/ 				hotEnsureUpdateChunk(chunkId);
/******/ 			}
/******/ 			if (
/******/ 				hotStatus === "prepare" &&
/******/ 				hotChunksLoading === 0 &&
/******/ 				hotWaitingFiles === 0
/******/ 			) {
/******/ 				hotUpdateDownloaded();
/******/ 			}
/******/ 			return promise;
/******/ 		});
/******/ 	}
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotAddUpdateChunk(chunkId, moreModules) {
/******/ 		if (!hotAvailableFilesMap[chunkId] || !hotRequestedFilesMap[chunkId])
/******/ 			return;
/******/ 		hotRequestedFilesMap[chunkId] = false;
/******/ 		for (var moduleId in moreModules) {
/******/ 			if (Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				hotUpdate[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if (--hotWaitingFiles === 0 && hotChunksLoading === 0) {
/******/ 			hotUpdateDownloaded();
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotEnsureUpdateChunk(chunkId) {
/******/ 		if (!hotAvailableFilesMap[chunkId]) {
/******/ 			hotWaitingFilesMap[chunkId] = true;
/******/ 		} else {
/******/ 			hotRequestedFilesMap[chunkId] = true;
/******/ 			hotWaitingFiles++;
/******/ 			hotDownloadUpdateChunk(chunkId);
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotUpdateDownloaded() {
/******/ 		hotSetStatus("ready");
/******/ 		var deferred = hotDeferred;
/******/ 		hotDeferred = null;
/******/ 		if (!deferred) return;
/******/ 		if (hotApplyOnUpdate) {
/******/ 			// Wrap deferred object in Promise to mark it as a well-handled Promise to
/******/ 			// avoid triggering uncaught exception warning in Chrome.
/******/ 			// See https://bugs.chromium.org/p/chromium/issues/detail?id=465666
/******/ 			Promise.resolve()
/******/ 				.then(function() {
/******/ 					return hotApply(hotApplyOnUpdate);
/******/ 				})
/******/ 				.then(
/******/ 					function(result) {
/******/ 						deferred.resolve(result);
/******/ 					},
/******/ 					function(err) {
/******/ 						deferred.reject(err);
/******/ 					}
/******/ 				);
/******/ 		} else {
/******/ 			var outdatedModules = [];
/******/ 			for (var id in hotUpdate) {
/******/ 				if (Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 					outdatedModules.push(toModuleId(id));
/******/ 				}
/******/ 			}
/******/ 			deferred.resolve(outdatedModules);
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotApply(options) {
/******/ 		if (hotStatus !== "ready")
/******/ 			throw new Error("apply() is only allowed in ready status");
/******/ 		options = options || {};
/******/ 		return hotApplyInternal(options);
/******/ 	}
/******/
/******/ 	function hotApplyInternal(options) {
/******/ 		hotApplyInvalidatedModules();
/******/
/******/ 		var cb;
/******/ 		var i;
/******/ 		var j;
/******/ 		var module;
/******/ 		var moduleId;
/******/
/******/ 		function getAffectedStuff(updateModuleId) {
/******/ 			var outdatedModules = [updateModuleId];
/******/ 			var outdatedDependencies = {};
/******/
/******/ 			var queue = outdatedModules.map(function(id) {
/******/ 				return {
/******/ 					chain: [id],
/******/ 					id: id
/******/ 				};
/******/ 			});
/******/ 			while (queue.length > 0) {
/******/ 				var queueItem = queue.pop();
/******/ 				var moduleId = queueItem.id;
/******/ 				var chain = queueItem.chain;
/******/ 				module = installedModules[moduleId];
/******/ 				if (
/******/ 					!module ||
/******/ 					(module.hot._selfAccepted && !module.hot._selfInvalidated)
/******/ 				)
/******/ 					continue;
/******/ 				if (module.hot._selfDeclined) {
/******/ 					return {
/******/ 						type: "self-declined",
/******/ 						chain: chain,
/******/ 						moduleId: moduleId
/******/ 					};
/******/ 				}
/******/ 				if (module.hot._main) {
/******/ 					return {
/******/ 						type: "unaccepted",
/******/ 						chain: chain,
/******/ 						moduleId: moduleId
/******/ 					};
/******/ 				}
/******/ 				for (var i = 0; i < module.parents.length; i++) {
/******/ 					var parentId = module.parents[i];
/******/ 					var parent = installedModules[parentId];
/******/ 					if (!parent) continue;
/******/ 					if (parent.hot._declinedDependencies[moduleId]) {
/******/ 						return {
/******/ 							type: "declined",
/******/ 							chain: chain.concat([parentId]),
/******/ 							moduleId: moduleId,
/******/ 							parentId: parentId
/******/ 						};
/******/ 					}
/******/ 					if (outdatedModules.indexOf(parentId) !== -1) continue;
/******/ 					if (parent.hot._acceptedDependencies[moduleId]) {
/******/ 						if (!outdatedDependencies[parentId])
/******/ 							outdatedDependencies[parentId] = [];
/******/ 						addAllToSet(outdatedDependencies[parentId], [moduleId]);
/******/ 						continue;
/******/ 					}
/******/ 					delete outdatedDependencies[parentId];
/******/ 					outdatedModules.push(parentId);
/******/ 					queue.push({
/******/ 						chain: chain.concat([parentId]),
/******/ 						id: parentId
/******/ 					});
/******/ 				}
/******/ 			}
/******/
/******/ 			return {
/******/ 				type: "accepted",
/******/ 				moduleId: updateModuleId,
/******/ 				outdatedModules: outdatedModules,
/******/ 				outdatedDependencies: outdatedDependencies
/******/ 			};
/******/ 		}
/******/
/******/ 		function addAllToSet(a, b) {
/******/ 			for (var i = 0; i < b.length; i++) {
/******/ 				var item = b[i];
/******/ 				if (a.indexOf(item) === -1) a.push(item);
/******/ 			}
/******/ 		}
/******/
/******/ 		// at begin all updates modules are outdated
/******/ 		// the "outdated" status can propagate to parents if they don't accept the children
/******/ 		var outdatedDependencies = {};
/******/ 		var outdatedModules = [];
/******/ 		var appliedUpdate = {};
/******/
/******/ 		var warnUnexpectedRequire = function warnUnexpectedRequire() {
/******/ 			console.warn(
/******/ 				"[HMR] unexpected require(" + result.moduleId + ") to disposed module"
/******/ 			);
/******/ 		};
/******/
/******/ 		for (var id in hotUpdate) {
/******/ 			if (Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 				moduleId = toModuleId(id);
/******/ 				/** @type {TODO} */
/******/ 				var result;
/******/ 				if (hotUpdate[id]) {
/******/ 					result = getAffectedStuff(moduleId);
/******/ 				} else {
/******/ 					result = {
/******/ 						type: "disposed",
/******/ 						moduleId: id
/******/ 					};
/******/ 				}
/******/ 				/** @type {Error|false} */
/******/ 				var abortError = false;
/******/ 				var doApply = false;
/******/ 				var doDispose = false;
/******/ 				var chainInfo = "";
/******/ 				if (result.chain) {
/******/ 					chainInfo = "\nUpdate propagation: " + result.chain.join(" -> ");
/******/ 				}
/******/ 				switch (result.type) {
/******/ 					case "self-declined":
/******/ 						if (options.onDeclined) options.onDeclined(result);
/******/ 						if (!options.ignoreDeclined)
/******/ 							abortError = new Error(
/******/ 								"Aborted because of self decline: " +
/******/ 									result.moduleId +
/******/ 									chainInfo
/******/ 							);
/******/ 						break;
/******/ 					case "declined":
/******/ 						if (options.onDeclined) options.onDeclined(result);
/******/ 						if (!options.ignoreDeclined)
/******/ 							abortError = new Error(
/******/ 								"Aborted because of declined dependency: " +
/******/ 									result.moduleId +
/******/ 									" in " +
/******/ 									result.parentId +
/******/ 									chainInfo
/******/ 							);
/******/ 						break;
/******/ 					case "unaccepted":
/******/ 						if (options.onUnaccepted) options.onUnaccepted(result);
/******/ 						if (!options.ignoreUnaccepted)
/******/ 							abortError = new Error(
/******/ 								"Aborted because " + moduleId + " is not accepted" + chainInfo
/******/ 							);
/******/ 						break;
/******/ 					case "accepted":
/******/ 						if (options.onAccepted) options.onAccepted(result);
/******/ 						doApply = true;
/******/ 						break;
/******/ 					case "disposed":
/******/ 						if (options.onDisposed) options.onDisposed(result);
/******/ 						doDispose = true;
/******/ 						break;
/******/ 					default:
/******/ 						throw new Error("Unexception type " + result.type);
/******/ 				}
/******/ 				if (abortError) {
/******/ 					hotSetStatus("abort");
/******/ 					return Promise.reject(abortError);
/******/ 				}
/******/ 				if (doApply) {
/******/ 					appliedUpdate[moduleId] = hotUpdate[moduleId];
/******/ 					addAllToSet(outdatedModules, result.outdatedModules);
/******/ 					for (moduleId in result.outdatedDependencies) {
/******/ 						if (
/******/ 							Object.prototype.hasOwnProperty.call(
/******/ 								result.outdatedDependencies,
/******/ 								moduleId
/******/ 							)
/******/ 						) {
/******/ 							if (!outdatedDependencies[moduleId])
/******/ 								outdatedDependencies[moduleId] = [];
/******/ 							addAllToSet(
/******/ 								outdatedDependencies[moduleId],
/******/ 								result.outdatedDependencies[moduleId]
/******/ 							);
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 				if (doDispose) {
/******/ 					addAllToSet(outdatedModules, [result.moduleId]);
/******/ 					appliedUpdate[moduleId] = warnUnexpectedRequire;
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Store self accepted outdated modules to require them later by the module system
/******/ 		var outdatedSelfAcceptedModules = [];
/******/ 		for (i = 0; i < outdatedModules.length; i++) {
/******/ 			moduleId = outdatedModules[i];
/******/ 			if (
/******/ 				installedModules[moduleId] &&
/******/ 				installedModules[moduleId].hot._selfAccepted &&
/******/ 				// removed self-accepted modules should not be required
/******/ 				appliedUpdate[moduleId] !== warnUnexpectedRequire &&
/******/ 				// when called invalidate self-accepting is not possible
/******/ 				!installedModules[moduleId].hot._selfInvalidated
/******/ 			) {
/******/ 				outdatedSelfAcceptedModules.push({
/******/ 					module: moduleId,
/******/ 					parents: installedModules[moduleId].parents.slice(),
/******/ 					errorHandler: installedModules[moduleId].hot._selfAccepted
/******/ 				});
/******/ 			}
/******/ 		}
/******/
/******/ 		// Now in "dispose" phase
/******/ 		hotSetStatus("dispose");
/******/ 		Object.keys(hotAvailableFilesMap).forEach(function(chunkId) {
/******/ 			if (hotAvailableFilesMap[chunkId] === false) {
/******/ 				hotDisposeChunk(chunkId);
/******/ 			}
/******/ 		});
/******/
/******/ 		var idx;
/******/ 		var queue = outdatedModules.slice();
/******/ 		while (queue.length > 0) {
/******/ 			moduleId = queue.pop();
/******/ 			module = installedModules[moduleId];
/******/ 			if (!module) continue;
/******/
/******/ 			var data = {};
/******/
/******/ 			// Call dispose handlers
/******/ 			var disposeHandlers = module.hot._disposeHandlers;
/******/ 			for (j = 0; j < disposeHandlers.length; j++) {
/******/ 				cb = disposeHandlers[j];
/******/ 				cb(data);
/******/ 			}
/******/ 			hotCurrentModuleData[moduleId] = data;
/******/
/******/ 			// disable module (this disables requires from this module)
/******/ 			module.hot.active = false;
/******/
/******/ 			// remove module from cache
/******/ 			delete installedModules[moduleId];
/******/
/******/ 			// when disposing there is no need to call dispose handler
/******/ 			delete outdatedDependencies[moduleId];
/******/
/******/ 			// remove "parents" references from all children
/******/ 			for (j = 0; j < module.children.length; j++) {
/******/ 				var child = installedModules[module.children[j]];
/******/ 				if (!child) continue;
/******/ 				idx = child.parents.indexOf(moduleId);
/******/ 				if (idx >= 0) {
/******/ 					child.parents.splice(idx, 1);
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// remove outdated dependency from module children
/******/ 		var dependency;
/******/ 		var moduleOutdatedDependencies;
/******/ 		for (moduleId in outdatedDependencies) {
/******/ 			if (
/******/ 				Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)
/******/ 			) {
/******/ 				module = installedModules[moduleId];
/******/ 				if (module) {
/******/ 					moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 					for (j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 						dependency = moduleOutdatedDependencies[j];
/******/ 						idx = module.children.indexOf(dependency);
/******/ 						if (idx >= 0) module.children.splice(idx, 1);
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Now in "apply" phase
/******/ 		hotSetStatus("apply");
/******/
/******/ 		if (hotUpdateNewHash !== undefined) {
/******/ 			hotCurrentHash = hotUpdateNewHash;
/******/ 			hotUpdateNewHash = undefined;
/******/ 		}
/******/ 		hotUpdate = undefined;
/******/
/******/ 		// insert new code
/******/ 		for (moduleId in appliedUpdate) {
/******/ 			if (Object.prototype.hasOwnProperty.call(appliedUpdate, moduleId)) {
/******/ 				modules[moduleId] = appliedUpdate[moduleId];
/******/ 			}
/******/ 		}
/******/
/******/ 		// call accept handlers
/******/ 		var error = null;
/******/ 		for (moduleId in outdatedDependencies) {
/******/ 			if (
/******/ 				Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)
/******/ 			) {
/******/ 				module = installedModules[moduleId];
/******/ 				if (module) {
/******/ 					moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 					var callbacks = [];
/******/ 					for (i = 0; i < moduleOutdatedDependencies.length; i++) {
/******/ 						dependency = moduleOutdatedDependencies[i];
/******/ 						cb = module.hot._acceptedDependencies[dependency];
/******/ 						if (cb) {
/******/ 							if (callbacks.indexOf(cb) !== -1) continue;
/******/ 							callbacks.push(cb);
/******/ 						}
/******/ 					}
/******/ 					for (i = 0; i < callbacks.length; i++) {
/******/ 						cb = callbacks[i];
/******/ 						try {
/******/ 							cb(moduleOutdatedDependencies);
/******/ 						} catch (err) {
/******/ 							if (options.onErrored) {
/******/ 								options.onErrored({
/******/ 									type: "accept-errored",
/******/ 									moduleId: moduleId,
/******/ 									dependencyId: moduleOutdatedDependencies[i],
/******/ 									error: err
/******/ 								});
/******/ 							}
/******/ 							if (!options.ignoreErrored) {
/******/ 								if (!error) error = err;
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Load self accepted modules
/******/ 		for (i = 0; i < outdatedSelfAcceptedModules.length; i++) {
/******/ 			var item = outdatedSelfAcceptedModules[i];
/******/ 			moduleId = item.module;
/******/ 			hotCurrentParents = item.parents;
/******/ 			hotCurrentChildModule = moduleId;
/******/ 			try {
/******/ 				__webpack_require__(moduleId);
/******/ 			} catch (err) {
/******/ 				if (typeof item.errorHandler === "function") {
/******/ 					try {
/******/ 						item.errorHandler(err);
/******/ 					} catch (err2) {
/******/ 						if (options.onErrored) {
/******/ 							options.onErrored({
/******/ 								type: "self-accept-error-handler-errored",
/******/ 								moduleId: moduleId,
/******/ 								error: err2,
/******/ 								originalError: err
/******/ 							});
/******/ 						}
/******/ 						if (!options.ignoreErrored) {
/******/ 							if (!error) error = err2;
/******/ 						}
/******/ 						if (!error) error = err;
/******/ 					}
/******/ 				} else {
/******/ 					if (options.onErrored) {
/******/ 						options.onErrored({
/******/ 							type: "self-accept-errored",
/******/ 							moduleId: moduleId,
/******/ 							error: err
/******/ 						});
/******/ 					}
/******/ 					if (!options.ignoreErrored) {
/******/ 						if (!error) error = err;
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// handle errors in accept handlers and self accepted module load
/******/ 		if (error) {
/******/ 			hotSetStatus("fail");
/******/ 			return Promise.reject(error);
/******/ 		}
/******/
/******/ 		if (hotQueuedInvalidatedModules) {
/******/ 			return hotApplyInternal(options).then(function(list) {
/******/ 				outdatedModules.forEach(function(moduleId) {
/******/ 					if (list.indexOf(moduleId) < 0) list.push(moduleId);
/******/ 				});
/******/ 				return list;
/******/ 			});
/******/ 		}
/******/
/******/ 		hotSetStatus("idle");
/******/ 		return new Promise(function(resolve) {
/******/ 			resolve(outdatedModules);
/******/ 		});
/******/ 	}
/******/
/******/ 	function hotApplyInvalidatedModules() {
/******/ 		if (hotQueuedInvalidatedModules) {
/******/ 			if (!hotUpdate) hotUpdate = {};
/******/ 			hotQueuedInvalidatedModules.forEach(hotApplyInvalidatedModule);
/******/ 			hotQueuedInvalidatedModules = undefined;
/******/ 			return true;
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotApplyInvalidatedModule(moduleId) {
/******/ 		if (!Object.prototype.hasOwnProperty.call(hotUpdate, moduleId))
/******/ 			hotUpdate[moduleId] = modules[moduleId];
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {},
/******/ 			hot: hotCreateModule(moduleId),
/******/ 			parents: (hotCurrentParentsTemp = hotCurrentParents, hotCurrentParents = [], hotCurrentParentsTemp),
/******/ 			children: []
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, hotCreateRequire(moduleId));
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// __webpack_hash__
/******/ 	__webpack_require__.h = function() { return hotCurrentHash; };
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return hotCreateRequire("./src/index.ts")(__webpack_require__.s = "./src/index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/webpack/buildin/harmony-module.js":
/*!*******************************************!*\
  !*** (webpack)/buildin/harmony-module.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function(originalModule) {
	if (!originalModule.webpackPolyfill) {
		var module = Object.create(originalModule);
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		Object.defineProperty(module, "exports", {
			enumerable: true
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! exports provided: Console, Cntnr, Envmnt, Op, NULL, UNDEFINED, Reference, ConsoleLogNode, NumberNode, StringNode, BooleanNode, NullNode, UndefinedNode, DeclareVarNode, DeclareVarListNode, CreateIdVarNode, AsignNode, SumNode, SubNode, MulNode, DivNode, ModNode, ExpNode, EqNode, DifNode, HigherNode, MinorNode, HigherEqNode, MinorEqNode, OrNode, AndNode, NotNode, ReAsignAddNode, ReAsignSubNode, ReAsignMulNode, ReAsignDivNode, ReAsignModNode, ReAddNode, ReSubNode, CreateArrayNode, CreateArrVarNode, ReturnObj, CreateObjVarNode, CreateObjFunNode, SentenceTernaryNode, BreakNode, ContinueNode, IfNode, WhileNode, DoWhileNode, CaseNode, SwitchNode, ForInNode, ForOfNode, ForNode, CreateObjNode, MyMap, DeclareTypeStructureNode, DeclareFunNode, DeclareFunParamNode, ReturnNode, NewArrayNode, FunctionCallNode, ErrorsControl, OptimizationRecords, BlocksControlReport, ExecuteAST, GetC3DCode, GetC3DCodeOptimizado, GraphAST, TranslateStringsCompose */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExecuteAST", function() { return ExecuteAST; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GetC3DCode", function() { return GetC3DCode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GetC3DCodeOptimizado", function() { return GetC3DCodeOptimizado; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GraphAST", function() { return GraphAST; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TranslateStringsCompose", function() { return TranslateStringsCompose; });
/* harmony import */ var _utils_Reference__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/Reference */ "./src/utils/Reference.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Reference", function() { return _utils_Reference__WEBPACK_IMPORTED_MODULE_0__["Reference"]; });

/* harmony import */ var _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/PrimitiveTypoContainer */ "./src/utils/PrimitiveTypoContainer.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NULL", function() { return _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_1__["NULL"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UNDEFINED", function() { return _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_1__["UNDEFINED"]; });

/* harmony import */ var _utils_Envmnt__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/Envmnt */ "./src/utils/Envmnt.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Envmnt", function() { return _utils_Envmnt__WEBPACK_IMPORTED_MODULE_2__["Envmnt"]; });

/* harmony import */ var _utils_Cntnr__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/Cntnr */ "./src/utils/Cntnr.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Cntnr", function() { return _utils_Cntnr__WEBPACK_IMPORTED_MODULE_3__["Cntnr"]; });

/* harmony import */ var _utils_Op__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/Op */ "./src/utils/Op.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Op", function() { return _utils_Op__WEBPACK_IMPORTED_MODULE_4__["Op"]; });

/* harmony import */ var _utils_Console__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/Console */ "./src/utils/Console.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Console", function() { return _utils_Console__WEBPACK_IMPORTED_MODULE_5__["Console"]; });

/* harmony import */ var _nodes_ConsoleLogNode__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./nodes/ConsoleLogNode */ "./src/nodes/ConsoleLogNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ConsoleLogNode", function() { return _nodes_ConsoleLogNode__WEBPACK_IMPORTED_MODULE_6__["ConsoleLogNode"]; });

/* harmony import */ var _nodes_NumberNode__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./nodes/NumberNode */ "./src/nodes/NumberNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NumberNode", function() { return _nodes_NumberNode__WEBPACK_IMPORTED_MODULE_7__["NumberNode"]; });

/* harmony import */ var _nodes_StringNode__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./nodes/StringNode */ "./src/nodes/StringNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StringNode", function() { return _nodes_StringNode__WEBPACK_IMPORTED_MODULE_8__["StringNode"]; });

/* harmony import */ var _nodes_BooleanNode__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./nodes/BooleanNode */ "./src/nodes/BooleanNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BooleanNode", function() { return _nodes_BooleanNode__WEBPACK_IMPORTED_MODULE_9__["BooleanNode"]; });

/* harmony import */ var _nodes_NullNode__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./nodes/NullNode */ "./src/nodes/NullNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NullNode", function() { return _nodes_NullNode__WEBPACK_IMPORTED_MODULE_10__["NullNode"]; });

/* harmony import */ var _nodes_UndefinedNode__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./nodes/UndefinedNode */ "./src/nodes/UndefinedNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UndefinedNode", function() { return _nodes_UndefinedNode__WEBPACK_IMPORTED_MODULE_11__["UndefinedNode"]; });

/* harmony import */ var _nodes_DeclareVarNode__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./nodes/DeclareVarNode */ "./src/nodes/DeclareVarNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DeclareVarNode", function() { return _nodes_DeclareVarNode__WEBPACK_IMPORTED_MODULE_12__["DeclareVarNode"]; });

/* harmony import */ var _nodes_DeclareVarListNode__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./nodes/DeclareVarListNode */ "./src/nodes/DeclareVarListNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DeclareVarListNode", function() { return _nodes_DeclareVarListNode__WEBPACK_IMPORTED_MODULE_13__["DeclareVarListNode"]; });

/* harmony import */ var _nodes_CreateIdVarNode__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./nodes/CreateIdVarNode */ "./src/nodes/CreateIdVarNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CreateIdVarNode", function() { return _nodes_CreateIdVarNode__WEBPACK_IMPORTED_MODULE_14__["CreateIdVarNode"]; });

/* harmony import */ var _nodes_AsignNode__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./nodes/AsignNode */ "./src/nodes/AsignNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AsignNode", function() { return _nodes_AsignNode__WEBPACK_IMPORTED_MODULE_15__["AsignNode"]; });

/* harmony import */ var _nodes_SumNode__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./nodes/SumNode */ "./src/nodes/SumNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SumNode", function() { return _nodes_SumNode__WEBPACK_IMPORTED_MODULE_16__["SumNode"]; });

/* harmony import */ var _nodes_SubNode__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./nodes/SubNode */ "./src/nodes/SubNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SubNode", function() { return _nodes_SubNode__WEBPACK_IMPORTED_MODULE_17__["SubNode"]; });

/* harmony import */ var _nodes_MulNode__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./nodes/MulNode */ "./src/nodes/MulNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MulNode", function() { return _nodes_MulNode__WEBPACK_IMPORTED_MODULE_18__["MulNode"]; });

/* harmony import */ var _nodes_DivNode__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./nodes/DivNode */ "./src/nodes/DivNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DivNode", function() { return _nodes_DivNode__WEBPACK_IMPORTED_MODULE_19__["DivNode"]; });

/* harmony import */ var _nodes_ModNode__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./nodes/ModNode */ "./src/nodes/ModNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ModNode", function() { return _nodes_ModNode__WEBPACK_IMPORTED_MODULE_20__["ModNode"]; });

/* harmony import */ var _nodes_ExpNode__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./nodes/ExpNode */ "./src/nodes/ExpNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ExpNode", function() { return _nodes_ExpNode__WEBPACK_IMPORTED_MODULE_21__["ExpNode"]; });

/* harmony import */ var _nodes_EqNode__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./nodes/EqNode */ "./src/nodes/EqNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "EqNode", function() { return _nodes_EqNode__WEBPACK_IMPORTED_MODULE_22__["EqNode"]; });

/* harmony import */ var _nodes_DifNode__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./nodes/DifNode */ "./src/nodes/DifNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DifNode", function() { return _nodes_DifNode__WEBPACK_IMPORTED_MODULE_23__["DifNode"]; });

/* harmony import */ var _nodes_HigherNode__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./nodes/HigherNode */ "./src/nodes/HigherNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "HigherNode", function() { return _nodes_HigherNode__WEBPACK_IMPORTED_MODULE_24__["HigherNode"]; });

/* harmony import */ var _nodes_MinorNode__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./nodes/MinorNode */ "./src/nodes/MinorNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MinorNode", function() { return _nodes_MinorNode__WEBPACK_IMPORTED_MODULE_25__["MinorNode"]; });

/* harmony import */ var _nodes_HigherEqNode__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./nodes/HigherEqNode */ "./src/nodes/HigherEqNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "HigherEqNode", function() { return _nodes_HigherEqNode__WEBPACK_IMPORTED_MODULE_26__["HigherEqNode"]; });

/* harmony import */ var _nodes_MinorEqNode__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./nodes/MinorEqNode */ "./src/nodes/MinorEqNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MinorEqNode", function() { return _nodes_MinorEqNode__WEBPACK_IMPORTED_MODULE_27__["MinorEqNode"]; });

/* harmony import */ var _nodes_OrNode__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./nodes/OrNode */ "./src/nodes/OrNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "OrNode", function() { return _nodes_OrNode__WEBPACK_IMPORTED_MODULE_28__["OrNode"]; });

/* harmony import */ var _nodes_AndNode__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./nodes/AndNode */ "./src/nodes/AndNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AndNode", function() { return _nodes_AndNode__WEBPACK_IMPORTED_MODULE_29__["AndNode"]; });

/* harmony import */ var _nodes_NotNode__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./nodes/NotNode */ "./src/nodes/NotNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NotNode", function() { return _nodes_NotNode__WEBPACK_IMPORTED_MODULE_30__["NotNode"]; });

/* harmony import */ var _nodes_ReAsignAddNode__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./nodes/ReAsignAddNode */ "./src/nodes/ReAsignAddNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ReAsignAddNode", function() { return _nodes_ReAsignAddNode__WEBPACK_IMPORTED_MODULE_31__["ReAsignAddNode"]; });

/* harmony import */ var _nodes_ReAsignSubNode__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./nodes/ReAsignSubNode */ "./src/nodes/ReAsignSubNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ReAsignSubNode", function() { return _nodes_ReAsignSubNode__WEBPACK_IMPORTED_MODULE_32__["ReAsignSubNode"]; });

/* harmony import */ var _nodes_ReAsignMulNode__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./nodes/ReAsignMulNode */ "./src/nodes/ReAsignMulNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ReAsignMulNode", function() { return _nodes_ReAsignMulNode__WEBPACK_IMPORTED_MODULE_33__["ReAsignMulNode"]; });

/* harmony import */ var _nodes_ReAsignDivNode__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./nodes/ReAsignDivNode */ "./src/nodes/ReAsignDivNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ReAsignDivNode", function() { return _nodes_ReAsignDivNode__WEBPACK_IMPORTED_MODULE_34__["ReAsignDivNode"]; });

/* harmony import */ var _nodes_ReAsignModNode__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./nodes/ReAsignModNode */ "./src/nodes/ReAsignModNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ReAsignModNode", function() { return _nodes_ReAsignModNode__WEBPACK_IMPORTED_MODULE_35__["ReAsignModNode"]; });

/* harmony import */ var _nodes_ReAddNode__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./nodes/ReAddNode */ "./src/nodes/ReAddNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ReAddNode", function() { return _nodes_ReAddNode__WEBPACK_IMPORTED_MODULE_36__["ReAddNode"]; });

/* harmony import */ var _nodes_ReSubNode__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./nodes/ReSubNode */ "./src/nodes/ReSubNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ReSubNode", function() { return _nodes_ReSubNode__WEBPACK_IMPORTED_MODULE_37__["ReSubNode"]; });

/* harmony import */ var _nodes_CreateArrayNode__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./nodes/CreateArrayNode */ "./src/nodes/CreateArrayNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CreateArrayNode", function() { return _nodes_CreateArrayNode__WEBPACK_IMPORTED_MODULE_38__["CreateArrayNode"]; });

/* harmony import */ var _nodes_CreateArrVarNode__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./nodes/CreateArrVarNode */ "./src/nodes/CreateArrVarNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CreateArrVarNode", function() { return _nodes_CreateArrVarNode__WEBPACK_IMPORTED_MODULE_39__["CreateArrVarNode"]; });

/* harmony import */ var _nodes_ReturnObj__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./nodes/ReturnObj */ "./src/nodes/ReturnObj.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ReturnObj", function() { return _nodes_ReturnObj__WEBPACK_IMPORTED_MODULE_40__["ReturnObj"]; });

/* harmony import */ var _nodes_CreateObjVarNode__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./nodes/CreateObjVarNode */ "./src/nodes/CreateObjVarNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CreateObjVarNode", function() { return _nodes_CreateObjVarNode__WEBPACK_IMPORTED_MODULE_41__["CreateObjVarNode"]; });

/* harmony import */ var _nodes_CreateObjFunNode__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./nodes/CreateObjFunNode */ "./src/nodes/CreateObjFunNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CreateObjFunNode", function() { return _nodes_CreateObjFunNode__WEBPACK_IMPORTED_MODULE_42__["CreateObjFunNode"]; });

/* harmony import */ var _nodes_SentenceTernaryNode__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./nodes/SentenceTernaryNode */ "./src/nodes/SentenceTernaryNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SentenceTernaryNode", function() { return _nodes_SentenceTernaryNode__WEBPACK_IMPORTED_MODULE_43__["SentenceTernaryNode"]; });

/* harmony import */ var _nodes_BreakNode__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./nodes/BreakNode */ "./src/nodes/BreakNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BreakNode", function() { return _nodes_BreakNode__WEBPACK_IMPORTED_MODULE_44__["BreakNode"]; });

/* harmony import */ var _nodes_ContinueNode__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./nodes/ContinueNode */ "./src/nodes/ContinueNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ContinueNode", function() { return _nodes_ContinueNode__WEBPACK_IMPORTED_MODULE_45__["ContinueNode"]; });

/* harmony import */ var _nodes_IfNode__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./nodes/IfNode */ "./src/nodes/IfNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "IfNode", function() { return _nodes_IfNode__WEBPACK_IMPORTED_MODULE_46__["IfNode"]; });

/* harmony import */ var _nodes_WhileNode__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./nodes/WhileNode */ "./src/nodes/WhileNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WhileNode", function() { return _nodes_WhileNode__WEBPACK_IMPORTED_MODULE_47__["WhileNode"]; });

/* harmony import */ var _nodes_DoWhileNode__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./nodes/DoWhileNode */ "./src/nodes/DoWhileNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DoWhileNode", function() { return _nodes_DoWhileNode__WEBPACK_IMPORTED_MODULE_48__["DoWhileNode"]; });

/* harmony import */ var _nodes_CaseNode__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./nodes/CaseNode */ "./src/nodes/CaseNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CaseNode", function() { return _nodes_CaseNode__WEBPACK_IMPORTED_MODULE_49__["CaseNode"]; });

/* harmony import */ var _nodes_SwitchNode__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ./nodes/SwitchNode */ "./src/nodes/SwitchNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SwitchNode", function() { return _nodes_SwitchNode__WEBPACK_IMPORTED_MODULE_50__["SwitchNode"]; });

/* harmony import */ var _nodes_ForInNode__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ./nodes/ForInNode */ "./src/nodes/ForInNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ForInNode", function() { return _nodes_ForInNode__WEBPACK_IMPORTED_MODULE_51__["ForInNode"]; });

/* harmony import */ var _nodes_ForOfNode__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ./nodes/ForOfNode */ "./src/nodes/ForOfNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ForOfNode", function() { return _nodes_ForOfNode__WEBPACK_IMPORTED_MODULE_52__["ForOfNode"]; });

/* harmony import */ var _nodes_ForNode__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ./nodes/ForNode */ "./src/nodes/ForNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ForNode", function() { return _nodes_ForNode__WEBPACK_IMPORTED_MODULE_53__["ForNode"]; });

/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ./utils/Utils */ "./src/utils/Utils.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MyMap", function() { return _utils_Utils__WEBPACK_IMPORTED_MODULE_54__["MyMap"]; });

/* harmony import */ var _nodes_CreateObjNode__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ./nodes/CreateObjNode */ "./src/nodes/CreateObjNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CreateObjNode", function() { return _nodes_CreateObjNode__WEBPACK_IMPORTED_MODULE_55__["CreateObjNode"]; });

/* harmony import */ var _nodes_DeclareTypeStructureNode__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ./nodes/DeclareTypeStructureNode */ "./src/nodes/DeclareTypeStructureNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DeclareTypeStructureNode", function() { return _nodes_DeclareTypeStructureNode__WEBPACK_IMPORTED_MODULE_56__["DeclareTypeStructureNode"]; });

/* harmony import */ var _nodes_DeclareFunNode__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ./nodes/DeclareFunNode */ "./src/nodes/DeclareFunNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DeclareFunNode", function() { return _nodes_DeclareFunNode__WEBPACK_IMPORTED_MODULE_57__["DeclareFunNode"]; });

/* harmony import */ var _nodes_DeclareFunParamNode__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ./nodes/DeclareFunParamNode */ "./src/nodes/DeclareFunParamNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DeclareFunParamNode", function() { return _nodes_DeclareFunParamNode__WEBPACK_IMPORTED_MODULE_58__["DeclareFunParamNode"]; });

/* harmony import */ var _nodes_ReturnNode__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ./nodes/ReturnNode */ "./src/nodes/ReturnNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ReturnNode", function() { return _nodes_ReturnNode__WEBPACK_IMPORTED_MODULE_59__["ReturnNode"]; });

/* harmony import */ var _nodes_FunctionCallNode__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! ./nodes/FunctionCallNode */ "./src/nodes/FunctionCallNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FunctionCallNode", function() { return _nodes_FunctionCallNode__WEBPACK_IMPORTED_MODULE_60__["FunctionCallNode"]; });

/* harmony import */ var _utils_TSGraphControl__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! ./utils/TSGraphControl */ "./src/utils/TSGraphControl.ts");
/* harmony import */ var _utils_NodesControl__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! ./utils/NodesControl */ "./src/utils/NodesControl.ts");
/* harmony import */ var _utils_ErrorsControl__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! ./utils/ErrorsControl */ "./src/utils/ErrorsControl.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ErrorsControl", function() { return _utils_ErrorsControl__WEBPACK_IMPORTED_MODULE_63__["ErrorsControl"]; });

/* harmony import */ var _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! ./utils/C3D/Lbl */ "./src/utils/C3D/Lbl.ts");
/* harmony import */ var _utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! ./utils/C3D/Tmp */ "./src/utils/C3D/Tmp.ts");
/* harmony import */ var _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! ./utils/C3D/Code */ "./src/utils/C3D/Code.ts");
/* harmony import */ var _utils_OptimizationRecords__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(/*! ./utils/OptimizationRecords */ "./src/utils/OptimizationRecords.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "OptimizationRecords", function() { return _utils_OptimizationRecords__WEBPACK_IMPORTED_MODULE_67__["OptimizationRecords"]; });

/* harmony import */ var _nodes_NewArrayNode__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(/*! ./nodes/NewArrayNode */ "./src/nodes/NewArrayNode.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NewArrayNode", function() { return _nodes_NewArrayNode__WEBPACK_IMPORTED_MODULE_68__["NewArrayNode"]; });

/* harmony import */ var _utils_BlocksOptimization__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(/*! ./utils/BlocksOptimization */ "./src/utils/BlocksOptimization.ts");
/* harmony import */ var _utils_BlocksControlReport__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(/*! ./utils/BlocksControlReport */ "./src/utils/BlocksControlReport.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlocksControlReport", function() { return _utils_BlocksControlReport__WEBPACK_IMPORTED_MODULE_70__["BlocksControlReport"]; });









































































function ExecuteAST(sentences) {
    _utils_Console__WEBPACK_IMPORTED_MODULE_5__["Console"].log = '';
    _utils_NodesControl__WEBPACK_IMPORTED_MODULE_62__["NodesControl"].clearStructures();
    _utils_TSGraphControl__WEBPACK_IMPORTED_MODULE_61__["TSGraphControl"].clearStructures();
    _utils_OptimizationRecords__WEBPACK_IMPORTED_MODULE_67__["OptimizationRecords"].clearRecords();
    _utils_Utils__WEBPACK_IMPORTED_MODULE_54__["ObjectsStructures"].objects = new Map();
    const env = new _utils_Envmnt__WEBPACK_IMPORTED_MODULE_2__["Envmnt"](null, sentences);
    env.GO_ALL();
    const graphString = _utils_TSGraphControl__WEBPACK_IMPORTED_MODULE_61__["TSGraphControl"].GetGetGraphsString();
    if (graphString !== '') {
        const win = window.open('./graph.html#' + _utils_TSGraphControl__WEBPACK_IMPORTED_MODULE_61__["TSGraphControl"].GetGetGraphsString(), '_blank');
        if (win !== null)
            win.focus();
    }
}
function GetC3DCode(sentences) {
    _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_64__["Lbl"].resetCount();
    _utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_65__["Tmp"].resetCount();
    _utils_OptimizationRecords__WEBPACK_IMPORTED_MODULE_67__["OptimizationRecords"].clearRecords();
    const tmps = _utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_65__["Tmp"].getCount();
    let CCode = "";
    const env = new _utils_Envmnt__WEBPACK_IMPORTED_MODULE_2__["Envmnt"](null, sentences);
    const codeTypes = env.GO_ALL_TYPES();
    const codeGlobVars = env.GO_ALL_GLOBAL_VAR(null);
    const codeFunctions = env.GO_ALL_CODE_FUN();
    const code = env.GO_ALL_CODE();
    CCode += "#include <stdio.h> //Importar para el uso de Printf\n" +
        "double HEAP[99999999]; //Estructura para heap \n" +
        "double STACK[99999999]; //Estructura para stack \n" +
        "double P; //Puntero P \n" +
        "double H; //Puntero H \n" +
        "double ";
    for (let i = 0; i <= _utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_65__["Tmp"].getCount(); i++) {
        CCode += `t${i}`;
        CCode += i == _utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_65__["Tmp"].getCount() ? ";\n\n" : ",";
    }
    CCode += codeTypes.getText();
    CCode += "\n";
    CCode += codeFunctions.getText();
    CCode += "\n\nvoid main(){\n";
    CCode += codeGlobVars.getText();
    CCode += "\n";
    CCode += code.getText();
    CCode += "\nreturn;\n" +
        "}";
    return CCode;
}
function GetC3DCodeOptimizado(sentences) {
    _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_64__["Lbl"].resetCount();
    _utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_65__["Tmp"].resetCount();
    _utils_OptimizationRecords__WEBPACK_IMPORTED_MODULE_67__["OptimizationRecords"].clearRecords();
    const tmps = _utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_65__["Tmp"].getCount();
    let CCode = "";
    const env = new _utils_Envmnt__WEBPACK_IMPORTED_MODULE_2__["Envmnt"](null, sentences);
    _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_66__["Code"].optimizado = true;
    let codeTypes = env.GO_ALL_TYPES();
    let codeGlobVars = env.GO_ALL_GLOBAL_VAR(null);
    let codeFunctions = env.GO_ALL_CODE_FUN();
    let code = env.GO_ALL_CODE();
    _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_66__["Code"].optimizado = false;
    codeGlobVars = Object(_utils_BlocksOptimization__WEBPACK_IMPORTED_MODULE_69__["OpimizarionByBlocks"])(codeGlobVars);
    code = Object(_utils_BlocksOptimization__WEBPACK_IMPORTED_MODULE_69__["OpimizarionByBlocks"])(code);
    CCode += "#include <stdio.h> //Importar para el uso de Printf\n" +
        "double HEAP[99999999]; //Estructura para heap \n" +
        "double STACK[99999999]; //Estructura para stack \n" +
        "double P; //Puntero P \n" +
        "double H; //Puntero H \n" +
        "double ";
    for (let i = 0; i <= _utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_65__["Tmp"].getCount(); i++) {
        CCode += `t${i}`;
        CCode += i == _utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_65__["Tmp"].getCount() ? ";\n\n" : ",";
    }
    CCode += codeTypes.getText();
    CCode += "\n";
    CCode += codeFunctions.getText();
    CCode += "\n\nvoid main(){\n";
    CCode += codeGlobVars.getText();
    CCode += "\n";
    CCode += code.getText();
    CCode += "\nreturn;\n" +
        "}";
    return CCode;
}
function GraphAST(sentences) {
    let graph = 'digraph G {\n' +
        '        bgcolor="#1E222A"\n' +
        '        node [fillcolor="#2E3440"; style=filled; fontcolor="#2BBBAD"; color="#2BBBAD"];\n' +
        '        edge [color="#2BBBAD"];';
    const env = new _utils_Envmnt__WEBPACK_IMPORTED_MODULE_2__["Envmnt"](null, sentences);
    graph += env.GetGraph().toString();
    graph += '}';
    console.log(graph);
    return graph;
}
function TranslateStringsCompose(text) {
    return text.replace(/`([^̣`]*)`/g, (text) => text.replace(/`/g, '"').replace(/\${[^}]*}/g, (text) => "\"+" + text.substring(2, text.length - 1) + "+\""));
}
if (module && module.hot)
    module.hot.accept();

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/harmony-module.js */ "./node_modules/webpack/buildin/harmony-module.js")(module)))

/***/ }),

/***/ "./src/nodes/AndNode.ts":
/*!******************************!*\
  !*** ./src/nodes/AndNode.ts ***!
  \******************************/
/*! exports provided: AndNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AndNode", function() { return AndNode; });
/* harmony import */ var _utils_Op__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Op */ "./src/utils/Op.ts");
/* harmony import */ var _utils_LogicalOperationsFunctions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/LogicalOperationsFunctions */ "./src/utils/LogicalOperationsFunctions.ts");
/* harmony import */ var _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/C3D/Code */ "./src/utils/C3D/Code.ts");
/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
/* harmony import */ var _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/C3D/Lbl */ "./src/utils/C3D/Lbl.ts");
/* harmony import */ var _utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/C3D/Tmp */ "./src/utils/C3D/Tmp.ts");







class AndNode extends _utils_Op__WEBPACK_IMPORTED_MODULE_0__["Op"] {
    constructor(position, lf, rt) {
        super(position);
        this.lf = lf;
        this.rt = rt;
    }
    GOCode(env) {
        const codeLf = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_4__["GetReferenceValueCode"])(this.lf.ExeCode(env));
        const codeRt = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_4__["GetReferenceValueCode"])(this.rt.ExeCode(env));
        const lbl1 = _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_5__["Lbl"].newLbl();
        const lbl2 = _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_5__["Lbl"].newLbl();
        const lbl3 = _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_5__["Lbl"].newLbl();
        const codeAns = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"](codeLf, codeRt);
        codeAns.appendSplitComment("and start");
        codeAns.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_6__["Tmp"].newTmp());
        codeAns.appendValueToPointer("1");
        codeAns.appendJE(codeLf.getPointer(), "1", lbl1);
        codeAns.appendJMP(lbl2);
        codeAns.appendLabel(lbl1);
        codeAns.appendJE(codeRt.getPointer(), "1", lbl3);
        codeAns.appendLabel(lbl2);
        codeAns.appendValueToPointer("0");
        codeAns.appendLabel(lbl3);
        codeAns.appendSplitComment("and end");
        codeAns.setValue(Object(_utils_LogicalOperationsFunctions__WEBPACK_IMPORTED_MODULE_1__["And"])(codeLf.getValue(), codeRt.getValue()));
        //TODO tmpmanager ??
        return codeAns;
    }
    GO(env) {
        return Object(_utils_LogicalOperationsFunctions__WEBPACK_IMPORTED_MODULE_1__["And"])(this.lf.Exe(env), this.rt.Exe(env), this.position);
    }
    GetGraph(env) {
        return new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__["GraphvizNode"]('AND', [this.lf.GetGraph(env), this.rt.GetGraph(env)]);
    }
    GetTSGraph() {
        return "";
    }
}


/***/ }),

/***/ "./src/nodes/AsignNode.ts":
/*!********************************!*\
  !*** ./src/nodes/AsignNode.ts ***!
  \********************************/
/*! exports provided: AsignNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AsignNode", function() { return AsignNode; });
/* harmony import */ var _utils_Op__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Op */ "./src/utils/Op.ts");
/* harmony import */ var _utils_Reference__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Reference */ "./src/utils/Reference.ts");
/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
/* harmony import */ var _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/C3D/Code */ "./src/utils/C3D/Code.ts");





class AsignNode extends _utils_Op__WEBPACK_IMPORTED_MODULE_0__["Op"] {
    constructor(position, lf, rt) {
        super(position);
        this.lf = lf;
        this.rt = rt;
    }
    GOCode(env) {
        //const lfVal: object = this.lf.Exe(env);
        //const rtVal: object = this.rt.Exe(env);
        const codeLf = this.lf.ExeCode(env);
        let codeRt = this.rt.ExeCode(env);
        if (!(codeLf.getValue() instanceof _utils_Reference__WEBPACK_IMPORTED_MODULE_1__["Reference"])) {
            throw new _utils_Utils__WEBPACK_IMPORTED_MODULE_2__["SemanticException"](`No se puede asignar a ${codeLf.getValue().typo}, las asignaciones solo pueden ser sobre una referencia`, this.position);
        }
        codeRt = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_2__["GetReferenceValueCode"])(codeRt);
        const codeAns = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_4__["Code"](codeLf, codeRt);
        codeAns.appendSplitComment("start Asignacion");
        if (!codeLf.isHeap) {
            codeAns.appendAsignToStackPosition(codeLf.getPointer(), codeRt.getPointer());
        }
        else {
            codeAns.appendAsignToHeapPosition(codeLf.getPointer(), codeRt.getPointer());
        }
        codeLf.getValue().setValue(codeRt.getValue());
        codeAns.setPointer(codeLf.getPointer());
        codeAns.setValue(codeLf.getValue());
        codeAns.isHeap = codeLf.isHeap;
        codeAns.appendSplitComment("end Asginacion");
        return codeAns;
    }
    GO(env) {
        const lfVal = this.lf.Exe(env);
        const rtVal = this.rt.Exe(env);
        if (!(lfVal instanceof _utils_Reference__WEBPACK_IMPORTED_MODULE_1__["Reference"])) {
            throw new _utils_Utils__WEBPACK_IMPORTED_MODULE_2__["SemanticException"](`No se puede asignar a ${lfVal.typo}, las asignaciones solo pueden ser sobre una referencia`, this.position);
        }
        lfVal.PutValueOnReference(rtVal);
        return null;
    }
    GetGraph(env) {
        return new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_3__["GraphvizNode"]('ASIG', [this.lf.GetGraph(env), this.rt.GetGraph(env)]);
    }
    GetTSGraph() {
        return "";
    }
}


/***/ }),

/***/ "./src/nodes/BooleanNode.ts":
/*!**********************************!*\
  !*** ./src/nodes/BooleanNode.ts ***!
  \**********************************/
/*! exports provided: BooleanNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BooleanNode", function() { return BooleanNode; });
/* harmony import */ var _utils_Op__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Op */ "./src/utils/Op.ts");
/* harmony import */ var _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/PrimitiveTypoContainer */ "./src/utils/PrimitiveTypoContainer.ts");
/* harmony import */ var _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/C3D/Code */ "./src/utils/C3D/Code.ts");




class BooleanNode extends _utils_Op__WEBPACK_IMPORTED_MODULE_0__["Op"] {
    constructor(position, val) {
        super(position);
        this.val = val;
    }
    GOCode(env) {
        const code = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"]();
        code.setValue(new _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_1__["BOOLEAN"](this.val));
        code.setPointer(this.val ? 1 : 0);
        //TODO tmpmanager ??
        return code;
    }
    GO(env) {
        return new _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_1__["BOOLEAN"](this.val);
    }
    GetGraph(env) {
        return new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__["GraphvizNode"]('BOOLEAN', [new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__["GraphvizNode"](this.val + '', [])]);
    }
    GetTSGraph() {
        return "";
    }
}


/***/ }),

/***/ "./src/nodes/BreakNode.ts":
/*!********************************!*\
  !*** ./src/nodes/BreakNode.ts ***!
  \********************************/
/*! exports provided: BreakNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BreakNode", function() { return BreakNode; });
/* harmony import */ var _utils_Op__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Op */ "./src/utils/Op.ts");
/* harmony import */ var _BreakObj__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BreakObj */ "./src/nodes/BreakObj.ts");
/* harmony import */ var _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _BreakObjCode__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./BreakObjCode */ "./src/nodes/BreakObjCode.ts");




class BreakNode extends _utils_Op__WEBPACK_IMPORTED_MODULE_0__["Op"] {
    GO(env) {
        return new _BreakObj__WEBPACK_IMPORTED_MODULE_1__["BreakObj"]();
    }
    GOCode(env) {
        return new _BreakObjCode__WEBPACK_IMPORTED_MODULE_3__["BreakObjCode"](env.EndLabel);
    }
    GetGraph(env) {
        return new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__["GraphvizNode"]('BREAK', [new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__["GraphvizNode"]('break')]);
    }
    GetTSGraph() {
        return "";
    }
}


/***/ }),

/***/ "./src/nodes/BreakObj.ts":
/*!*******************************!*\
  !*** ./src/nodes/BreakObj.ts ***!
  \*******************************/
/*! exports provided: BreakObj */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BreakObj", function() { return BreakObj; });
/* harmony import */ var _utils_Cntnr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Cntnr */ "./src/utils/Cntnr.ts");

class BreakObj extends _utils_Cntnr__WEBPACK_IMPORTED_MODULE_0__["Cntnr"] {
    constructor() {
        super();
    }
}


/***/ }),

/***/ "./src/nodes/BreakObjCode.ts":
/*!***********************************!*\
  !*** ./src/nodes/BreakObjCode.ts ***!
  \***********************************/
/*! exports provided: BreakObjCode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BreakObjCode", function() { return BreakObjCode; });
/* harmony import */ var _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/C3D/Code */ "./src/utils/C3D/Code.ts");

class BreakObjCode extends _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_0__["Code"] {
    constructor(endLbl) {
        super();
        this.appendJMP(endLbl, "BREAK");
    }
}


/***/ }),

/***/ "./src/nodes/CaseNode.ts":
/*!*******************************!*\
  !*** ./src/nodes/CaseNode.ts ***!
  \*******************************/
/*! exports provided: CaseNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CaseNode", function() { return CaseNode; });
class CaseNode {
    constructor(position, conditionValue, sentences) {
        this.conditionValue = conditionValue;
        this.sentences = sentences;
        this.position = position;
    }
    getConditionValue() {
        return this.conditionValue;
    }
    getSentences() {
        return this.sentences;
    }
}


/***/ }),

/***/ "./src/nodes/ConsoleLogNode.ts":
/*!*************************************!*\
  !*** ./src/nodes/ConsoleLogNode.ts ***!
  \*************************************/
/*! exports provided: ConsoleLogNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConsoleLogNode", function() { return ConsoleLogNode; });
/* harmony import */ var _utils_Op__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Op */ "./src/utils/Op.ts");
/* harmony import */ var _utils_Reference__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Reference */ "./src/utils/Reference.ts");
/* harmony import */ var _utils_Console__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/Console */ "./src/utils/Console.ts");
/* harmony import */ var _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/C3D/Code */ "./src/utils/C3D/Code.ts");
/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");






class ConsoleLogNode extends _utils_Op__WEBPACK_IMPORTED_MODULE_0__["Op"] {
    constructor(position, expression) {
        super(position);
        this.expression = expression;
    }
    GOCode(env) {
        const codeAns = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_4__["Code"]();
        for (let expr of this.expression) {
            let codeExpr = expr.ExeCode(env);
            codeExpr = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_5__["GetReferenceValueCode"])(codeExpr);
            //System.out.println(codeExpr.getValue().typo);
            codeAns.append(codeExpr.ValueToStringCode());
            codeAns.appendPrintChar(32);
        }
        codeAns.appendPrintChar("'\\n'");
        return codeAns;
    }
    GO(env) {
        let finalLog = '[LOG]: ';
        for (let expression of this.expression) {
            let val = expression.Exe(env);
            if (val instanceof _utils_Reference__WEBPACK_IMPORTED_MODULE_1__["Reference"]) {
                val = val.getValue();
            }
            finalLog += `${val} `;
        }
        _utils_Console__WEBPACK_IMPORTED_MODULE_2__["Console"].log += `${finalLog}\n`;
        console.log(`${finalLog}`);
        return null;
    }
    ;
    GetGraph(env) {
        return new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_3__["GraphvizNode"]('CONSOLE.LOG', this.expression.map(expression => expression.GetGraph(env)));
    }
    GetTSGraph() {
        return "";
    }
}


/***/ }),

/***/ "./src/nodes/ContinueNode.ts":
/*!***********************************!*\
  !*** ./src/nodes/ContinueNode.ts ***!
  \***********************************/
/*! exports provided: ContinueNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContinueNode", function() { return ContinueNode; });
/* harmony import */ var _utils_Op__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Op */ "./src/utils/Op.ts");
/* harmony import */ var _ContinueObj__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ContinueObj */ "./src/nodes/ContinueObj.ts");
/* harmony import */ var _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _ContinueObjCode__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ContinueObjCode */ "./src/nodes/ContinueObjCode.ts");




class ContinueNode extends _utils_Op__WEBPACK_IMPORTED_MODULE_0__["Op"] {
    GO(env) {
        return new _ContinueObj__WEBPACK_IMPORTED_MODULE_1__["ContinueObj"]();
    }
    GOCode(env) {
        return new _ContinueObjCode__WEBPACK_IMPORTED_MODULE_3__["ContinueObjCode"](env.StartLabel);
    }
    GetGraph(env) {
        return new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__["GraphvizNode"]('CONTINUE', [new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__["GraphvizNode"]('continue')]);
    }
    GetTSGraph() {
        return "";
    }
}


/***/ }),

/***/ "./src/nodes/ContinueObj.ts":
/*!**********************************!*\
  !*** ./src/nodes/ContinueObj.ts ***!
  \**********************************/
/*! exports provided: ContinueObj */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContinueObj", function() { return ContinueObj; });
/* harmony import */ var _utils_Cntnr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Cntnr */ "./src/utils/Cntnr.ts");

class ContinueObj extends _utils_Cntnr__WEBPACK_IMPORTED_MODULE_0__["Cntnr"] {
    constructor() {
        super();
    }
}


/***/ }),

/***/ "./src/nodes/ContinueObjCode.ts":
/*!**************************************!*\
  !*** ./src/nodes/ContinueObjCode.ts ***!
  \**************************************/
/*! exports provided: ContinueObjCode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContinueObjCode", function() { return ContinueObjCode; });
/* harmony import */ var _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/C3D/Code */ "./src/utils/C3D/Code.ts");

class ContinueObjCode extends _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_0__["Code"] {
    constructor(startLbl) {
        super();
        this.appendJMP(startLbl, "CONTINUE");
    }
}


/***/ }),

/***/ "./src/nodes/CreateArrVarNode.ts":
/*!***************************************!*\
  !*** ./src/nodes/CreateArrVarNode.ts ***!
  \***************************************/
/*! exports provided: CreateArrVarNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CreateArrVarNode", function() { return CreateArrVarNode; });
/* harmony import */ var _utils_Op__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Op */ "./src/utils/Op.ts");
/* harmony import */ var _utils_Reference__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Reference */ "./src/utils/Reference.ts");
/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
/* harmony import */ var _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/PrimitiveTypoContainer */ "./src/utils/PrimitiveTypoContainer.ts");
/* harmony import */ var _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/C3D/Code */ "./src/utils/C3D/Code.ts");
/* harmony import */ var _utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/C3D/Tmp */ "./src/utils/C3D/Tmp.ts");







class CreateArrVarNode extends _utils_Op__WEBPACK_IMPORTED_MODULE_0__["Op"] {
    constructor(position, id, index) {
        super(position);
        this.id = id;
        this.index = index;
    }
    GOCode(env) {
        let codeVar = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_5__["Code"]();
        codeVar.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_6__["Tmp"].newTmp());
        let idRefVal = this.id.Exe(env);
        let idRefCode = this.id.ExeCode(env);
        let index = this.index.Exe(env);
        let indexCode = this.index.ExeCode(env);
        if (index instanceof _utils_Reference__WEBPACK_IMPORTED_MODULE_1__["Reference"]) {
            index = index.getValue();
        }
        if (index instanceof _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_3__["STRING"]) {
            const val = parseInt(index.getValue());
            if (isNaN(val)) {
                throw new _utils_Utils__WEBPACK_IMPORTED_MODULE_2__["SemanticException"]("El indice para accesar debe ser de tipo NUMBER", this.position);
            }
            index = new _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_3__["NUMBER"](val);
        }
        if (!(index instanceof _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_3__["NUMBER"])) {
            throw new _utils_Utils__WEBPACK_IMPORTED_MODULE_2__["SemanticException"]("El indice para accesar debe ser de tipo NUMBER", this.position);
        }
        let ref = idRefVal instanceof _utils_Reference__WEBPACK_IMPORTED_MODULE_1__["Reference"] ? idRefVal.getValue() : idRefVal;
        idRefCode = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_2__["GetReferenceValueCode"])(idRefCode);
        indexCode = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_2__["GetReferenceValueCode"])(indexCode);
        const indexNumberVal = index.getValue();
        if (!(ref instanceof _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_3__["ARRAY"])) {
            codeVar.setValue(new _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_3__["UNDEFINED"]());
        }
        else {
            codeVar.setValue(ref.getValue(indexNumberVal));
        }
        codeVar.append(idRefCode);
        codeVar.appendValueToPointer(idRefCode.getPointer());
        const memberPos = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_5__["Code"](codeVar);
        memberPos.appendSplitComment("start position code");
        memberPos.append(indexCode);
        memberPos.appendSplitComment("end position code");
        memberPos.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_6__["Tmp"].newTmp());
        memberPos.appendSuma(codeVar.getPointer(), indexCode.getPointer(), "ARR position");
        const arrayStart = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_5__["Code"](memberPos);
        arrayStart.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_6__["Tmp"].newTmp());
        arrayStart.appendValueToPointer(memberPos.getPointer());
        arrayStart.setValue(codeVar.getValue());
        arrayStart.isHeap = true;
        //TODO tmpmanager ??
        return arrayStart;
    }
    GO(env) {
        let idRef = this.id.Exe(env);
        // if (!(idRef instanceof Reference)) {
        //     throw new SemanticException(`Llamada a Arreglo ${idRef} no definido.`);
        // }
        let index = this.index.Exe(env);
        if (index instanceof _utils_Reference__WEBPACK_IMPORTED_MODULE_1__["Reference"]) {
            index = index.getValue();
        }
        if (index instanceof _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_3__["STRING"]) {
            const val = parseInt(index.getValue());
            if (isNaN(val)) {
                throw new _utils_Utils__WEBPACK_IMPORTED_MODULE_2__["SemanticException"]("El indice para accesar debe ser de tipo NUMBER", this.position);
            }
            index = new _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_3__["NUMBER"](val);
        }
        if (!(index instanceof _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_3__["NUMBER"])) {
            throw new _utils_Utils__WEBPACK_IMPORTED_MODULE_2__["SemanticException"]("El indice para accesar debe ser de tipo NUMBER", this.position);
        }
        let ref = idRef instanceof _utils_Reference__WEBPACK_IMPORTED_MODULE_1__["Reference"] ? idRef.getValue() : idRef;
        if (!(ref instanceof _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_3__["ARRAY"])) {
            return new _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_3__["UNDEFINED"]();
        }
        return ref.getValue(index.getValue());
    }
    GetGraph(env) {
        return new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_4__["GraphvizNode"]('ARR_ELEMENT', [this.id.GetGraph(env), this.index.GetGraph(env)]);
    }
    GetTSGraph() {
        return "";
    }
}


/***/ }),

/***/ "./src/nodes/CreateArrayNode.ts":
/*!**************************************!*\
  !*** ./src/nodes/CreateArrayNode.ts ***!
  \**************************************/
/*! exports provided: CreateArrayNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CreateArrayNode", function() { return CreateArrayNode; });
/* harmony import */ var _utils_Op__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Op */ "./src/utils/Op.ts");
/* harmony import */ var _utils_Reference__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Reference */ "./src/utils/Reference.ts");
/* harmony import */ var _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/PrimitiveTypoContainer */ "./src/utils/PrimitiveTypoContainer.ts");
/* harmony import */ var _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/C3D/Code */ "./src/utils/C3D/Code.ts");
/* harmony import */ var _utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/C3D/Tmp */ "./src/utils/C3D/Tmp.ts");
/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");







class CreateArrayNode extends _utils_Op__WEBPACK_IMPORTED_MODULE_0__["Op"] {
    constructor(position, vals) {
        super(position);
        this.vals = vals;
    }
    GOCode(env) {
        const codeAns = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_4__["Code"]();
        codeAns.appendSplitComment("satart Declaración de Arreglo");
        const codeHeap = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_4__["Code"]();
        codeHeap.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
        codeHeap.appendValueToPointer("H");
        const codeValues = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_4__["Code"]();
        codeValues.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
        codeValues.appendValueToPointer(codeHeap.getPointer());
        let real = new Array();
        for (let op of this.vals) {
            let reference = new _utils_Reference__WEBPACK_IMPORTED_MODULE_1__["Reference"]();
            reference.PutValueOnReference(op.Exe(env));
            real.push(reference);
            const codeVal = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_6__["GetReferenceValueCode"])(op.ExeCode(env));
            codeValues.append(codeVal);
            codeValues.appendAsignToHeapPosition(codeValues.getPointer(), codeVal.getPointer());
            codeValues.appendSuma(codeValues.getPointer(), "1", "next position");
        }
        let value = new _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["ARRAY"](real);
        //TODO array memory size calculate and use
        let memorySize = value.GetLinearMemorySize();
        codeHeap.appendAddToHeapPointer(memorySize, "tamaño de arreglo");
        codeAns.append(codeHeap);
        codeAns.append(codeValues);
        codeAns.setValue(value);
        codeAns.appendSplitComment("end Declaración de Arreglo");
        codeAns.setPointer(codeHeap.getPointer());
        return codeAns;
    }
    GO(env) {
        let real = new Array();
        for (let op of this.vals) {
            let reference = new _utils_Reference__WEBPACK_IMPORTED_MODULE_1__["Reference"]();
            reference.PutValueOnReference(op.Exe(env));
            real.push(reference);
        }
        return new _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["ARRAY"](real);
    }
    GetGraph(env) {
        return new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_3__["GraphvizNode"]('ARRAY', this.vals.map(val => val.GetGraph(env)));
    }
    GetTSGraph() {
        return "";
    }
}


/***/ }),

/***/ "./src/nodes/CreateIdVarNode.ts":
/*!**************************************!*\
  !*** ./src/nodes/CreateIdVarNode.ts ***!
  \**************************************/
/*! exports provided: CreateIdVarNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CreateIdVarNode", function() { return CreateIdVarNode; });
/* harmony import */ var _utils_Op__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Op */ "./src/utils/Op.ts");
/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
/* harmony import */ var _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/C3D/Code */ "./src/utils/C3D/Code.ts");
/* harmony import */ var _utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/C3D/Tmp */ "./src/utils/C3D/Tmp.ts");





class CreateIdVarNode extends _utils_Op__WEBPACK_IMPORTED_MODULE_0__["Op"] {
    constructor(position, id) {
        super(position);
        this.id = id;
    }
    GOCode(env) {
        const code = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"]();
        code.appendSplitComment(`start obtiene variable: ${this.id}`);
        code.setValue(Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_1__["FindVar"])(env, this.id));
        code.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_4__["Tmp"].newTmp());
        code.appendStackPointerPlusValue(env.GetPropertyIndex(this.id), "obtiene " + this.id);
        code.appendSplitComment(`end obtiene variable: ${this.id}`);
        //TODO tmpmanager ??
        return code;
    }
    GetId() {
        return this.id;
    }
    GO(env) {
        return Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_1__["FindVar"])(env, this.id);
    }
    GetGraph(env) {
        return new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__["GraphvizNode"]('VAR', [new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__["GraphvizNode"](this.id)]);
    }
    GetTSGraph() {
        return "";
    }
}


/***/ }),

/***/ "./src/nodes/CreateObjFunNode.ts":
/*!***************************************!*\
  !*** ./src/nodes/CreateObjFunNode.ts ***!
  \***************************************/
/*! exports provided: CreateObjFunNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CreateObjFunNode", function() { return CreateObjFunNode; });
/* harmony import */ var _utils_Op__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Op */ "./src/utils/Op.ts");
/* harmony import */ var _utils_Reference__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Reference */ "./src/utils/Reference.ts");
/* harmony import */ var _utils_functions_FunctionRepresent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/functions/FunctionRepresent */ "./src/utils/functions/FunctionRepresent.ts");
/* harmony import */ var _ReturnObj__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ReturnObj */ "./src/nodes/ReturnObj.ts");
/* harmony import */ var _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _utils_functions_Native__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/functions/Native */ "./src/utils/functions/Native.ts");
/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");







class CreateObjFunNode extends _utils_Op__WEBPACK_IMPORTED_MODULE_0__["Op"] {
    constructor(position, object, funId, args) {
        super(position);
        this.object = object;
        this.funId = funId;
        this.args = args;
    }
    GOCode(env) {
        let idCode = this.object.ExeCode(env);
        idCode = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_6__["GetReferenceValueCode"])(idCode);
        let ref = idCode.getValue();
        let vl = ref.GetProperty(this.funId);
        if (!(vl instanceof _utils_functions_FunctionRepresent__WEBPACK_IMPORTED_MODULE_2__["FunctionRepresent"])) {
            throw new Error(`No existe la funcion ${this.funId}`);
        }
        const codes = new Array();
        for (let arg of this.args) {
            let argValue = arg.ExeCode(env);
            argValue = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_6__["GetReferenceValueCode"])(argValue);
            codes.push(argValue);
        }
        codes.push(idCode);
        if (vl instanceof _utils_functions_Native__WEBPACK_IMPORTED_MODULE_5__["Native"]) {
            return vl.GetC3DCode(env, "", idCode, ...codes);
        }
    }
    GO(env) {
        let refe = this.object.Exe(env);
        if (refe instanceof _utils_Reference__WEBPACK_IMPORTED_MODULE_1__["Reference"]) {
            refe = refe.getValue();
        }
        let fun = refe.GetProperty(this.funId);
        if (!(fun instanceof _utils_functions_FunctionRepresent__WEBPACK_IMPORTED_MODULE_2__["FunctionRepresent"])) {
            return null;
        }
        const references = new Array();
        for (let arg of this.args) {
            let argValue = arg.Exe(env);
            if (argValue instanceof _utils_Reference__WEBPACK_IMPORTED_MODULE_1__["Reference"]) {
                argValue = argValue.getValue();
            }
            references.push(argValue);
        }
        let ans = fun.EXE(env, references);
        if (ans instanceof _ReturnObj__WEBPACK_IMPORTED_MODULE_3__["ReturnObj"]) {
            return ans.getValue();
        }
        return null;
    }
    GetGraph(env) {
        return new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_4__["GraphvizNode"]('FUNCTION', [this.object.GetGraph(env), new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_4__["GraphvizNode"](this.funId), new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_4__["GraphvizNode"]('ARGS', this.args.map(arg => arg.GetGraph(env)))]);
    }
    GetTSGraph() {
        return "";
    }
}


/***/ }),

/***/ "./src/nodes/CreateObjNode.ts":
/*!************************************!*\
  !*** ./src/nodes/CreateObjNode.ts ***!
  \************************************/
/*! exports provided: CreateObjNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CreateObjNode", function() { return CreateObjNode; });
/* harmony import */ var _utils_Op__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Op */ "./src/utils/Op.ts");
/* harmony import */ var _utils_Reference__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Reference */ "./src/utils/Reference.ts");
/* harmony import */ var _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/PrimitiveTypoContainer */ "./src/utils/PrimitiveTypoContainer.ts");
/* harmony import */ var _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/C3D/Code */ "./src/utils/C3D/Code.ts");
/* harmony import */ var _utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/C3D/Tmp */ "./src/utils/C3D/Tmp.ts");
/* harmony import */ var _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/C3D/Lbl */ "./src/utils/C3D/Lbl.ts");
/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");








class CreateObjNode extends _utils_Op__WEBPACK_IMPORTED_MODULE_0__["Op"] {
    constructor(position, attrs) {
        super(position);
        this.attrs = attrs;
    }
    GOCode(env) {
        const codeAns = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_4__["Code"]();
        codeAns.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
        codeAns.appendSplitComment("start OBJECT INITIALIZATION");
        codeAns.appendValueToPointer("H");
        codeAns.appendAddToHeapPointer(this.attrs.size, "tamaño de objeto");
        const codeClear = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_4__["Code"]();
        codeClear.appendSplitComment("empieza limpiando heap");
        codeClear.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
        codeClear.appendValueToPointer("H");
        const lbl = _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_6__["Lbl"].newLbl();
        codeClear.appendLabel(lbl);
        codeClear.appendAsignToHeapPosition(codeClear.getPointer(), 0);
        codeClear.appendResta(codeClear.getPointer(), "1");
        codeClear.appendJGE(codeClear.getPointer(), codeAns.getPointer(), lbl);
        codeClear.appendSplitComment("termina limpiar heap");
        codeAns.append(codeClear);
        const real = new Map();
        const codeAsignValues = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_4__["Code"]();
        codeAsignValues.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
        codeAsignValues.appendValueToPointer(codeAns.getPointer());
        codeAns.append(codeAsignValues);
        this.attrs.forEach((v, k) => {
            let value = v.ExeCode(env);
            value = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_7__["GetReferenceValueCode"])(value);
            const reference = new _utils_Reference__WEBPACK_IMPORTED_MODULE_1__["Reference"]();
            reference.PutValueOnReference(value.getValue());
            real.set(k, reference);
            codeAns.append(value);
            codeAns.appendAsignToHeapPosition(codeAsignValues.getPointer(), value.getPointer(), `puntero a ${k}`);
            codeAns.appendLine(`${codeAsignValues.getPointer()} = ${codeAsignValues.getPointer()} + 1;`);
        });
        codeAns.setValue(new _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["OBJECT"](real));
        codeAns.appendSplitComment("start OBJECT INITIALIZATION");
        return codeAns;
    }
    GO(env) {
        const real = new Map();
        this.attrs.forEach((v, k) => {
            let value = v.Exe(env);
            if (value instanceof _utils_Reference__WEBPACK_IMPORTED_MODULE_1__["Reference"]) {
                value = value.getValue();
            }
            const reference = new _utils_Reference__WEBPACK_IMPORTED_MODULE_1__["Reference"]();
            reference.PutValueOnReference(value);
            real.set(k, reference);
        });
        return new _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["OBJECT"](real);
    }
    GetGraph(env) {
        let values = [];
        this.attrs.forEach((v, k) => {
            values.push(new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_3__["GraphvizNode"](k));
            values.push(v.GetGraph(env));
        });
        return new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_3__["GraphvizNode"]('TYPE_VALUE', values);
    }
    GetTSGraph() {
        return "";
    }
}


/***/ }),

/***/ "./src/nodes/CreateObjVarNode.ts":
/*!***************************************!*\
  !*** ./src/nodes/CreateObjVarNode.ts ***!
  \***************************************/
/*! exports provided: CreateObjVarNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CreateObjVarNode", function() { return CreateObjVarNode; });
/* harmony import */ var _utils_Op__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Op */ "./src/utils/Op.ts");
/* harmony import */ var _utils_Reference__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Reference */ "./src/utils/Reference.ts");
/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
/* harmony import */ var _utils_functions_FunctionRepresent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/functions/FunctionRepresent */ "./src/utils/functions/FunctionRepresent.ts");
/* harmony import */ var _ReturnObj__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ReturnObj */ "./src/nodes/ReturnObj.ts");
/* harmony import */ var _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/C3D/Code */ "./src/utils/C3D/Code.ts");
/* harmony import */ var _utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/C3D/Tmp */ "./src/utils/C3D/Tmp.ts");
/* harmony import */ var _utils_functions_Native__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/functions/Native */ "./src/utils/functions/Native.ts");









class CreateObjVarNode extends _utils_Op__WEBPACK_IMPORTED_MODULE_0__["Op"] {
    constructor(position, id, attr) {
        super(position);
        this.id = id;
        this.attr = attr;
    }
    GOCode(env) {
        //TODO NATIVE CALL
        const codeAns = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_6__["Code"]();
        codeAns.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_7__["Tmp"].newTmp());
        let idCode = this.id.ExeCode(env);
        idCode = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_2__["GetReferenceValueCode"])(idCode);
        let ref = idCode.getValue();
        let vl = ref.GetProperty(this.attr);
        if (vl instanceof _utils_functions_Native__WEBPACK_IMPORTED_MODULE_8__["Native"]) {
            console.log(idCode);
            return vl.GetC3DCode(env, "", idCode);
        }
        let e = ref.GetPropertyIndex(this.attr)[0];
        const codeVar = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_6__["Code"](idCode);
        codeVar.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_7__["Tmp"].newTmp());
        codeVar.appendSuma(idCode.getPointer(), e + "", "property index");
        codeAns.append(codeVar);
        codeAns.appendValueToPointer(codeVar.getPointer(), `obtiene ${this.attr}`);
        codeAns.setValue(vl);
        codeAns.isHeap = true;
        return codeAns;
    }
    GO(env) {
        let id = this.id.Exe(env);
        if (!(id instanceof _utils_Reference__WEBPACK_IMPORTED_MODULE_1__["Reference"])) {
            throw new _utils_Utils__WEBPACK_IMPORTED_MODULE_2__["SemanticException"]("Llamada a Objeto no definido", this.position);
        }
        let ref = id.getValue();
        let e = ref.GetProperty(this.attr);
        if (e instanceof _utils_functions_FunctionRepresent__WEBPACK_IMPORTED_MODULE_3__["FunctionRepresent"]) {
            let ans = e.EXE(env, new Array());
            if (ans instanceof _ReturnObj__WEBPACK_IMPORTED_MODULE_4__["ReturnObj"]) {
                return ans.getValue();
            }
        }
        return ref.GetProperty(this.attr);
    }
    GetGraph(env) {
        return new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_5__["GraphvizNode"]('TYPE_MEMBER', [this.id.GetGraph(env), new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_5__["GraphvizNode"](this.attr)]);
    }
    GetTSGraph() {
        return "";
    }
}


/***/ }),

/***/ "./src/nodes/DeclareFunNode.ts":
/*!*************************************!*\
  !*** ./src/nodes/DeclareFunNode.ts ***!
  \*************************************/
/*! exports provided: DeclareFunNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DeclareFunNode", function() { return DeclareFunNode; });
/* harmony import */ var _utils_Op__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Op */ "./src/utils/Op.ts");
/* harmony import */ var _utils_functions_UserDefined__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/functions/UserDefined */ "./src/utils/functions/UserDefined.ts");
/* harmony import */ var _utils_Reference__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/Reference */ "./src/utils/Reference.ts");
/* harmony import */ var _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _utils_TSGraphControl__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/TSGraphControl */ "./src/utils/TSGraphControl.ts");
/* harmony import */ var _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/C3D/Code */ "./src/utils/C3D/Code.ts");






class DeclareFunNode extends _utils_Op__WEBPACK_IMPORTED_MODULE_0__["Op"] {
    constructor(position, name, params, sentences, type = 'ANY') {
        super(position);
        this.name = name;
        this.params = params;
        this.sentences = sentences;
        this.type = type;
    }
    GOCode(env) {
        let codeAns = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_5__["Code"]();
        for (let sentence of this.sentences) {
            if (sentence instanceof DeclareFunNode) {
                try {
                    const result = sentence.ExeCode(env);
                    codeAns.append(result);
                }
                catch (e) {
                    console.log(e.message);
                }
            }
        }
        const value = new _utils_functions_UserDefined__WEBPACK_IMPORTED_MODULE_1__["UserDefined"](this.sentences, this.params, this.type);
        const reference = new _utils_Reference__WEBPACK_IMPORTED_MODULE_2__["Reference"]();
        reference.PutValueOnReference(value);
        env.Declare(this.name, reference, true);
        let funC3D = value.GetC3DCode(env, this.name);
        codeAns.append(funC3D);
        codeAns.setValue(funC3D.getValue());
        return codeAns;
    }
    GO(env) {
        const value = new _utils_functions_UserDefined__WEBPACK_IMPORTED_MODULE_1__["UserDefined"](this.sentences, this.params, this.type);
        const reference = new _utils_Reference__WEBPACK_IMPORTED_MODULE_2__["Reference"]();
        reference.PutValueOnReference(value);
        if (this.name !== null) {
            env.Declare(this.name, reference);
            return undefined;
        }
        return value;
    }
    GetGraph(env) {
        return new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_3__["GraphvizNode"]('NEW_FUN', [
            new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_3__["GraphvizNode"](this.name),
            new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_3__["GraphvizNode"](this.type),
            new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_3__["GraphvizNode"]('PARAMS', this.params.map(param => param.GetGraph(env))),
            new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_3__["GraphvizNode"]('NEW_FUN_BODY', this.sentences.map(sentence => sentence.GetGraph(env)))
        ]);
    }
    GetTSGraph() {
        let value = '';
        const graphId = _utils_TSGraphControl__WEBPACK_IMPORTED_MODULE_4__["TSGraphControl"].GetGraphId();
        value += `subgraph cluster_${graphId} { \n`;
        value += 'style=filled;\n' +
            'color="#2BBBAD";\n' +
            'fillcolor="#1E222A";\n';
        value += 'node [color="#2BBBAD" fontcolor="#2BBBAD" shape="rectangle"] \n';
        this.sentences.forEach(sentence => {
            value += sentence.GetTSGraph();
        });
        this.params.forEach(param => {
            value += param.GetTSGraph();
        });
        value += `label = "${this.name}";\n`;
        value += `}\n`;
        return value;
    }
}


/***/ }),

/***/ "./src/nodes/DeclareFunParamNode.ts":
/*!******************************************!*\
  !*** ./src/nodes/DeclareFunParamNode.ts ***!
  \******************************************/
/*! exports provided: DeclareFunParamNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DeclareFunParamNode", function() { return DeclareFunParamNode; });
/* harmony import */ var _utils_Op__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Op */ "./src/utils/Op.ts");
/* harmony import */ var _utils_Reference__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Reference */ "./src/utils/Reference.ts");
/* harmony import */ var _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _utils_TSGraphControl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/TSGraphControl */ "./src/utils/TSGraphControl.ts");
/* harmony import */ var _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/C3D/Code */ "./src/utils/C3D/Code.ts");





class DeclareFunParamNode extends _utils_Op__WEBPACK_IMPORTED_MODULE_0__["Op"] {
    constructor(position, name, type = 'ANY') {
        super(position);
        this.name = name;
        this.type = type.toUpperCase();
    }
    GetName() {
        return this.name.toUpperCase();
    }
    GO(env) {
        const reference = new _utils_Reference__WEBPACK_IMPORTED_MODULE_1__["Reference"](this.type, false, true);
        env.Declare(this.name, reference);
        return reference;
    }
    GOCode(env) {
        let val = this.GO(env);
        // const codeStack = new Code();
        // codeStack.setPointer(Tmp.newTmp());
        // codeStack.appendStackPointerPlusValue(env.GetPropertyIndex(this.name) + "", this.name);
        //
        // codeAns.append(codeStack);
        // codeAns.appendAsignToStackPosition(codeStack.getPointer(), 0 + "");
        // codeAns.setValue(val as Cntnr);
        return new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_4__["Code"]();
    }
    GetGraph(env) {
        return new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__["GraphvizNode"]('NEW_FUN_PARAM', [new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__["GraphvizNode"](this.name), new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__["GraphvizNode"](this.type)]);
    }
    GetTSGraph() {
        return `n${_utils_TSGraphControl__WEBPACK_IMPORTED_MODULE_3__["TSGraphControl"].GetNodeId()} [label="${this.name}"]\n`;
        ;
    }
}


/***/ }),

/***/ "./src/nodes/DeclareTypeStructureNode.ts":
/*!***********************************************!*\
  !*** ./src/nodes/DeclareTypeStructureNode.ts ***!
  \***********************************************/
/*! exports provided: DeclareTypeStructureNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DeclareTypeStructureNode", function() { return DeclareTypeStructureNode; });
/* harmony import */ var _utils_Op__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Op */ "./src/utils/Op.ts");
/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
/* harmony import */ var _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/C3D/Code */ "./src/utils/C3D/Code.ts");




class DeclareTypeStructureNode extends _utils_Op__WEBPACK_IMPORTED_MODULE_0__["Op"] {
    constructor(position, name, properties) {
        super(position);
        this.name = name;
        this.properties = properties.getMap();
    }
    GOCode(env) {
        const structure = new _utils_Utils__WEBPACK_IMPORTED_MODULE_1__["ObjectStructure"](this.properties);
        _utils_Utils__WEBPACK_IMPORTED_MODULE_1__["ObjectsStructures"].objects.set(this.name.toUpperCase(), structure);
        return new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"]();
    }
    GO(env) {
        const structure = new _utils_Utils__WEBPACK_IMPORTED_MODULE_1__["ObjectStructure"](this.properties);
        _utils_Utils__WEBPACK_IMPORTED_MODULE_1__["ObjectsStructures"].objects.set(this.name.toUpperCase(), structure);
        return undefined;
    }
    GetGraph(env) {
        let values = [];
        this.properties.forEach((v, k) => {
            values.push(new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__["GraphvizNode"](k));
            values.push(new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__["GraphvizNode"](v));
        });
        return new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__["GraphvizNode"]('NEW_TYPE', [new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__["GraphvizNode"](this.name), new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__["GraphvizNode"]('VALUES', values)]);
    }
    GetTSGraph() {
        return "";
    }
}


/***/ }),

/***/ "./src/nodes/DeclareVarListNode.ts":
/*!*****************************************!*\
  !*** ./src/nodes/DeclareVarListNode.ts ***!
  \*****************************************/
/*! exports provided: DeclareVarListNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DeclareVarListNode", function() { return DeclareVarListNode; });
/* harmony import */ var _utils_Op__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Op */ "./src/utils/Op.ts");
/* harmony import */ var _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/PrimitiveTypoContainer */ "./src/utils/PrimitiveTypoContainer.ts");
/* harmony import */ var _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/C3D/Code */ "./src/utils/C3D/Code.ts");




class DeclareVarListNode extends _utils_Op__WEBPACK_IMPORTED_MODULE_0__["Op"] {
    constructor(position, tipoNombre, declarationOps, value, isConst = false) {
        super(position);
        this.tipoNombre = tipoNombre;
        this.declarationOps = declarationOps;
        this.value = value || null;
        this.isConst = isConst;
    }
    GOCode(env) {
        const codeAns = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"]();
        for (let op of this.declarationOps) {
            try {
                if (this.value !== null) {
                    op.AddValue(this.value.Exe(env), this.isConst, this.tipoNombre, this.value);
                }
                else {
                    op.AddValue(new _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_1__["UNDEFINED"](), this.isConst, this.tipoNombre);
                }
                const res = op.ExeCode(env);
                codeAns.append(res);
            }
            catch (e) {
                console.log(e.message);
            }
        }
        return codeAns;
    }
    GO(env) {
        for (let op of this.declarationOps) {
            try {
                if (this.value !== null) {
                    op.AddValue(this.value.Exe(env), this.isConst, this.tipoNombre);
                }
                else {
                    op.AddValue(new _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_1__["UNDEFINED"](), this.isConst, this.tipoNombre);
                }
                op.Exe(env);
            }
            catch (e) {
                console.log(e.message);
            }
        }
        return null;
    }
    GetGraph(env) {
        return new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__["GraphvizNode"]('DECLARE_VAR_LIST', [new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__["GraphvizNode"](this.tipoNombre ? this.tipoNombre : 'ANY'), this.value === null ? new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__["GraphvizNode"]('UNDEFINED') : this.value.GetGraph(env)]
            .concat(this.declarationOps.map(op => op.GetGraph(env))));
    }
    GetTSGraph() {
        let val = '';
        this.declarationOps.forEach(declare => {
            val += declare.GetTSGraph();
        });
        return val;
    }
}


/***/ }),

/***/ "./src/nodes/DeclareVarNode.ts":
/*!*************************************!*\
  !*** ./src/nodes/DeclareVarNode.ts ***!
  \*************************************/
/*! exports provided: DeclareVarNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DeclareVarNode", function() { return DeclareVarNode; });
/* harmony import */ var _utils_Op__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Op */ "./src/utils/Op.ts");
/* harmony import */ var _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/PrimitiveTypoContainer */ "./src/utils/PrimitiveTypoContainer.ts");
/* harmony import */ var _utils_Reference__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/Reference */ "./src/utils/Reference.ts");
/* harmony import */ var _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _utils_TSGraphControl__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/TSGraphControl */ "./src/utils/TSGraphControl.ts");
/* harmony import */ var _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/C3D/Code */ "./src/utils/C3D/Code.ts");
/* harmony import */ var _utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/C3D/Tmp */ "./src/utils/C3D/Tmp.ts");
/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");








class DeclareVarNode extends _utils_Op__WEBPACK_IMPORTED_MODULE_0__["Op"] {
    constructor(position, name, value = null) {
        super(position);
        this.value = new _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_1__["UNDEFINED"]();
        this.valueCode = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_5__["Code"]();
        this.name = name;
        this.valueOp = value;
    }
    GOCode(env) {
        this.GO(env);
        const codeAns = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_5__["Code"]();
        if (this.value instanceof _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_1__["NULL"]) {
            const codeStack = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_5__["Code"]();
            codeStack.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_6__["Tmp"].newTmp());
            codeStack.appendStackPointerPlusValue(env.GetPropertyIndex(this.name));
            codeAns.append(codeStack);
            codeAns.appendAsignToStackPosition(codeStack.getPointer(), 0 + "");
            codeAns.setValue(this.value);
            return codeAns;
        }
        if (this.valueOp) {
            const codeStack = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_5__["Code"]();
            codeStack.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_6__["Tmp"].newTmp());
            codeStack.appendStackPointerPlusValue(env.GetPropertyIndex(this.name));
            codeAns.append(codeStack);
            this.valueCode = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_7__["GetReferenceValueCode"])(this.valueCode);
            codeAns.append(this.valueCode);
            codeAns.appendAsignToStackPosition(codeStack.getPointer(), this.valueCode.getPointer());
            codeAns.setValue(this.value);
            return codeAns;
        }
        return codeAns;
    }
    GO(env) {
        this.AddVarOnDeclare(env, this.name);
        return null;
    }
    AddValue(value = new _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_1__["UNDEFINED"](), isConst = false, tipoNombre = 'ANY', valOp = null) {
        this.value = value;
        this.isConst = isConst;
        if (tipoNombre === '') {
            tipoNombre = 'ANY';
        }
        this.tipoNombre = tipoNombre.toUpperCase();
        this.valueOp = valOp ? valOp : this.valueOp;
    }
    AddVarOnDeclare(env, identifier) {
        let value = this.value;
        if (this.valueOp != null) {
            value = this.valueOp.Exe(env);
            this.valueCode = this.valueOp.ExeCode(env);
            this.value = value;
        }
        const reference = new _utils_Reference__WEBPACK_IMPORTED_MODULE_2__["Reference"](this.tipoNombre, this.isConst);
        reference.PutValueOnReference(value);
        env.Declare(identifier, reference);
    }
    GetGraph(env) {
        return new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_3__["GraphvizNode"]('DECLARE_VAR', [new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_3__["GraphvizNode"](this.name), new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_3__["GraphvizNode"](this.tipoNombre ? this.tipoNombre : 'ANY'),
            this.valueOp !== null ? this.valueOp.GetGraph(env) : new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_3__["GraphvizNode"]('undefined')]);
    }
    GetTSGraph() {
        return `n${_utils_TSGraphControl__WEBPACK_IMPORTED_MODULE_4__["TSGraphControl"].GetNodeId()} [label="${this.name}"]\n`;
    }
}


/***/ }),

/***/ "./src/nodes/DifNode.ts":
/*!******************************!*\
  !*** ./src/nodes/DifNode.ts ***!
  \******************************/
/*! exports provided: DifNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DifNode", function() { return DifNode; });
/* harmony import */ var _utils_Op__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Op */ "./src/utils/Op.ts");
/* harmony import */ var _utils_RelationalOperationsFunctions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/RelationalOperationsFunctions */ "./src/utils/RelationalOperationsFunctions.ts");
/* harmony import */ var _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/C3D/Code */ "./src/utils/C3D/Code.ts");
/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
/* harmony import */ var _utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/C3D/Tmp */ "./src/utils/C3D/Tmp.ts");
/* harmony import */ var _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/C3D/Lbl */ "./src/utils/C3D/Lbl.ts");







class DifNode extends _utils_Op__WEBPACK_IMPORTED_MODULE_0__["Op"] {
    constructor(position, lf, rt) {
        super(position);
        this.lf = lf;
        this.rt = rt;
    }
    GOCode(env) {
        const codeLf = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_4__["GetReferenceValueCode"])(this.lf.ExeCode(env));
        const codeRt = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_4__["GetReferenceValueCode"])(this.rt.ExeCode(env));
        const codeAns = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"](codeLf, codeRt);
        codeAns.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
        codeAns.appendValueToPointer("1");
        const lbl = _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_6__["Lbl"].newLbl();
        codeAns.appendJNE(codeLf.getPointer(), codeRt.getPointer(), lbl);
        codeAns.appendValueToPointer("0");
        codeAns.appendLabel(lbl);
        codeAns.setValue(Object(_utils_RelationalOperationsFunctions__WEBPACK_IMPORTED_MODULE_1__["Diferente"])(codeLf.getValue(), codeRt.getValue()));
        //TODO tmpmanager ??
        return codeAns;
    }
    GO(env) {
        return Object(_utils_RelationalOperationsFunctions__WEBPACK_IMPORTED_MODULE_1__["Diferente"])(this.lf.Exe(env), this.rt.Exe(env), this.position);
    }
    GetGraph(env) {
        return new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__["GraphvizNode"]('DIF', [this.lf.GetGraph(env), this.rt.GetGraph(env)]);
    }
    GetTSGraph() {
        return "";
    }
}


/***/ }),

/***/ "./src/nodes/DivNode.ts":
/*!******************************!*\
  !*** ./src/nodes/DivNode.ts ***!
  \******************************/
/*! exports provided: DivNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DivNode", function() { return DivNode; });
/* harmony import */ var _utils_Op__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Op */ "./src/utils/Op.ts");
/* harmony import */ var _utils_AlgebraicOperationsFunctions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/AlgebraicOperationsFunctions */ "./src/utils/AlgebraicOperationsFunctions.ts");
/* harmony import */ var _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/C3D/Code */ "./src/utils/C3D/Code.ts");
/* harmony import */ var _utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/C3D/Tmp */ "./src/utils/C3D/Tmp.ts");
/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");






class DivNode extends _utils_Op__WEBPACK_IMPORTED_MODULE_0__["Op"] {
    constructor(position, lf, rt) {
        super(position);
        this.lf = lf;
        this.rt = rt;
    }
    GOCode(env) {
        const codeLf = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_5__["GetReferenceValueCode"])(this.lf.ExeCode(env));
        const codeRt = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_5__["GetReferenceValueCode"])(this.rt.ExeCode(env));
        const codeAns = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"](codeLf, codeRt);
        codeAns.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_4__["Tmp"].newTmp());
        codeAns.appendDiv(codeLf.getPointer(), codeRt.getPointer());
        codeAns.setValue(Object(_utils_AlgebraicOperationsFunctions__WEBPACK_IMPORTED_MODULE_1__["Division"])(codeLf.getValue(), codeRt.getValue()));
        //TODO tmpmanager ??
        return codeAns;
    }
    GO(env) {
        return Object(_utils_AlgebraicOperationsFunctions__WEBPACK_IMPORTED_MODULE_1__["Division"])(this.lf.Exe(env), this.rt.Exe(env), this.position);
    }
    GetGraph(env) {
        return new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__["GraphvizNode"]('DIV', [this.lf.GetGraph(env), this.rt.GetGraph(env)]);
    }
    GetTSGraph() {
        return "";
    }
}


/***/ }),

/***/ "./src/nodes/DoWhileNode.ts":
/*!**********************************!*\
  !*** ./src/nodes/DoWhileNode.ts ***!
  \**********************************/
/*! exports provided: DoWhileNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DoWhileNode", function() { return DoWhileNode; });
/* harmony import */ var _utils_Op__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Op */ "./src/utils/Op.ts");
/* harmony import */ var _utils_Envmnt__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Envmnt */ "./src/utils/Envmnt.ts");
/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
/* harmony import */ var _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _utils_TSGraphControl__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/TSGraphControl */ "./src/utils/TSGraphControl.ts");
/* harmony import */ var _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/C3D/Code */ "./src/utils/C3D/Code.ts");
/* harmony import */ var _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/PrimitiveTypoContainer */ "./src/utils/PrimitiveTypoContainer.ts");
/* harmony import */ var _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/C3D/Lbl */ "./src/utils/C3D/Lbl.ts");








class DoWhileNode extends _utils_Op__WEBPACK_IMPORTED_MODULE_0__["Op"] {
    constructor(position, condition, sentences) {
        super(position);
        this.condition = condition;
        this.sentences = sentences;
    }
    GOCode(env) {
        const startLbl = _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_7__["Lbl"].newLbl(); //while start lbl
        const endLbl = _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_7__["Lbl"].newLbl(); // while end lbl
        const codeWhile = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_5__["Code"]();
        codeWhile.appendSplitComment("WHILE START");
        codeWhile.appendLabel(startLbl);
        const envWhile = new _utils_Envmnt__WEBPACK_IMPORTED_MODULE_1__["Envmnt"](env, this.sentences, startLbl, endLbl);
        //Utils.PassPropsAndFuncs(env, envWhile);
        const whileCode = envWhile.GO_ALL_CODE();
        codeWhile.append(whileCode);
        codeWhile.appendLabel(endLbl);
        const cond = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_2__["GetReferenceValueCode"])(this.condition.ExeCode(env));
        if (!(cond.getValue() instanceof _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_6__["BOOLEAN"]))
            throw new _utils_Utils__WEBPACK_IMPORTED_MODULE_2__["SemanticException"]("condicion utilizada como parametro no soportada por sentencia while");
        codeWhile.append(cond);
        codeWhile.appendJE(cond.getPointer(), "1", startLbl);
        codeWhile.appendSplitComment("WHILE END");
        return codeWhile;
    }
    GO(env) {
        return Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_2__["LogicDoWhile"])(env, this.condition, this.sentences, null);
    }
    GetGraph(env) {
        return new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_3__["GraphvizNode"]('DO_WHILE', [new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_3__["GraphvizNode"]('WHILE_BODY', this.sentences.map(sentence => sentence.GetGraph(env))), this.condition.GetGraph(env)]);
    }
    GetTSGraph() {
        let value = '';
        const graphId = _utils_TSGraphControl__WEBPACK_IMPORTED_MODULE_4__["TSGraphControl"].GetGraphId();
        value += `subgraph cluster_${graphId} { \n`;
        value += 'style=filled;\n' +
            'color="#2BBBAD";\n' +
            'fillcolor="#1E222A";\n';
        value += 'node [color="#2BBBAD" fontcolor="#2BBBAD" shape="rectangle"] \n';
        value += this.condition.GetTSGraph();
        this.sentences.forEach(sentence => {
            value += sentence.GetTSGraph();
        });
        value += `label = "${"DO_WHILE_SENTENCE"}";\n`;
        value += `}\n`;
        return value;
    }
}


/***/ }),

/***/ "./src/nodes/EqNode.ts":
/*!*****************************!*\
  !*** ./src/nodes/EqNode.ts ***!
  \*****************************/
/*! exports provided: EqNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EqNode", function() { return EqNode; });
/* harmony import */ var _utils_Op__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Op */ "./src/utils/Op.ts");
/* harmony import */ var _utils_RelationalOperationsFunctions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/RelationalOperationsFunctions */ "./src/utils/RelationalOperationsFunctions.ts");
/* harmony import */ var _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/C3D/Code */ "./src/utils/C3D/Code.ts");
/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
/* harmony import */ var _utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/C3D/Tmp */ "./src/utils/C3D/Tmp.ts");
/* harmony import */ var _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/C3D/Lbl */ "./src/utils/C3D/Lbl.ts");
/* harmony import */ var _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/PrimitiveTypoContainer */ "./src/utils/PrimitiveTypoContainer.ts");








class EqNode extends _utils_Op__WEBPACK_IMPORTED_MODULE_0__["Op"] {
    constructor(position, lf, rt) {
        super(position);
        this.lf = lf;
        this.rt = rt;
    }
    GOCode(env) {
        const codeLf = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_4__["GetReferenceValueCode"])(this.lf.ExeCode(env));
        const codeRt = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_4__["GetReferenceValueCode"])(this.rt.ExeCode(env));
        const codeAns = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"](codeLf, codeRt);
        codeAns.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
        codeAns.setValue(Object(_utils_RelationalOperationsFunctions__WEBPACK_IMPORTED_MODULE_1__["Igual"])(codeLf.getValue(), codeRt.getValue()));
        const lbl = _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_6__["Lbl"].newLbl();
        codeAns.appendValueToPointer("1");
        if (codeLf.getValue() instanceof _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_7__["STRING"] && codeRt.getValue() instanceof _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_7__["STRING"]) {
            const codeStrLf = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"]();
            const codeStrRt = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"]();
            let nonEq = _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_6__["Lbl"].newLbl();
            codeStrLf.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
            codeStrRt.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
            codeStrLf.GetFromHeap(codeLf.getPointer(), "obtiene tamaño str1");
            codeStrRt.GetFromHeap(codeRt.getPointer(), "obtiene tamaño str2");
            codeAns.append(codeStrLf);
            codeAns.append(codeStrRt);
            codeAns.appendJNE(codeStrLf.getPointer(), codeStrRt.getPointer(), nonEq, "no mismo tamaño, salto a falso");
            const codeLfIndex = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"]();
            const codeRtIndex = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"]();
            codeLfIndex.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
            codeRtIndex.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
            codeLfIndex.appendSuma(codeLf.getPointer(), "1", "indice str1");
            codeRtIndex.appendSuma(codeRt.getPointer(), "1", "indice str2");
            codeAns.append(codeLfIndex);
            codeAns.append(codeRtIndex);
            let whileStart = _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_6__["Lbl"].newLbl();
            let whileEnd = _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_6__["Lbl"].newLbl();
            const codeWhile = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"]();
            codeWhile.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
            codeWhile.appendValueToPointer("0", "control de comparacion");
            codeWhile.appendLabel(whileStart);
            const codeHeapLf = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"]();
            const codeHeapRt = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"]();
            codeHeapLf.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
            codeHeapRt.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
            codeHeapLf.GetFromHeap(codeLfIndex.getPointer(), "str1 char");
            codeHeapRt.GetFromHeap(codeRtIndex.getPointer(), "str2 char");
            codeWhile.append(codeHeapLf);
            codeWhile.append(codeHeapRt);
            codeWhile.appendJNE(codeHeapLf.getPointer(), codeHeapRt.getPointer(), nonEq, "diferente char, salto a false");
            codeWhile.appendLine(`${codeLfIndex.getPointer()} = ${codeLfIndex.getPointer()} + 1;`, "aumenta indice str1");
            codeWhile.appendLine(`${codeRtIndex.getPointer()} = ${codeRtIndex.getPointer()} + 1;`, "aumenta indice str2");
            codeWhile.appendSuma(codeWhile.getPointer(), "1", "aumento indice control");
            codeWhile.appendJL(codeWhile.getPointer(), codeStrLf.getPointer(), whileStart);
            codeWhile.appendJMP(lbl, "todo bien salto a true");
            codeAns.append(codeWhile);
            codeAns.appendLabel(nonEq);
            codeAns.appendValueToPointer("0");
            codeAns.appendLabel(lbl);
        }
        else {
            codeAns.appendJE(codeLf.getPointer(), codeRt.getPointer(), lbl);
            codeAns.appendValueToPointer("0");
            codeAns.appendLabel(lbl);
        }
        //TODO tmpmanager ??
        return codeAns;
    }
    GO(env) {
        return Object(_utils_RelationalOperationsFunctions__WEBPACK_IMPORTED_MODULE_1__["Igual"])(this.lf.Exe(env), this.rt.Exe(env), this.position);
    }
    GetGraph(env) {
        return new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__["GraphvizNode"]('EQ', [this.lf.GetGraph(env), this.rt.GetGraph(env)]);
    }
    GetTSGraph() {
        return "";
    }
}


/***/ }),

/***/ "./src/nodes/ExpNode.ts":
/*!******************************!*\
  !*** ./src/nodes/ExpNode.ts ***!
  \******************************/
/*! exports provided: ExpNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExpNode", function() { return ExpNode; });
/* harmony import */ var _utils_Op__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Op */ "./src/utils/Op.ts");
/* harmony import */ var _utils_AlgebraicOperationsFunctions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/AlgebraicOperationsFunctions */ "./src/utils/AlgebraicOperationsFunctions.ts");
/* harmony import */ var _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/C3D/Code */ "./src/utils/C3D/Code.ts");
/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
/* harmony import */ var _utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/C3D/Tmp */ "./src/utils/C3D/Tmp.ts");
/* harmony import */ var _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/C3D/Lbl */ "./src/utils/C3D/Lbl.ts");







class ExpNode extends _utils_Op__WEBPACK_IMPORTED_MODULE_0__["Op"] {
    constructor(position, lf, rt) {
        super(position);
        this.lf = lf;
        this.rt = rt;
    }
    GOCode(env) {
        const codeLf = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_4__["GetReferenceValueCode"])(this.lf.ExeCode(env));
        const codeRt = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_4__["GetReferenceValueCode"])(this.rt.ExeCode(env));
        const codeAns = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"](codeLf, codeRt);
        codeAns.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
        const codeControlPot = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"]();
        codeControlPot.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
        codeControlPot.appendValueToPointer(codeRt.getPointer(), "temporal para control del ciclo de potencia");
        codeAns.append(codeControlPot);
        const lbl = _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_6__["Lbl"].newLbl();
        const lblEnd = _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_6__["Lbl"].newLbl();
        codeAns.appendValueToPointer(1);
        codeAns.appendJE(codeControlPot.getPointer(), "0", lblEnd);
        codeAns.appendLabel(lbl, "ciclo para realizar potencia");
        codeAns.appendMulti(codeAns.getPointer(), codeLf.getPointer());
        const codeControlRef = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"]();
        codeControlRef.setPointer(codeControlPot.getPointer());
        codeControlRef.appendResta(codeControlRef.getPointer(), "1");
        codeAns.append(codeControlRef);
        codeAns.appendJG(codeControlPot.getPointer(), "0", lbl, "retorna a ciclo para poetencia");
        codeAns.appendLabel(lblEnd);
        codeAns.setValue(Object(_utils_AlgebraicOperationsFunctions__WEBPACK_IMPORTED_MODULE_1__["Potencia"])(codeLf.getValue(), codeRt.getValue()));
        return codeAns;
    }
    GO(env) {
        return Object(_utils_AlgebraicOperationsFunctions__WEBPACK_IMPORTED_MODULE_1__["Potencia"])(this.lf.Exe(env), this.rt.Exe(env), this.position);
    }
    GetGraph(env) {
        return new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__["GraphvizNode"]('EXP', [this.lf.GetGraph(env), this.rt.GetGraph(env)]);
    }
    GetTSGraph() {
        return "";
    }
}


/***/ }),

/***/ "./src/nodes/ForInNode.ts":
/*!********************************!*\
  !*** ./src/nodes/ForInNode.ts ***!
  \********************************/
/*! exports provided: ForInNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ForInNode", function() { return ForInNode; });
/* harmony import */ var _utils_Op__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Op */ "./src/utils/Op.ts");
/* harmony import */ var _utils_Envmnt__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Envmnt */ "./src/utils/Envmnt.ts");
/* harmony import */ var _utils_Reference__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/Reference */ "./src/utils/Reference.ts");
/* harmony import */ var _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/PrimitiveTypoContainer */ "./src/utils/PrimitiveTypoContainer.ts");
/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
/* harmony import */ var _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _utils_TSGraphControl__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/TSGraphControl */ "./src/utils/TSGraphControl.ts");
/* harmony import */ var _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/C3D/Code */ "./src/utils/C3D/Code.ts");
/* harmony import */ var _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/C3D/Lbl */ "./src/utils/C3D/Lbl.ts");
/* harmony import */ var _utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/C3D/Tmp */ "./src/utils/C3D/Tmp.ts");










class ForInNode extends _utils_Op__WEBPACK_IMPORTED_MODULE_0__["Op"] {
    constructor(position, controlVar, newControlVar, array, sentences) {
        super(position);
        this.controlVar = controlVar;
        this.newControlVar = newControlVar;
        this.array = array;
        this.sentences = sentences;
    }
    GOCode(env) {
        const codeAns = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_7__["Code"]();
        codeAns.appendSplitComment("START FOR OF");
        let arrayCode = this.array.ExeCode(env);
        arrayCode = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_4__["GetReferenceValueCode"])(arrayCode);
        const val = arrayCode.getValue();
        if (!(val instanceof _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_3__["ARRAY"])) {
            throw new _utils_Utils__WEBPACK_IMPORTED_MODULE_4__["SemanticException"]("Se esperaba una referncia a un arreglo en ciclo For Of", this.position);
        }
        const t = val.getValueList()[0];
        let valType = t ? t.getValue().typo : undefined;
        valType = valType ? valType : val.getContentType();
        let startLbl = _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_8__["Lbl"].newLbl();
        let endLbl = _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_8__["Lbl"].newLbl();
        const env0 = new _utils_Envmnt__WEBPACK_IMPORTED_MODULE_1__["Envmnt"](env, this.sentences, startLbl, endLbl);
        if (this.newControlVar) {
            env0.AddProperty(this.controlVar, new _utils_Reference__WEBPACK_IMPORTED_MODULE_2__["Reference"]("NUMBER", false, true));
        }
        codeAns.appendSplitComment("array type: " + valType);
        codeAns.append(arrayCode);
        let controlTmp = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_7__["Code"]();
        controlTmp.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_9__["Tmp"].newTmp());
        controlTmp.appendValueToPointer(0, "puntero de ciclo");
        codeAns.append(controlTmp);
        const controlVarCode = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_7__["Code"]();
        controlVarCode.appendSplitComment(`start obtiene variable: ${this.controlVar}`);
        controlVarCode.setValue(Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_4__["FindVar"])(env0, this.controlVar));
        controlVarCode.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_9__["Tmp"].newTmp());
        controlVarCode.appendStackPointerPlusValue(env0.GetPropertyIndex(this.controlVar), "obtiene " + this.controlVar);
        controlVarCode.appendSplitComment(`end obtiene variable: ${this.controlVar}`);
        codeAns.append(controlVarCode);
        codeAns.appendLabel(startLbl);
        codeAns.appendJGE(controlTmp.getPointer(), val.getValueList().length + "", endLbl, "condicion tamañ de arreglo");
        codeAns.appendAsignToStackPosition(controlVarCode.getPointer(), controlTmp.getPointer(), "asigna indice a variable de control");
        codeAns.append(env0.GO_ALL_CODE());
        codeAns.appendLine(`${controlTmp.getPointer()} = ${controlTmp.getPointer()} + 1;`, "aumenta variable de control");
        codeAns.appendJMP(startLbl, "retorna a inicio");
        codeAns.appendLabel(endLbl);
        codeAns.appendSplitComment("END FOR OF");
        return codeAns;
    }
    GO(env) {
        let array = this.array.Exe(env);
        if (array instanceof _utils_Reference__WEBPACK_IMPORTED_MODULE_2__["Reference"]) {
            array = array.getValue();
        }
        if (!(array instanceof _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_3__["ARRAY"])) {
            throw new _utils_Utils__WEBPACK_IMPORTED_MODULE_4__["SemanticException"]("Se esperaba una referencia a un arreglo en ciclo For In", this.position);
        }
        const env0 = new _utils_Envmnt__WEBPACK_IMPORTED_MODULE_1__["Envmnt"](env, this.sentences);
        if (this.newControlVar) {
            env0.AddProperty(this.controlVar, new _utils_Reference__WEBPACK_IMPORTED_MODULE_2__["Reference"]());
        }
        for (let index in array.getValueList()) {
            Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_4__["FindVar"])(env0, this.controlVar).setValue(new _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_3__["STRING"](index));
            env0.GO_ALL();
        }
        return undefined;
    }
    GetGraph(env) {
        return new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_5__["GraphvizNode"]('FOR_IN', [new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_5__["GraphvizNode"](this.controlVar), new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_5__["GraphvizNode"]('FOR_IN_BODY', this.sentences.map(sentence => sentence.GetGraph(env)))]);
    }
    GetTSGraph() {
        let value = '';
        const graphId = _utils_TSGraphControl__WEBPACK_IMPORTED_MODULE_6__["TSGraphControl"].GetGraphId();
        value += `subgraph cluster_${graphId} { \n`;
        value += 'style=filled;\n' +
            'color="#2BBBAD";\n' +
            'fillcolor="#1E222A";\n';
        value += 'node [color="#2BBBAD" fontcolor="#2BBBAD" shape="rectangle"] \n';
        value += `n${_utils_TSGraphControl__WEBPACK_IMPORTED_MODULE_6__["TSGraphControl"].GetNodeId()} [label="${this.controlVar}"]\n`;
        value += this.array.GetTSGraph();
        this.sentences.forEach(sentence => {
            value += sentence.GetTSGraph();
        });
        value += `label = "${"FOR_IN_SENTENCE"}";\n`;
        value += `}\n`;
        return value;
    }
}


/***/ }),

/***/ "./src/nodes/ForNode.ts":
/*!******************************!*\
  !*** ./src/nodes/ForNode.ts ***!
  \******************************/
/*! exports provided: ForNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ForNode", function() { return ForNode; });
/* harmony import */ var _utils_Op__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Op */ "./src/utils/Op.ts");
/* harmony import */ var _utils_Envmnt__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Envmnt */ "./src/utils/Envmnt.ts");
/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
/* harmony import */ var _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _utils_TSGraphControl__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/TSGraphControl */ "./src/utils/TSGraphControl.ts");
/* harmony import */ var _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/C3D/Code */ "./src/utils/C3D/Code.ts");
/* harmony import */ var _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/PrimitiveTypoContainer */ "./src/utils/PrimitiveTypoContainer.ts");
/* harmony import */ var _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/C3D/Lbl */ "./src/utils/C3D/Lbl.ts");








class ForNode extends _utils_Op__WEBPACK_IMPORTED_MODULE_0__["Op"] {
    constructor(position, condition0, condition1, condition2, sentences) {
        super(position);
        this.condition0 = condition0;
        this.condition1 = condition1;
        this.condition2 = condition2;
        this.sentences = sentences;
    }
    GOCode(env) {
        const dec = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_2__["GetReferenceValueCode"])(this.condition0.ExeCode(env));
        const cond = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_2__["GetReferenceValueCode"])(this.condition1.ExeCode(env));
        if (!(cond.getValue() instanceof _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_6__["BOOLEAN"]))
            throw new _utils_Utils__WEBPACK_IMPORTED_MODULE_2__["SemanticException"]("condicion utilizada como parametro no soportada por sentencia while");
        const startLbl = _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_7__["Lbl"].newLbl(); //while start lbl
        const endLbl = _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_7__["Lbl"].newLbl(); // while end lbl
        const codeWhile = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_5__["Code"]();
        codeWhile.append(dec);
        codeWhile.appendSplitComment("FOR START");
        codeWhile.appendLabel(startLbl);
        codeWhile.append(cond);
        codeWhile.appendJE(cond.getPointer(), "0", endLbl);
        const envWhile = new _utils_Envmnt__WEBPACK_IMPORTED_MODULE_1__["Envmnt"](env, this.sentences.concat(this.condition2), startLbl, endLbl);
        //Utils.PassPropsAndFuncs(env, envWhile);
        const whileCode = envWhile.GO_ALL_CODE();
        codeWhile.append(whileCode);
        codeWhile.appendJMP(startLbl);
        codeWhile.appendLabel(endLbl);
        codeWhile.appendSplitComment("FOR END");
        return codeWhile;
    }
    GO(env) {
        const conditionEnv = new _utils_Envmnt__WEBPACK_IMPORTED_MODULE_1__["Envmnt"](env, [this.condition0]);
        conditionEnv.GO_ALL();
        Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_2__["LogicWhile"])(conditionEnv, this.condition1, this.sentences, this.condition2);
        return undefined;
    }
    GetGraph(env) {
        return new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_3__["GraphvizNode"]('FOR', [
            this.condition0.GetGraph(env),
            this.condition1.GetGraph(env),
            this.condition2.GetGraph(env),
            new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_3__["GraphvizNode"]('FOR_BODY', this.sentences.map(sentence => sentence.GetGraph(env)))
        ]);
    }
    GetTSGraph() {
        let value = '';
        const graphId = _utils_TSGraphControl__WEBPACK_IMPORTED_MODULE_4__["TSGraphControl"].GetGraphId();
        value += `subgraph cluster_${graphId} { \n`;
        value += 'style=filled;\n' +
            'color="#2BBBAD";\n' +
            'fillcolor="#1E222A";\n';
        value += 'node [color="#2BBBAD" fontcolor="#2BBBAD" shape="rectangle"] \n';
        value += this.condition0.GetTSGraph();
        value += this.condition1.GetTSGraph();
        value += this.condition2.GetTSGraph();
        this.sentences.forEach(sentence => {
            value += sentence.GetTSGraph();
        });
        value += `label = "${"FOR_SENTENCE"}";\n`;
        value += `}\n`;
        return value;
    }
}


/***/ }),

/***/ "./src/nodes/ForOfNode.ts":
/*!********************************!*\
  !*** ./src/nodes/ForOfNode.ts ***!
  \********************************/
/*! exports provided: ForOfNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ForOfNode", function() { return ForOfNode; });
/* harmony import */ var _utils_Op__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Op */ "./src/utils/Op.ts");
/* harmony import */ var _utils_Envmnt__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Envmnt */ "./src/utils/Envmnt.ts");
/* harmony import */ var _utils_Reference__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/Reference */ "./src/utils/Reference.ts");
/* harmony import */ var _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/PrimitiveTypoContainer */ "./src/utils/PrimitiveTypoContainer.ts");
/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
/* harmony import */ var _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _utils_TSGraphControl__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/TSGraphControl */ "./src/utils/TSGraphControl.ts");
/* harmony import */ var _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/C3D/Code */ "./src/utils/C3D/Code.ts");
/* harmony import */ var _utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/C3D/Tmp */ "./src/utils/C3D/Tmp.ts");
/* harmony import */ var _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/C3D/Lbl */ "./src/utils/C3D/Lbl.ts");










class ForOfNode extends _utils_Op__WEBPACK_IMPORTED_MODULE_0__["Op"] {
    constructor(position, controlVar, newControlVar, array, sentences) {
        super(position);
        this.controlVar = controlVar;
        this.newControlVar = newControlVar;
        this.array = array;
        this.sentences = sentences;
    }
    GOCode(env) {
        const codeAns = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_7__["Code"]();
        codeAns.appendSplitComment("START FOR OF");
        let arrayCode = this.array.ExeCode(env);
        arrayCode = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_4__["GetReferenceValueCode"])(arrayCode);
        const val = arrayCode.getValue();
        if (!(val instanceof _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_3__["ARRAY"])) {
            throw new _utils_Utils__WEBPACK_IMPORTED_MODULE_4__["SemanticException"]("Se esperaba una referncia a un arreglo en ciclo For Of", this.position);
        }
        const t = val.getValueList()[0];
        let valType = t ? t.getValue().typo : undefined;
        valType = valType ? valType : val.getContentType();
        let startLbl = _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_9__["Lbl"].newLbl();
        let endLbl = _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_9__["Lbl"].newLbl();
        const env0 = new _utils_Envmnt__WEBPACK_IMPORTED_MODULE_1__["Envmnt"](env, this.sentences, startLbl, endLbl);
        if (this.newControlVar) {
            // env0.AddProperty(this.controlVar, new Reference(valType, false, true));
            env0.AddProperty(this.controlVar, t ? t : new _utils_Reference__WEBPACK_IMPORTED_MODULE_2__["Reference"](valType, false, true));
        }
        codeAns.appendSplitComment("array type: " + valType);
        codeAns.append(arrayCode);
        let controlTmp = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_7__["Code"]();
        controlTmp.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_8__["Tmp"].newTmp());
        controlTmp.appendValueToPointer(0, "puntero de ciclo");
        let asigCode = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_7__["Code"]();
        asigCode.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_8__["Tmp"].newTmp());
        asigCode.appendValueToPointer(arrayCode.getPointer());
        codeAns.append(asigCode);
        codeAns.append(controlTmp);
        const controlVarCode = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_7__["Code"]();
        controlVarCode.appendSplitComment(`start obtiene variable: ${this.controlVar}`);
        controlVarCode.setValue(Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_4__["FindVar"])(env0, this.controlVar));
        controlVarCode.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_8__["Tmp"].newTmp());
        controlVarCode.appendStackPointerPlusValue(env0.GetPropertyIndex(this.controlVar), "obtiene " + this.controlVar);
        controlVarCode.appendSplitComment(`end obtiene variable: ${this.controlVar}`);
        codeAns.append(controlVarCode);
        codeAns.appendLabel(startLbl);
        codeAns.appendJGE(controlTmp.getPointer(), val.getValueList().length + "", endLbl, "condicion tamañ de arreglo");
        let codeTmp = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_7__["Code"]();
        codeTmp.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_8__["Tmp"].newTmp());
        codeTmp.GetFromHeap(asigCode.getPointer(), "array val");
        codeAns.append(codeTmp);
        codeAns.appendAsignToStackPosition(controlVarCode.getPointer(), codeTmp.getPointer(), "asigna a variable de control");
        codeAns.append(env0.GO_ALL_CODE());
        codeAns.appendLine(`${controlTmp.getPointer()} = ${controlTmp.getPointer()} + 1;`, "aumenta variable de control");
        codeAns.appendLine(`${asigCode.getPointer()} = ${asigCode.getPointer()} + 1;`, "aumenta puntero a array");
        codeAns.appendJMP(startLbl, "retorna a inicio");
        codeAns.appendLabel(endLbl);
        codeAns.appendSplitComment("END FOR OF");
        return codeAns;
    }
    GO(env) {
        let array = this.array.Exe(env);
        if (array instanceof _utils_Reference__WEBPACK_IMPORTED_MODULE_2__["Reference"]) {
            array = array.getValue();
        }
        if (!(array instanceof _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_3__["ARRAY"])) {
            throw new _utils_Utils__WEBPACK_IMPORTED_MODULE_4__["SemanticException"]("Se esperaba una referncia a un arreglo en ciclo For Of", this.position);
        }
        const env0 = new _utils_Envmnt__WEBPACK_IMPORTED_MODULE_1__["Envmnt"](env, this.sentences);
        if (this.newControlVar) {
            env0.AddProperty(this.controlVar, new _utils_Reference__WEBPACK_IMPORTED_MODULE_2__["Reference"]());
        }
        for (let element of array.getValueList()) {
            let val = element;
            if (val instanceof _utils_Reference__WEBPACK_IMPORTED_MODULE_2__["Reference"]) {
                val = val.getValue();
            }
            Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_4__["FindVar"])(env0, this.controlVar).setValue(val);
            env0.GO_ALL();
        }
        return undefined;
    }
    GetGraph(env) {
        return new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_5__["GraphvizNode"]('FOR_OF', [new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_5__["GraphvizNode"](this.controlVar), new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_5__["GraphvizNode"]('FOR_OF_BODY', this.sentences.map(sentence => sentence.GetGraph(env)))]);
    }
    GetTSGraph() {
        let value = '';
        const graphId = _utils_TSGraphControl__WEBPACK_IMPORTED_MODULE_6__["TSGraphControl"].GetGraphId();
        value += `subgraph cluster_${graphId} { \n`;
        value += 'style=filled;\n' +
            'color="#2BBBAD";\n' +
            'fillcolor="#1E222A";\n';
        value += 'node [color="#2BBBAD" fontcolor="#2BBBAD" shape="rectangle"] \n';
        value += `n${_utils_TSGraphControl__WEBPACK_IMPORTED_MODULE_6__["TSGraphControl"].GetNodeId()} [label="${this.controlVar}"]\n`;
        value += this.array.GetTSGraph();
        this.sentences.forEach(sentence => {
            value += sentence.GetTSGraph();
        });
        value += `label = "${"FOR_OF_SENTENCE"}";\n`;
        value += `}\n`;
        return value;
    }
}


/***/ }),

/***/ "./src/nodes/FunctionCallNode.ts":
/*!***************************************!*\
  !*** ./src/nodes/FunctionCallNode.ts ***!
  \***************************************/
/*! exports provided: FunctionCallNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FunctionCallNode", function() { return FunctionCallNode; });
/* harmony import */ var _utils_Op__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Op */ "./src/utils/Op.ts");
/* harmony import */ var _utils_Reference__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Reference */ "./src/utils/Reference.ts");
/* harmony import */ var _utils_functions_FunctionRepresent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/functions/FunctionRepresent */ "./src/utils/functions/FunctionRepresent.ts");
/* harmony import */ var _ReturnObj__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ReturnObj */ "./src/nodes/ReturnObj.ts");
/* harmony import */ var _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/PrimitiveTypoContainer */ "./src/utils/PrimitiveTypoContainer.ts");
/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
/* harmony import */ var _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/C3D/Code */ "./src/utils/C3D/Code.ts");
/* harmony import */ var _utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/C3D/Tmp */ "./src/utils/C3D/Tmp.ts");









class FunctionCallNode extends _utils_Op__WEBPACK_IMPORTED_MODULE_0__["Op"] {
    constructor(position, name, args) {
        super(position);
        this.name = name;
        this.args = args;
    }
    GOCode(env) {
        const codeAns = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_7__["Code"]();
        let id = this.name.Exe(env);
        if (id instanceof _utils_Reference__WEBPACK_IMPORTED_MODULE_1__["Reference"]) {
            id = id.getValue();
        }
        if (id instanceof _utils_functions_FunctionRepresent__WEBPACK_IMPORTED_MODULE_2__["FunctionRepresent"]) {
            let funct = id;
            let functName = this.name.GetId();
            let positions = env.GetEnvmtOfset();
            const val = new _utils_Reference__WEBPACK_IMPORTED_MODULE_1__["Reference"](funct.type, false, true);
            codeAns.setValue(val);
            codeAns.appendSplitComment(`start call ${functName}`);
            codeAns.setPointer("P");
            const argsValues = new Array();
            let argsIndex = 1;
            for (let arg of this.args) {
                try {
                    let argValue = arg.ExeCode(env);
                    argValue = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_5__["GetReferenceValueCode"])(argValue);
                    codeAns.append(argValue);
                    argsValues.push(argValue);
                }
                catch (e) {
                    console.log(e);
                }
            }
            codeAns.appendSuma("P", positions + "");
            let TmpsForSave = _utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_8__["Tmp"].getTempsForSave();
            let codeForSave = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_7__["Code"]();
            codeForSave.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_8__["Tmp"].newTmp());
            codeForSave.appendValueToPointer("P");
            let index = 0;
            for (let tmpForSave of TmpsForSave) {
                codeForSave.appendSuma(codeForSave.getPointer(), index + "", `guardando ${tmpForSave}`);
                codeForSave.appendAsignToStackPosition(codeForSave.getPointer(), tmpForSave);
                index++;
            }
            codeAns.append(codeForSave);
            codeAns.appendSuma("P", TmpsForSave.length + "");
            let codeArgs = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_7__["Code"]();
            codeArgs.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_8__["Tmp"].newTmp());
            codeArgs.appendValueToPointer("P", "control de argumentos");
            argsIndex = 1;
            for (let arg of this.args) {
                let argValue = argsValues[argsIndex - 1];
                codeArgs.appendSuma(codeArgs.getPointer(), "1", `argumento ${argsIndex}`);
                codeArgs.appendAsignToStackPosition(codeArgs.getPointer(), argValue.getPointer());
                argsIndex++;
            }
            codeAns.append(codeArgs);
            codeAns.appendMethodCall(functName, "llamada a funcion");
            const codeRet = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_7__["Code"]();
            codeRet.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_8__["Tmp"].newTmp());
            codeRet.appendValueToPointer("P", "valor de retorno");
            codeAns.append(codeRet);
            codeAns.setPointer("P");
            codeAns.appendResta("P", TmpsForSave.length + "");
            codeForSave = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_7__["Code"]();
            codeForSave.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_8__["Tmp"].newTmp());
            codeForSave.appendValueToPointer("P");
            index = 0;
            for (let tmpForSave of TmpsForSave) {
                codeForSave.appendSuma(codeForSave.getPointer(), index + "", `recuperando ${tmpForSave}`);
                codeForSave.appendLine(`${tmpForSave} = STACK[(int)${codeForSave.getPointer()}];`);
                index++;
            }
            codeAns.append(codeForSave);
            codeAns.appendResta("P", positions + "");
            codeAns.setPointer(codeRet.getPointer());
            codeAns.appendSplitComment(`end call ${functName}`);
            codeAns.appendSplitComment("retorno " + funct.type);
        }
        return codeAns;
    }
    GO(env) {
        let id = this.name.Exe(env);
        if (id instanceof _utils_Reference__WEBPACK_IMPORTED_MODULE_1__["Reference"]) {
            id = id.getValue();
        }
        const argsValues = new Array();
        for (let arg of this.args) {
            let ans = arg.Exe(env);
            if (ans instanceof _utils_Reference__WEBPACK_IMPORTED_MODULE_1__["Reference"]) {
                ans = ans.getValue();
            }
            argsValues.push(ans);
        }
        if (id instanceof _utils_functions_FunctionRepresent__WEBPACK_IMPORTED_MODULE_2__["FunctionRepresent"]) {
            let funct = id;
            let ans = funct.EXE(env, argsValues);
            if (ans instanceof _ReturnObj__WEBPACK_IMPORTED_MODULE_3__["ReturnObj"]) {
                let ret = ans.getValue();
                if (ret instanceof _utils_Reference__WEBPACK_IMPORTED_MODULE_1__["Reference"]) {
                    ret = ret.getValue();
                }
                if (funct.getType() !== ret.typo
                    && funct.getType() !== 'ANY'
                    && ret.typo !== 'NULL'
                    && ret.typo !== 'UNDEFINED'
                    && ret.typo !== 'OBJECT'
                    || (Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_5__["IsPrimitiveTypo"])(funct.getType()) && ret.typo === 'OBJECT')) {
                    throw new _utils_Utils__WEBPACK_IMPORTED_MODULE_5__["SemanticException"](`Se esperaba retorno de tipo ${funct.getType()}, se retorno tipo ${ret.typo}`, this.position);
                }
                return ans.getValue();
            }
        }
        return new _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_4__["UNDEFINED"]();
    }
    GetGraph(env) {
        return new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_6__["GraphvizNode"]('FUNCTION_CALL', [this.name.GetGraph(env), new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_6__["GraphvizNode"]('ARGS', this.args.map(arg => arg.GetGraph(env)))]);
    }
    GetTSGraph() {
        return "";
    }
}


/***/ }),

/***/ "./src/nodes/HigherEqNode.ts":
/*!***********************************!*\
  !*** ./src/nodes/HigherEqNode.ts ***!
  \***********************************/
/*! exports provided: HigherEqNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HigherEqNode", function() { return HigherEqNode; });
/* harmony import */ var _utils_Op__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Op */ "./src/utils/Op.ts");
/* harmony import */ var _utils_RelationalOperationsFunctions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/RelationalOperationsFunctions */ "./src/utils/RelationalOperationsFunctions.ts");
/* harmony import */ var _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/C3D/Code */ "./src/utils/C3D/Code.ts");
/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
/* harmony import */ var _utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/C3D/Tmp */ "./src/utils/C3D/Tmp.ts");
/* harmony import */ var _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/C3D/Lbl */ "./src/utils/C3D/Lbl.ts");







class HigherEqNode extends _utils_Op__WEBPACK_IMPORTED_MODULE_0__["Op"] {
    constructor(position, lf, rt) {
        super(position);
        this.lf = lf;
        this.rt = rt;
    }
    GOCode(env) {
        const codeLf = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_4__["GetReferenceValueCode"])(this.lf.ExeCode(env));
        const codeRt = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_4__["GetReferenceValueCode"])(this.rt.ExeCode(env));
        const codeAns = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"](codeLf, codeRt);
        codeAns.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
        codeAns.appendValueToPointer("1");
        const lbl = _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_6__["Lbl"].newLbl();
        codeAns.appendJGE(codeLf.getPointer(), codeRt.getPointer(), lbl);
        codeAns.appendValueToPointer("0");
        codeAns.appendLabel(lbl);
        codeAns.setValue(Object(_utils_RelationalOperationsFunctions__WEBPACK_IMPORTED_MODULE_1__["MayorEq"])(codeLf.getValue(), codeRt.getValue()));
        //TODO tmpmanager ??
        return codeAns;
    }
    GO(env) {
        return Object(_utils_RelationalOperationsFunctions__WEBPACK_IMPORTED_MODULE_1__["MayorEq"])(this.lf.Exe(env), this.rt.Exe(env), this.position);
    }
    GetGraph(env) {
        return new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__["GraphvizNode"]('MAY_EQ', [this.lf.GetGraph(env), this.rt.GetGraph(env)]);
    }
    GetTSGraph() {
        return "";
    }
}


/***/ }),

/***/ "./src/nodes/HigherNode.ts":
/*!*********************************!*\
  !*** ./src/nodes/HigherNode.ts ***!
  \*********************************/
/*! exports provided: HigherNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HigherNode", function() { return HigherNode; });
/* harmony import */ var _utils_Op__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Op */ "./src/utils/Op.ts");
/* harmony import */ var _utils_RelationalOperationsFunctions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/RelationalOperationsFunctions */ "./src/utils/RelationalOperationsFunctions.ts");
/* harmony import */ var _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/C3D/Code */ "./src/utils/C3D/Code.ts");
/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
/* harmony import */ var _utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/C3D/Tmp */ "./src/utils/C3D/Tmp.ts");
/* harmony import */ var _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/C3D/Lbl */ "./src/utils/C3D/Lbl.ts");







class HigherNode extends _utils_Op__WEBPACK_IMPORTED_MODULE_0__["Op"] {
    constructor(position, lf, rt) {
        super(position);
        this.lf = lf;
        this.rt = rt;
    }
    GOCode(env) {
        const codeLf = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_4__["GetReferenceValueCode"])(this.lf.ExeCode(env));
        const codeRt = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_4__["GetReferenceValueCode"])(this.rt.ExeCode(env));
        const codeAns = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"](codeLf, codeRt);
        codeAns.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
        codeAns.appendValueToPointer("1");
        const lbl = _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_6__["Lbl"].newLbl();
        codeAns.appendJG(codeLf.getPointer(), codeRt.getPointer(), lbl);
        codeAns.appendValueToPointer("0");
        codeAns.appendLabel(lbl);
        codeAns.setValue(Object(_utils_RelationalOperationsFunctions__WEBPACK_IMPORTED_MODULE_1__["Mayor"])(codeLf.getValue(), codeRt.getValue()));
        //TODO tmpmanager ??
        return codeAns;
    }
    GO(env) {
        return Object(_utils_RelationalOperationsFunctions__WEBPACK_IMPORTED_MODULE_1__["Mayor"])(this.lf.Exe(env), this.rt.Exe(env), this.position);
    }
    GetGraph(env) {
        return new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__["GraphvizNode"]('MAY', [this.lf.GetGraph(env), this.rt.GetGraph(env)]);
    }
    GetTSGraph() {
        return "";
    }
}


/***/ }),

/***/ "./src/nodes/IfNode.ts":
/*!*****************************!*\
  !*** ./src/nodes/IfNode.ts ***!
  \*****************************/
/*! exports provided: IfNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IfNode", function() { return IfNode; });
/* harmony import */ var _utils_Op__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Op */ "./src/utils/Op.ts");
/* harmony import */ var _utils_Envmnt__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Envmnt */ "./src/utils/Envmnt.ts");
/* harmony import */ var _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/PrimitiveTypoContainer */ "./src/utils/PrimitiveTypoContainer.ts");
/* harmony import */ var _utils_Reference__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/Reference */ "./src/utils/Reference.ts");
/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
/* harmony import */ var _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _utils_TSGraphControl__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/TSGraphControl */ "./src/utils/TSGraphControl.ts");
/* harmony import */ var _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/C3D/Code */ "./src/utils/C3D/Code.ts");
/* harmony import */ var _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/C3D/Lbl */ "./src/utils/C3D/Lbl.ts");









class IfNode extends _utils_Op__WEBPACK_IMPORTED_MODULE_0__["Op"] {
    constructor(position, condition, operationsTrue, operationsFalse) {
        super(position);
        this.condition = condition;
        this.operationsTrue = operationsTrue;
        this.operationsFalse = operationsFalse;
    }
    GOCode(env) {
        const cond = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_4__["GetReferenceValueCode"])(this.condition.ExeCode(env));
        if (!(cond.getValue() instanceof _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"]))
            throw new _utils_Utils__WEBPACK_IMPORTED_MODULE_4__["SemanticException"]("condicion utilizada como parametro no soportada por sentencia if");
        const codeIf = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_7__["Code"](cond);
        const lblStart = _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_8__["Lbl"].newLbl();
        const lblEnd = _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_8__["Lbl"].newLbl();
        const lblFalse = _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_8__["Lbl"].newLbl();
        codeIf.appendJE(cond.getPointer(), "0", lblFalse, "IF START"); // if condition value == 0 then jmp to lblFalse
        //true Sentences
        const evTrue = new _utils_Envmnt__WEBPACK_IMPORTED_MODULE_1__["Envmnt"](env, this.operationsTrue);
        //Utils.PassPropsAndFuncs(env, evTrue);
        const codeTrue = evTrue.GO_ALL_CODE();
        codeIf.appendSplitComment("true statements");
        codeIf.append(codeTrue);
        codeIf.appendJMP(lblEnd);
        //false Sentences
        const evFalse = new _utils_Envmnt__WEBPACK_IMPORTED_MODULE_1__["Envmnt"](env, this.operationsFalse);
        //Utils.PassPropsAndFuncs(env, evFalse);
        const codeFalse = evFalse.GO_ALL_CODE();
        codeIf.appendSplitComment("false statements");
        codeIf.appendLabel(lblFalse);
        codeIf.append(codeFalse);
        codeIf.appendLabel(lblEnd, "IF END");
        //TODO validate return, continue, break
        //TmpManager.FilterLines(codeIf.getLines());
        return codeIf;
    }
    GO(env) {
        let condition = this.condition.Exe(env);
        if (condition instanceof _utils_Reference__WEBPACK_IMPORTED_MODULE_3__["Reference"]) {
            condition = condition.getValue();
        }
        if (!(condition instanceof _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"])) {
            throw new _utils_Utils__WEBPACK_IMPORTED_MODULE_4__["SemanticException"]("Condicion utilizada como parametro no soportada por sentencia If", this.position);
        }
        if (condition.getValue()) {
            const envTrue = new _utils_Envmnt__WEBPACK_IMPORTED_MODULE_1__["Envmnt"](env, this.operationsTrue);
            Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_4__["PassPropsAndFuncs"])(env, envTrue);
            return envTrue.GO_ALL();
        }
        const envFalse = new _utils_Envmnt__WEBPACK_IMPORTED_MODULE_1__["Envmnt"](env, this.operationsFalse);
        Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_4__["PassPropsAndFuncs"])(env, envFalse);
        return envFalse.GO_ALL();
    }
    GetGraph(env) {
        return new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_5__["GraphvizNode"]('IF', [
            this.condition.GetGraph(env),
            new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_5__["GraphvizNode"]('IF_BODY_TRUE', this.operationsTrue.map(sentence => sentence.GetGraph(env))),
            new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_5__["GraphvizNode"]('IF_BODY_FALSE', this.operationsFalse.map(sentence => sentence.GetGraph(env)))
        ]);
    }
    GetTSGraph() {
        let value = '';
        const graphId = _utils_TSGraphControl__WEBPACK_IMPORTED_MODULE_6__["TSGraphControl"].GetGraphId();
        value += `subgraph cluster_${graphId} { \n`;
        value += 'style=filled;\n' +
            'color="#2BBBAD";\n' +
            'fillcolor="#1E222A";\n';
        value += 'node [color="#2BBBAD" fontcolor="#2BBBAD" shape="rectangle"] \n';
        value += this.condition.GetTSGraph();
        value += `subgraph cluster_${_utils_TSGraphControl__WEBPACK_IMPORTED_MODULE_6__["TSGraphControl"].GetGraphId()} { \n`;
        value += 'style=filled;\n' +
            'color=black;\n' +
            'fillcolor="yellow";\n';
        value += 'node [fillcolor="yellow" shape="rectangle"] \n';
        this.operationsTrue.forEach(sentence => {
            value += sentence.GetTSGraph();
        });
        value += `label = "${"IF_SENTENCE_TRUE"}";\n`;
        value += `}\n`;
        value += `subgraph cluster_${_utils_TSGraphControl__WEBPACK_IMPORTED_MODULE_6__["TSGraphControl"].GetGraphId()} { \n`;
        value += 'style=filled;\n' +
            'color=black;\n' +
            'fillcolor="yellow";\n';
        value += 'node [fillcolor="yellow" shape="rectangle"] \n';
        this.operationsFalse.forEach(sentence => {
            value += sentence.GetTSGraph();
        });
        value += `label = "${"IF_SENTENCE_FALSE"}";\n`;
        value += `}\n`;
        value += `label = "${"IF_SENTENCE"}";\n`;
        value += `}\n`;
        return value;
    }
}


/***/ }),

/***/ "./src/nodes/MinorEqNode.ts":
/*!**********************************!*\
  !*** ./src/nodes/MinorEqNode.ts ***!
  \**********************************/
/*! exports provided: MinorEqNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MinorEqNode", function() { return MinorEqNode; });
/* harmony import */ var _utils_Op__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Op */ "./src/utils/Op.ts");
/* harmony import */ var _utils_RelationalOperationsFunctions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/RelationalOperationsFunctions */ "./src/utils/RelationalOperationsFunctions.ts");
/* harmony import */ var _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/C3D/Code */ "./src/utils/C3D/Code.ts");
/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
/* harmony import */ var _utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/C3D/Tmp */ "./src/utils/C3D/Tmp.ts");
/* harmony import */ var _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/C3D/Lbl */ "./src/utils/C3D/Lbl.ts");







class MinorEqNode extends _utils_Op__WEBPACK_IMPORTED_MODULE_0__["Op"] {
    constructor(position, lf, rt) {
        super(position);
        this.lf = lf;
        this.rt = rt;
    }
    GOCode(env) {
        const codeLf = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_4__["GetReferenceValueCode"])(this.lf.ExeCode(env));
        const codeRt = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_4__["GetReferenceValueCode"])(this.rt.ExeCode(env));
        const codeAns = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"](codeLf, codeRt);
        codeAns.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
        codeAns.appendValueToPointer("1");
        const lbl = _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_6__["Lbl"].newLbl();
        codeAns.appendJLE(codeLf.getPointer(), codeRt.getPointer(), lbl);
        codeAns.appendValueToPointer("0");
        codeAns.appendLabel(lbl);
        codeAns.setValue(Object(_utils_RelationalOperationsFunctions__WEBPACK_IMPORTED_MODULE_1__["MenorEq"])(codeLf.getValue(), codeRt.getValue()));
        //TODO tmpmanager ??
        return codeAns;
    }
    GO(env) {
        return Object(_utils_RelationalOperationsFunctions__WEBPACK_IMPORTED_MODULE_1__["MenorEq"])(this.lf.Exe(env), this.rt.Exe(env), this.position);
    }
    GetGraph(env) {
        return new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__["GraphvizNode"]('MIN_EQ', [this.lf.GetGraph(env), this.rt.GetGraph(env)]);
    }
    GetTSGraph() {
        return "";
    }
}


/***/ }),

/***/ "./src/nodes/MinorNode.ts":
/*!********************************!*\
  !*** ./src/nodes/MinorNode.ts ***!
  \********************************/
/*! exports provided: MinorNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MinorNode", function() { return MinorNode; });
/* harmony import */ var _utils_Op__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Op */ "./src/utils/Op.ts");
/* harmony import */ var _utils_RelationalOperationsFunctions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/RelationalOperationsFunctions */ "./src/utils/RelationalOperationsFunctions.ts");
/* harmony import */ var _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/C3D/Code */ "./src/utils/C3D/Code.ts");
/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
/* harmony import */ var _utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/C3D/Tmp */ "./src/utils/C3D/Tmp.ts");
/* harmony import */ var _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/C3D/Lbl */ "./src/utils/C3D/Lbl.ts");







class MinorNode extends _utils_Op__WEBPACK_IMPORTED_MODULE_0__["Op"] {
    constructor(position, lf, rt) {
        super(position);
        this.lf = lf;
        this.rt = rt;
    }
    GOCode(env) {
        const codeLf = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_4__["GetReferenceValueCode"])(this.lf.ExeCode(env));
        const codeRt = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_4__["GetReferenceValueCode"])(this.rt.ExeCode(env));
        const codeAns = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"](codeLf, codeRt);
        codeAns.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
        codeAns.appendValueToPointer("1");
        const lbl = _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_6__["Lbl"].newLbl();
        codeAns.appendJL(codeLf.getPointer(), codeRt.getPointer(), lbl);
        codeAns.appendValueToPointer("0");
        codeAns.appendLabel(lbl);
        codeAns.setValue(Object(_utils_RelationalOperationsFunctions__WEBPACK_IMPORTED_MODULE_1__["Menor"])(codeLf.getValue(), codeRt.getValue()));
        //TODO tmpmanager ??
        return codeAns;
    }
    GO(env) {
        return Object(_utils_RelationalOperationsFunctions__WEBPACK_IMPORTED_MODULE_1__["Menor"])(this.lf.Exe(env), this.rt.Exe(env), this.position);
    }
    GetGraph(env) {
        return new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__["GraphvizNode"]('MIN', [this.lf.GetGraph(env), this.rt.GetGraph(env)]);
    }
    GetTSGraph() {
        return "";
    }
}


/***/ }),

/***/ "./src/nodes/ModNode.ts":
/*!******************************!*\
  !*** ./src/nodes/ModNode.ts ***!
  \******************************/
/*! exports provided: ModNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModNode", function() { return ModNode; });
/* harmony import */ var _utils_Op__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Op */ "./src/utils/Op.ts");
/* harmony import */ var _utils_AlgebraicOperationsFunctions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/AlgebraicOperationsFunctions */ "./src/utils/AlgebraicOperationsFunctions.ts");
/* harmony import */ var _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/C3D/Code */ "./src/utils/C3D/Code.ts");
/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
/* harmony import */ var _utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/C3D/Tmp */ "./src/utils/C3D/Tmp.ts");






class ModNode extends _utils_Op__WEBPACK_IMPORTED_MODULE_0__["Op"] {
    constructor(position, lf, rt) {
        super(position);
        this.lf = lf;
        this.rt = rt;
    }
    GOCode(env) {
        const codeLf = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_4__["GetReferenceValueCode"])(this.lf.ExeCode(env));
        const codeRt = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_4__["GetReferenceValueCode"])(this.rt.ExeCode(env));
        const codeAns = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"](codeLf, codeRt);
        codeAns.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
        codeAns.appendMod(codeLf.getPointer(), codeRt.getPointer());
        codeAns.setValue(Object(_utils_AlgebraicOperationsFunctions__WEBPACK_IMPORTED_MODULE_1__["Modulo"])(codeLf.getValue(), codeRt.getValue()));
        //TODO tmpmanager ??
        return codeAns;
    }
    GO(env) {
        return Object(_utils_AlgebraicOperationsFunctions__WEBPACK_IMPORTED_MODULE_1__["Modulo"])(this.lf.Exe(env), this.rt.Exe(env), this.position);
    }
    GetGraph(env) {
        return new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__["GraphvizNode"]('MOD', [this.lf.GetGraph(env), this.rt.GetGraph(env)]);
    }
    GetTSGraph() {
        return "";
    }
}


/***/ }),

/***/ "./src/nodes/MulNode.ts":
/*!******************************!*\
  !*** ./src/nodes/MulNode.ts ***!
  \******************************/
/*! exports provided: MulNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MulNode", function() { return MulNode; });
/* harmony import */ var _utils_Op__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Op */ "./src/utils/Op.ts");
/* harmony import */ var _utils_AlgebraicOperationsFunctions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/AlgebraicOperationsFunctions */ "./src/utils/AlgebraicOperationsFunctions.ts");
/* harmony import */ var _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/C3D/Code */ "./src/utils/C3D/Code.ts");
/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
/* harmony import */ var _utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/C3D/Tmp */ "./src/utils/C3D/Tmp.ts");






class MulNode extends _utils_Op__WEBPACK_IMPORTED_MODULE_0__["Op"] {
    constructor(position, lf, rt) {
        super(position);
        this.lf = lf;
        this.rt = rt;
    }
    GOCode(env) {
        const codeLf = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_4__["GetReferenceValueCode"])(this.lf.ExeCode(env));
        const codeRt = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_4__["GetReferenceValueCode"])(this.rt.ExeCode(env));
        const codeAns = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"](codeLf, codeRt);
        codeAns.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
        codeAns.appendMulti(codeLf.getPointer(), codeRt.getPointer());
        codeAns.setValue(Object(_utils_AlgebraicOperationsFunctions__WEBPACK_IMPORTED_MODULE_1__["Multiplicacion"])(codeLf.getValue(), codeRt.getValue()));
        //TODO tmpmanager ??
        return codeAns;
    }
    GO(env) {
        return Object(_utils_AlgebraicOperationsFunctions__WEBPACK_IMPORTED_MODULE_1__["Multiplicacion"])(this.lf.Exe(env), this.rt.Exe(env), this.position);
    }
    GetGraph(env) {
        return new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__["GraphvizNode"]('MUL', [this.lf.GetGraph(env), this.rt.GetGraph(env)]);
    }
    GetTSGraph() {
        return "";
    }
}


/***/ }),

/***/ "./src/nodes/NewArrayNode.ts":
/*!***********************************!*\
  !*** ./src/nodes/NewArrayNode.ts ***!
  \***********************************/
/*! exports provided: NewArrayNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NewArrayNode", function() { return NewArrayNode; });
/* harmony import */ var _utils_Op__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Op */ "./src/utils/Op.ts");
/* harmony import */ var _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/C3D/Code */ "./src/utils/C3D/Code.ts");
/* harmony import */ var _utils_Reference__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/Reference */ "./src/utils/Reference.ts");
/* harmony import */ var _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/PrimitiveTypoContainer */ "./src/utils/PrimitiveTypoContainer.ts");
/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
/* harmony import */ var _utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/C3D/Tmp */ "./src/utils/C3D/Tmp.ts");







class NewArrayNode extends _utils_Op__WEBPACK_IMPORTED_MODULE_0__["Op"] {
    constructor(position, size) {
        super(position);
        this.size = size;
    }
    GO(env) {
        let sizeVal = this.size.Exe(env);
        if (sizeVal instanceof _utils_Reference__WEBPACK_IMPORTED_MODULE_3__["Reference"]) {
            sizeVal = sizeVal.getValue();
        }
        if (!(sizeVal instanceof _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_4__["NUMBER"])) {
            throw new _utils_Utils__WEBPACK_IMPORTED_MODULE_5__["SemanticException"]("Se esperaba un valor numerico como argumento");
        }
        let vals = new Array();
        for (let i = 0; i < sizeVal.getValue(); i++) {
            vals.push(new _utils_Reference__WEBPACK_IMPORTED_MODULE_3__["Reference"]());
        }
        return new _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_4__["ARRAY"](vals);
    }
    GOCode(env) {
        const codeAns = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_2__["Code"]();
        codeAns.appendSplitComment("satart Declaración de Arreglo");
        let size = this.size.ExeCode(env);
        size = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_5__["GetReferenceValueCode"])(size);
        let sizeVal = size.getValue();
        if (!(sizeVal instanceof _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_4__["NUMBER"])) {
            throw new _utils_Utils__WEBPACK_IMPORTED_MODULE_5__["SemanticException"]("Se esperaba un valor numerico como argumento");
        }
        codeAns.append(size);
        const codeHeap = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_2__["Code"]();
        codeHeap.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_6__["Tmp"].newTmp());
        codeHeap.appendValueToPointer("H");
        const codeValues = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_2__["Code"]();
        codeValues.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_6__["Tmp"].newTmp());
        codeValues.appendValueToPointer(codeHeap.getPointer());
        let real = new Array();
        for (let i = 0; i < sizeVal.getValue(); i++) {
            let reference = new _utils_Reference__WEBPACK_IMPORTED_MODULE_3__["Reference"]();
            real.push(reference);
            const codeVal = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_2__["Code"]();
            codeVal.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_6__["Tmp"].newTmp());
            codeVal.appendValueToPointer("-1");
            codeVal.setValue(new _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_4__["UNDEFINED"]());
            codeValues.append(codeVal);
            codeValues.appendAsignToHeapPosition(codeValues.getPointer(), codeVal.getPointer());
            codeValues.appendSuma(codeValues.getPointer(), "1", "next position");
        }
        let value = new _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_4__["ARRAY"](real);
        //TODO array memory size calculate and use
        let memorySize = value.GetLinearMemorySize();
        codeHeap.appendAddToHeapPointer(memorySize, "tamaño de arreglo");
        codeAns.append(codeHeap);
        codeAns.append(codeValues);
        codeAns.setValue(value);
        codeAns.appendSplitComment("end Declaración de Arreglo");
        codeAns.setPointer(codeHeap.getPointer());
        return codeAns;
    }
    GetGraph(env) {
        return new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_1__["GraphvizNode"]('NEW ARRAY', [this.size.GetGraph(env)]);
    }
    GetTSGraph() {
        return "";
    }
}


/***/ }),

/***/ "./src/nodes/NotNode.ts":
/*!******************************!*\
  !*** ./src/nodes/NotNode.ts ***!
  \******************************/
/*! exports provided: NotNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NotNode", function() { return NotNode; });
/* harmony import */ var _utils_Op__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Op */ "./src/utils/Op.ts");
/* harmony import */ var _utils_LogicalOperationsFunctions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/LogicalOperationsFunctions */ "./src/utils/LogicalOperationsFunctions.ts");
/* harmony import */ var _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/C3D/Code */ "./src/utils/C3D/Code.ts");
/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
/* harmony import */ var _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/C3D/Lbl */ "./src/utils/C3D/Lbl.ts");
/* harmony import */ var _utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/C3D/Tmp */ "./src/utils/C3D/Tmp.ts");







class NotNode extends _utils_Op__WEBPACK_IMPORTED_MODULE_0__["Op"] {
    constructor(position, lf, rt) {
        super(position);
        this.lf = lf;
    }
    GOCode(env) {
        const codeRt = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_4__["GetReferenceValueCode"])(this.lf.ExeCode(env));
        const lbl1 = _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_5__["Lbl"].newLbl();
        const codeAns = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"](codeRt);
        codeAns.appendSplitComment("not start");
        codeAns.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_6__["Tmp"].newTmp());
        codeAns.appendValueToPointer("0");
        codeAns.appendJE(codeRt.getPointer(), "1", lbl1);
        codeAns.appendValueToPointer("1");
        codeAns.appendLabel(lbl1);
        codeAns.appendSplitComment("not end");
        codeAns.setValue(Object(_utils_LogicalOperationsFunctions__WEBPACK_IMPORTED_MODULE_1__["Not"])(codeRt.getValue()));
        //TODO tmpmanager ??;
        return codeAns;
    }
    GO(env) {
        return Object(_utils_LogicalOperationsFunctions__WEBPACK_IMPORTED_MODULE_1__["Not"])(this.lf.Exe(env), this.position);
    }
    GetGraph(env) {
        return new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__["GraphvizNode"]('NOT', [this.lf.GetGraph(env)]);
    }
    GetTSGraph() {
        return "";
    }
}


/***/ }),

/***/ "./src/nodes/NullNode.ts":
/*!*******************************!*\
  !*** ./src/nodes/NullNode.ts ***!
  \*******************************/
/*! exports provided: NullNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NullNode", function() { return NullNode; });
/* harmony import */ var _utils_Op__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Op */ "./src/utils/Op.ts");
/* harmony import */ var _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/PrimitiveTypoContainer */ "./src/utils/PrimitiveTypoContainer.ts");
/* harmony import */ var _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/C3D/Code */ "./src/utils/C3D/Code.ts");




class NullNode extends _utils_Op__WEBPACK_IMPORTED_MODULE_0__["Op"] {
    constructor() {
        super();
    }
    GOCode(env) {
        const code = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"]();
        code.setValue(new _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_1__["NULL"]());
        code.setPointer(-1);
        //TODO tmpmanager ???
        return code;
    }
    GO(env) {
        return new _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_1__["NULL"]();
    }
    GetGraph(env) {
        return new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__["GraphvizNode"]('NULL', [new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__["GraphvizNode"]('null')]);
    }
    GetTSGraph() {
        return "";
    }
}


/***/ }),

/***/ "./src/nodes/NumberNode.ts":
/*!*********************************!*\
  !*** ./src/nodes/NumberNode.ts ***!
  \*********************************/
/*! exports provided: NumberNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NumberNode", function() { return NumberNode; });
/* harmony import */ var _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/PrimitiveTypoContainer */ "./src/utils/PrimitiveTypoContainer.ts");
/* harmony import */ var _utils_Op__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Op */ "./src/utils/Op.ts");
/* harmony import */ var _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/C3D/Code */ "./src/utils/C3D/Code.ts");




class NumberNode extends _utils_Op__WEBPACK_IMPORTED_MODULE_1__["Op"] {
    constructor(position, val) {
        super(position);
        this.val = val;
    }
    GOCode(env) {
        const code = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"]();
        code.setValue(new _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_0__["NUMBER"](this.val));
        code.setPointer(this.val);
        //TODO tmpmanager ??
        return code;
    }
    GO(env) {
        return new _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_0__["NUMBER"](this.val);
    }
    GetGraph(env) {
        return new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__["GraphvizNode"]('NUMBER', [new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__["GraphvizNode"](this.val + '')]);
    }
    GetTSGraph() {
        return "";
    }
}


/***/ }),

/***/ "./src/nodes/OrNode.ts":
/*!*****************************!*\
  !*** ./src/nodes/OrNode.ts ***!
  \*****************************/
/*! exports provided: OrNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OrNode", function() { return OrNode; });
/* harmony import */ var _utils_Op__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Op */ "./src/utils/Op.ts");
/* harmony import */ var _utils_LogicalOperationsFunctions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/LogicalOperationsFunctions */ "./src/utils/LogicalOperationsFunctions.ts");
/* harmony import */ var _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/C3D/Code */ "./src/utils/C3D/Code.ts");
/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
/* harmony import */ var _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/C3D/Lbl */ "./src/utils/C3D/Lbl.ts");
/* harmony import */ var _utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/C3D/Tmp */ "./src/utils/C3D/Tmp.ts");







class OrNode extends _utils_Op__WEBPACK_IMPORTED_MODULE_0__["Op"] {
    constructor(position, lf, rt) {
        super(position);
        this.lf = lf;
        this.rt = rt;
    }
    GOCode(env) {
        const codeLf = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_4__["GetReferenceValueCode"])(this.lf.ExeCode(env));
        const codeRt = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_4__["GetReferenceValueCode"])(this.rt.ExeCode(env));
        const lbl1 = _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_5__["Lbl"].newLbl();
        const codeAns = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"](codeLf, codeRt);
        codeAns.appendSplitComment("or start");
        codeAns.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_6__["Tmp"].newTmp());
        codeAns.appendValueToPointer("1");
        codeAns.appendJE(codeLf.getPointer(), "1", lbl1);
        codeAns.appendJE(codeRt.getPointer(), "1", lbl1);
        codeAns.appendValueToPointer("0");
        codeAns.appendLabel(lbl1);
        codeAns.appendSplitComment("or end");
        codeAns.setValue(Object(_utils_LogicalOperationsFunctions__WEBPACK_IMPORTED_MODULE_1__["Or"])(codeLf.getValue(), codeRt.getValue()));
        //TODO tmpmanager ??
        return codeAns;
    }
    GO(env) {
        return Object(_utils_LogicalOperationsFunctions__WEBPACK_IMPORTED_MODULE_1__["Or"])(this.lf.Exe(env), this.rt.Exe(env), this.position);
    }
    GetGraph(env) {
        return new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__["GraphvizNode"]('OR', [this.lf.GetGraph(env), this.rt.GetGraph(env)]);
    }
    GetTSGraph() {
        return "";
    }
}


/***/ }),

/***/ "./src/nodes/ReAddNode.ts":
/*!********************************!*\
  !*** ./src/nodes/ReAddNode.ts ***!
  \********************************/
/*! exports provided: ReAddNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReAddNode", function() { return ReAddNode; });
/* harmony import */ var _utils_Op__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Op */ "./src/utils/Op.ts");
/* harmony import */ var _utils_AlgebraicOperationsFunctions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/AlgebraicOperationsFunctions */ "./src/utils/AlgebraicOperationsFunctions.ts");
/* harmony import */ var _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/C3D/Code */ "./src/utils/C3D/Code.ts");
/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
/* harmony import */ var _utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/C3D/Tmp */ "./src/utils/C3D/Tmp.ts");
/* harmony import */ var _utils_Reference__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/Reference */ "./src/utils/Reference.ts");







class ReAddNode extends _utils_Op__WEBPACK_IMPORTED_MODULE_0__["Op"] {
    constructor(position, lf) {
        super(position);
        this.lf = lf;
    }
    GOCode(env) {
        const lfVal = this.lf.Exe(env);
        if (!(lfVal instanceof _utils_Reference__WEBPACK_IMPORTED_MODULE_6__["Reference"])) {
            throw new _utils_Utils__WEBPACK_IMPORTED_MODULE_4__["SemanticException"](`No se puede asignar a ${lfVal.typo}, las asignaciones solo pueden ser sobre una referencia`, this.position);
        }
        let codeLf = this.lf.ExeCode(env);
        const codeLfRefVal = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_4__["GetReferenceValueCode"])(codeLf);
        const codeAns = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"](codeLf, codeLfRefVal);
        const codeSuma = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"]();
        codeSuma.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
        codeSuma.appendSuma(codeLfRefVal.getPointer(), "1");
        codeAns.append(codeSuma);
        if (!codeLf.isHeap) {
            codeAns.appendAsignToStackPosition(codeLf.getPointer(), codeSuma.getPointer());
        }
        else {
            codeAns.appendAsignToHeapPosition(codeLf.getPointer(), codeSuma.getPointer());
        }
        codeAns.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
        codeAns.appendValueToPointer(codeLfRefVal.getPointer());
        codeAns.setValue(Object(_utils_AlgebraicOperationsFunctions__WEBPACK_IMPORTED_MODULE_1__["Add"])(codeLf.getValue(), this.position));
        return codeAns;
    }
    GO(env) {
        return Object(_utils_AlgebraicOperationsFunctions__WEBPACK_IMPORTED_MODULE_1__["Add"])(this.lf.Exe(env), this.position);
    }
    GetGraph(env) {
        return new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__["GraphvizNode"]('RE_ADD', [this.lf.GetGraph(env)]);
    }
    GetTSGraph() {
        return "";
    }
}


/***/ }),

/***/ "./src/nodes/ReAsignAddNode.ts":
/*!*************************************!*\
  !*** ./src/nodes/ReAsignAddNode.ts ***!
  \*************************************/
/*! exports provided: ReAsignAddNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReAsignAddNode", function() { return ReAsignAddNode; });
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../index */ "./src/index.ts");
/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
/* harmony import */ var _utils_AlgebraicOperationsFunctions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/AlgebraicOperationsFunctions */ "./src/utils/AlgebraicOperationsFunctions.ts");
/* harmony import */ var _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/C3D/Code */ "./src/utils/C3D/Code.ts");
/* harmony import */ var _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/PrimitiveTypoContainer */ "./src/utils/PrimitiveTypoContainer.ts");
/* harmony import */ var _utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/C3D/Tmp */ "./src/utils/C3D/Tmp.ts");
/* harmony import */ var _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/C3D/Lbl */ "./src/utils/C3D/Lbl.ts");








class ReAsignAddNode extends _index__WEBPACK_IMPORTED_MODULE_0__["Op"] {
    constructor(position, lf, rt) {
        super(position);
        this.lf = lf;
        this.rt = rt;
    }
    GOCode(env) {
        const value = this.GO(env);
        const codeLfRef = this.lf.ExeCode(env);
        const codeLf = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_1__["GetReferenceValueCode"])(codeLfRef);
        const codeRt = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_1__["GetReferenceValueCode"])(this.rt.ExeCode(env));
        const codeAns = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_4__["Code"](codeLfRef, codeLf, codeRt);
        codeAns.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_6__["Tmp"].newTmp());
        if (value instanceof _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_5__["STRING"]) {
            codeAns.appendSplitComment("START STRING concat");
            codeAns.appendValueToPointer("H");
            const newStr = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_4__["Code"]();
            newStr.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_6__["Tmp"].newTmp());
            newStr.GetFromHeap(codeLf.getPointer());
            const codeStr1Cicle = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_4__["Code"]();
            codeStr1Cicle.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_6__["Tmp"].newTmp());
            codeStr1Cicle.appendValueToPointer(codeLf.getPointer());
            newStr.append(codeStr1Cicle);
            newStr.appendSuma(newStr.getPointer(), codeStr1Cicle.getPointer());
            let codePos = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_4__["Code"]();
            codePos.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_6__["Tmp"].newTmp());
            codePos.appendValueToPointer(codeAns.getPointer());
            newStr.append(codePos);
            const str1LblCicle = _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_7__["Lbl"].newLbl();
            newStr.appendLabel(str1LblCicle, "start " + codeLf.getValue().getValue());
            let codeTmp = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_4__["Code"]();
            codeTmp.setPointer(codeStr1Cicle.getPointer());
            codeTmp.appendSuma(codeStr1Cicle.getPointer(), "1");
            newStr.append(codeTmp);
            let codePosTmp = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_4__["Code"]();
            codePosTmp.setPointer(codePos.getPointer());
            codePosTmp.appendSuma(codePos.getPointer(), "1");
            newStr.append(codePosTmp);
            let codeHeap = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_4__["Code"]();
            codeHeap.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_6__["Tmp"].newTmp());
            codeHeap.GetFromHeap(codeTmp.getPointer());
            newStr.append(codeHeap);
            newStr.appendAsignToHeapPosition(codePos.getPointer(), codeHeap.getPointer());
            newStr.appendJL(codeStr1Cicle.getPointer(), newStr.getPointer(), str1LblCicle, "end " + codeLf.getValue().getValue());
            const newStr2 = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_4__["Code"]();
            newStr2.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_6__["Tmp"].newTmp());
            newStr2.GetFromHeap(codeRt.getPointer());
            const codeStr2Cicle = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_4__["Code"]();
            codeStr2Cicle.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_6__["Tmp"].newTmp());
            codeStr2Cicle.appendValueToPointer(codeRt.getPointer());
            newStr2.append(codeStr2Cicle);
            newStr2.appendSuma(newStr2.getPointer(), codeStr2Cicle.getPointer());
            const str2LblCicle = _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_7__["Lbl"].newLbl();
            newStr2.appendLabel(str2LblCicle, "start " + codeRt.getValue().getValue());
            codeTmp = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_4__["Code"]();
            codeTmp.setPointer(codeStr2Cicle.getPointer());
            codeTmp.appendSuma(codeStr2Cicle.getPointer(), "1");
            newStr2.append(codeTmp);
            codePosTmp = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_4__["Code"]();
            codePosTmp.setPointer(codePos.getPointer());
            codePosTmp.appendSuma(codePos.getPointer(), "1");
            newStr2.append(codePosTmp);
            codeHeap = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_4__["Code"]();
            codeHeap.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_6__["Tmp"].newTmp());
            codeHeap.GetFromHeap(codeTmp.getPointer());
            newStr2.append(codeHeap);
            newStr2.appendAsignToHeapPosition(codePos.getPointer(), codeHeap.getPointer());
            newStr2.appendJL(codeStr2Cicle.getPointer(), newStr2.getPointer(), str2LblCicle, "end " + codeRt.getValue().getValue());
            codeAns.append(newStr);
            codeAns.append(newStr2);
            codePos = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_4__["Code"]();
            codePos.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_6__["Tmp"].newTmp());
            codePos.appendSuma(newStr.getPointer(), newStr2.getPointer());
            codePos.appendAsignToHeapPosition(codeAns.getPointer(), codePos.getPointer());
            codeAns.append(codePos);
            codeAns.appendAddToHeapPointer(codePos.getPointer(), "string size");
            codeAns.appendSplitComment("End string concat");
        }
        else {
            codeAns.appendSuma(codeLf.getPointer(), codeRt.getPointer());
        }
        codeAns.setValue(value);
        if (!codeLfRef.isHeap) {
            codeAns.appendAsignToStackPosition(codeLfRef.getPointer(), codeAns.getPointer());
        }
        else {
            codeAns.appendAsignToHeapPosition(codeLfRef.getPointer(), codeAns.getPointer());
        }
        return codeAns;
    }
    GO(env) {
        const lf = this.lf.Exe(env);
        const rt = this.rt.Exe(env);
        if (!(lf instanceof _index__WEBPACK_IMPORTED_MODULE_0__["Reference"])) {
            throw new _utils_Utils__WEBPACK_IMPORTED_MODULE_1__["SemanticException"](`No se puede asiganr a ${lf}, las asignaciones solo pueden ser sobre una referencia`, this.position);
        }
        lf.PutValueOnReference(Object(_utils_AlgebraicOperationsFunctions__WEBPACK_IMPORTED_MODULE_2__["Suma"])(lf.getValue(), rt, this.position));
        return lf.getValue();
    }
    GetGraph(env) {
        return new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_3__["GraphvizNode"]('RE_ASIGN_ADD', [this.lf.GetGraph(env), this.rt.GetGraph(env)]);
    }
    GetTSGraph() {
        return "";
    }
}


/***/ }),

/***/ "./src/nodes/ReAsignDivNode.ts":
/*!*************************************!*\
  !*** ./src/nodes/ReAsignDivNode.ts ***!
  \*************************************/
/*! exports provided: ReAsignDivNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReAsignDivNode", function() { return ReAsignDivNode; });
/* harmony import */ var _utils_Op__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Op */ "./src/utils/Op.ts");
/* harmony import */ var _utils_Reference__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Reference */ "./src/utils/Reference.ts");
/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
/* harmony import */ var _utils_AlgebraicOperationsFunctions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/AlgebraicOperationsFunctions */ "./src/utils/AlgebraicOperationsFunctions.ts");
/* harmony import */ var _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/C3D/Code */ "./src/utils/C3D/Code.ts");
/* harmony import */ var _utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/C3D/Tmp */ "./src/utils/C3D/Tmp.ts");







class ReAsignDivNode extends _utils_Op__WEBPACK_IMPORTED_MODULE_0__["Op"] {
    constructor(position, lf, rt) {
        super(position);
        this.lf = lf;
        this.rt = rt;
    }
    GOCode(env) {
        const value = this.GO(env);
        const codeLfRef = this.lf.ExeCode(env);
        const codeLf = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_2__["GetReferenceValueCode"])(codeLfRef);
        const codeRt = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_2__["GetReferenceValueCode"])(this.rt.ExeCode(env));
        const codeAns = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_5__["Code"](codeLfRef, codeLf, codeRt);
        codeAns.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_6__["Tmp"].newTmp());
        codeAns.appendDiv(codeLf.getPointer(), codeRt.getPointer());
        codeAns.setValue(value);
        if (!codeLfRef.isHeap) {
            codeAns.appendAsignToStackPosition(codeLfRef.getPointer(), codeAns.getPointer());
        }
        else {
            codeAns.appendAsignToHeapPosition(codeLfRef.getPointer(), codeAns.getPointer());
        }
        return codeAns;
    }
    GO(env) {
        const lf = this.lf.Exe(env);
        const rt = this.rt.Exe(env);
        if (!(lf instanceof _utils_Reference__WEBPACK_IMPORTED_MODULE_1__["Reference"])) {
            throw new _utils_Utils__WEBPACK_IMPORTED_MODULE_2__["SemanticException"](`No se puede asiganr a ${lf}, las asignaciones solo pueden ser sobre una referencia`, this.position);
        }
        lf.PutValueOnReference(Object(_utils_AlgebraicOperationsFunctions__WEBPACK_IMPORTED_MODULE_3__["Division"])(lf.getValue(), rt, this.position));
        return lf.getValue();
    }
    GetGraph(env) {
        return new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_4__["GraphvizNode"]('RE_ASIGN_DIV', [this.lf.GetGraph(env), this.rt.GetGraph(env)]);
    }
    GetTSGraph() {
        return "";
    }
}


/***/ }),

/***/ "./src/nodes/ReAsignModNode.ts":
/*!*************************************!*\
  !*** ./src/nodes/ReAsignModNode.ts ***!
  \*************************************/
/*! exports provided: ReAsignModNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReAsignModNode", function() { return ReAsignModNode; });
/* harmony import */ var _utils_Op__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Op */ "./src/utils/Op.ts");
/* harmony import */ var _utils_Reference__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Reference */ "./src/utils/Reference.ts");
/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
/* harmony import */ var _utils_AlgebraicOperationsFunctions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/AlgebraicOperationsFunctions */ "./src/utils/AlgebraicOperationsFunctions.ts");
/* harmony import */ var _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/C3D/Code */ "./src/utils/C3D/Code.ts");
/* harmony import */ var _utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/C3D/Tmp */ "./src/utils/C3D/Tmp.ts");







class ReAsignModNode extends _utils_Op__WEBPACK_IMPORTED_MODULE_0__["Op"] {
    constructor(position, lf, rt) {
        super(position);
        this.lf = lf;
        this.rt = rt;
    }
    GOCode(env) {
        const value = this.GO(env);
        const codeLfRef = this.lf.ExeCode(env);
        const codeLf = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_2__["GetReferenceValueCode"])(codeLfRef);
        const codeRt = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_2__["GetReferenceValueCode"])(this.rt.ExeCode(env));
        const codeAns = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_5__["Code"](codeLfRef, codeLf, codeRt);
        codeAns.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_6__["Tmp"].newTmp());
        codeAns.appendMod(codeLf.getPointer(), codeRt.getPointer());
        codeAns.setValue(value);
        if (!codeLfRef.isHeap) {
            codeAns.appendAsignToStackPosition(codeLfRef.getPointer(), codeAns.getPointer());
        }
        else {
            codeAns.appendAsignToHeapPosition(codeLfRef.getPointer(), codeAns.getPointer());
        }
        return codeAns;
    }
    GO(env) {
        const lf = this.lf.Exe(env);
        const rt = this.rt.Exe(env);
        if (!(lf instanceof _utils_Reference__WEBPACK_IMPORTED_MODULE_1__["Reference"])) {
            throw new _utils_Utils__WEBPACK_IMPORTED_MODULE_2__["SemanticException"](`No se puede asiganr a ${lf}, las asignaciones solo pueden ser sobre una referencia`, this.position);
        }
        lf.PutValueOnReference(Object(_utils_AlgebraicOperationsFunctions__WEBPACK_IMPORTED_MODULE_3__["Modulo"])(lf.getValue(), rt, this.position));
        return lf.getValue();
    }
    GetGraph(env) {
        return new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_4__["GraphvizNode"]('RE_ASIGN_MOD', [this.lf.GetGraph(env), this.rt.GetGraph(env)]);
    }
    GetTSGraph() {
        return "";
    }
}


/***/ }),

/***/ "./src/nodes/ReAsignMulNode.ts":
/*!*************************************!*\
  !*** ./src/nodes/ReAsignMulNode.ts ***!
  \*************************************/
/*! exports provided: ReAsignMulNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReAsignMulNode", function() { return ReAsignMulNode; });
/* harmony import */ var _utils_Op__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Op */ "./src/utils/Op.ts");
/* harmony import */ var _utils_Reference__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Reference */ "./src/utils/Reference.ts");
/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
/* harmony import */ var _utils_AlgebraicOperationsFunctions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/AlgebraicOperationsFunctions */ "./src/utils/AlgebraicOperationsFunctions.ts");
/* harmony import */ var _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/C3D/Code */ "./src/utils/C3D/Code.ts");
/* harmony import */ var _utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/C3D/Tmp */ "./src/utils/C3D/Tmp.ts");







class ReAsignMulNode extends _utils_Op__WEBPACK_IMPORTED_MODULE_0__["Op"] {
    constructor(position, lf, rt) {
        super(position);
        this.lf = lf;
        this.rt = rt;
    }
    GOCode(env) {
        const value = this.GO(env);
        const codeLfRef = this.lf.ExeCode(env);
        const codeLf = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_2__["GetReferenceValueCode"])(codeLfRef);
        const codeRt = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_2__["GetReferenceValueCode"])(this.rt.ExeCode(env));
        const codeAns = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_5__["Code"](codeLfRef, codeLf, codeRt);
        codeAns.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_6__["Tmp"].newTmp());
        codeAns.appendMulti(codeLf.getPointer(), codeRt.getPointer());
        codeAns.setValue(value);
        if (!codeLfRef.isHeap) {
            codeAns.appendAsignToStackPosition(codeLfRef.getPointer(), codeAns.getPointer());
        }
        else {
            codeAns.appendAsignToHeapPosition(codeLfRef.getPointer(), codeAns.getPointer());
        }
        return codeAns;
    }
    GO(env) {
        const lf = this.lf.Exe(env);
        const rt = this.rt.Exe(env);
        if (!(lf instanceof _utils_Reference__WEBPACK_IMPORTED_MODULE_1__["Reference"])) {
            throw new _utils_Utils__WEBPACK_IMPORTED_MODULE_2__["SemanticException"](`No se puede asiganr a ${lf}, las asignaciones solo pueden ser sobre una referencia`, this.position);
        }
        lf.PutValueOnReference(Object(_utils_AlgebraicOperationsFunctions__WEBPACK_IMPORTED_MODULE_3__["Multiplicacion"])(lf.getValue(), rt, this.position));
        return lf.getValue();
    }
    GetGraph(env) {
        return new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_4__["GraphvizNode"]('RE_ASIGN_MUL-', [this.lf.GetGraph(env), this.rt.GetGraph(env)]);
    }
    GetTSGraph() {
        return "";
    }
}


/***/ }),

/***/ "./src/nodes/ReAsignSubNode.ts":
/*!*************************************!*\
  !*** ./src/nodes/ReAsignSubNode.ts ***!
  \*************************************/
/*! exports provided: ReAsignSubNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReAsignSubNode", function() { return ReAsignSubNode; });
/* harmony import */ var _utils_Op__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Op */ "./src/utils/Op.ts");
/* harmony import */ var _utils_Reference__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Reference */ "./src/utils/Reference.ts");
/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
/* harmony import */ var _utils_AlgebraicOperationsFunctions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/AlgebraicOperationsFunctions */ "./src/utils/AlgebraicOperationsFunctions.ts");
/* harmony import */ var _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/C3D/Code */ "./src/utils/C3D/Code.ts");
/* harmony import */ var _utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/C3D/Tmp */ "./src/utils/C3D/Tmp.ts");







class ReAsignSubNode extends _utils_Op__WEBPACK_IMPORTED_MODULE_0__["Op"] {
    constructor(position, lf, rt) {
        super(position);
        this.lf = lf;
        this.rt = rt;
    }
    GOCode(env) {
        const value = this.GO(env);
        const codeLfRef = this.lf.ExeCode(env);
        const codeLf = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_2__["GetReferenceValueCode"])(codeLfRef);
        const codeRt = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_2__["GetReferenceValueCode"])(this.rt.ExeCode(env));
        const codeAns = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_5__["Code"](codeLfRef, codeLf, codeRt);
        codeAns.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_6__["Tmp"].newTmp());
        codeAns.appendResta(codeLf.getPointer(), codeRt.getPointer());
        codeAns.setValue(value);
        if (!codeLfRef.isHeap) {
            codeAns.appendAsignToStackPosition(codeLfRef.getPointer(), codeAns.getPointer());
        }
        else {
            codeAns.appendAsignToHeapPosition(codeLfRef.getPointer(), codeAns.getPointer());
        }
        return codeAns;
    }
    GO(env) {
        const lf = this.lf.Exe(env);
        const rt = this.rt.Exe(env);
        if (!(lf instanceof _utils_Reference__WEBPACK_IMPORTED_MODULE_1__["Reference"])) {
            throw new _utils_Utils__WEBPACK_IMPORTED_MODULE_2__["SemanticException"](`No se puede asiganr a ${lf}, las asignaciones solo pueden ser sobre una referencia`, this.position);
        }
        lf.PutValueOnReference(Object(_utils_AlgebraicOperationsFunctions__WEBPACK_IMPORTED_MODULE_3__["Resta"])(lf.getValue(), rt, this.position));
        return lf.getValue();
    }
    GetGraph(env) {
        return new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_4__["GraphvizNode"]('RE_ASIGN_SUB', [this.lf.GetGraph(env), this.rt.GetGraph(env)]);
    }
    GetTSGraph() {
        return "";
    }
}


/***/ }),

/***/ "./src/nodes/ReSubNode.ts":
/*!********************************!*\
  !*** ./src/nodes/ReSubNode.ts ***!
  \********************************/
/*! exports provided: ReSubNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReSubNode", function() { return ReSubNode; });
/* harmony import */ var _utils_Op__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Op */ "./src/utils/Op.ts");
/* harmony import */ var _utils_AlgebraicOperationsFunctions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/AlgebraicOperationsFunctions */ "./src/utils/AlgebraicOperationsFunctions.ts");
/* harmony import */ var _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/C3D/Code */ "./src/utils/C3D/Code.ts");
/* harmony import */ var _utils_Reference__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/Reference */ "./src/utils/Reference.ts");
/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
/* harmony import */ var _utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/C3D/Tmp */ "./src/utils/C3D/Tmp.ts");







class ReSubNode extends _utils_Op__WEBPACK_IMPORTED_MODULE_0__["Op"] {
    constructor(position, lf) {
        super(position);
        this.lf = lf;
    }
    GOCode(env) {
        const lfVal = this.lf.Exe(env);
        if (!(lfVal instanceof _utils_Reference__WEBPACK_IMPORTED_MODULE_4__["Reference"])) {
            throw new _utils_Utils__WEBPACK_IMPORTED_MODULE_5__["SemanticException"](`No se puede asignar a ${lfVal.typo}, las asignaciones solo pueden ser sobre una referencia`, this.position);
        }
        let codeLf = this.lf.ExeCode(env);
        const codeLfRefVal = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_5__["GetReferenceValueCode"])(codeLf);
        const codeAns = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"](codeLf, codeLfRefVal);
        const codeResta = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"]();
        codeResta.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_6__["Tmp"].newTmp());
        codeResta.appendResta(codeLfRefVal.getPointer(), "1");
        codeAns.append(codeResta);
        if (!codeLf.isHeap) {
            codeAns.appendAsignToStackPosition(codeLf.getPointer(), codeResta.getPointer());
        }
        else {
            codeAns.appendAsignToHeapPosition(codeLf.getPointer(), codeResta.getPointer());
        }
        codeAns.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_6__["Tmp"].newTmp());
        codeAns.appendValueToPointer(codeLfRefVal.getPointer());
        codeAns.setValue(Object(_utils_AlgebraicOperationsFunctions__WEBPACK_IMPORTED_MODULE_1__["Add"])(codeLf.getValue(), this.position));
        return codeAns;
    }
    GO(env) {
        return Object(_utils_AlgebraicOperationsFunctions__WEBPACK_IMPORTED_MODULE_1__["Sub"])(this.lf.Exe(env), this.position);
    }
    GetGraph(env) {
        return new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__["GraphvizNode"]('RE_SUB', [this.lf.GetGraph(env)]);
    }
    GetTSGraph() {
        return "";
    }
}


/***/ }),

/***/ "./src/nodes/ReturnNode.ts":
/*!*********************************!*\
  !*** ./src/nodes/ReturnNode.ts ***!
  \*********************************/
/*! exports provided: ReturnNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReturnNode", function() { return ReturnNode; });
/* harmony import */ var _utils_Op__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Op */ "./src/utils/Op.ts");
/* harmony import */ var _ReturnObj__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ReturnObj */ "./src/nodes/ReturnObj.ts");
/* harmony import */ var _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/PrimitiveTypoContainer */ "./src/utils/PrimitiveTypoContainer.ts");
/* harmony import */ var _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/C3D/Code */ "./src/utils/C3D/Code.ts");
/* harmony import */ var _utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/C3D/Tmp */ "./src/utils/C3D/Tmp.ts");
/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../index */ "./src/index.ts");








class ReturnNode extends _utils_Op__WEBPACK_IMPORTED_MODULE_0__["Op"] {
    constructor(position, value) {
        super(position);
        this.value = value;
    }
    GOCode(env) {
        //let val = new UNDEFINED();
        const codeAns = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_4__["Code"]();
        codeAns.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
        let valCode = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_4__["Code"]();
        if (this.value !== null) {
            //val = this.value.Exe(env) as Cntnr;
            valCode = this.value.ExeCode(env);
            valCode = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_6__["GetReferenceValueCode"])(valCode);
        }
        else {
            valCode.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
        }
        codeAns.setValue(new _ReturnObj__WEBPACK_IMPORTED_MODULE_1__["ReturnObj"](valCode.getValue()));
        //TODO asignar valor de return a punto de retorno en funcion.
        let index = env.GetPropertyIndex(env.returnVarRefName);
        const codeAsign = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_4__["Code"](valCode);
        codeAns.appendStackPointerPlusValue(index, "return pointer to stack");
        codeAsign.appendLine(`${codeAns.getPointer()} = P;`);
        codeAsign.appendAsignToStackPosition(codeAns.getPointer(), valCode.getPointer());
        codeAns.append(codeAsign);
        codeAns.appendJMP(env.ExitLabel !== "" ? env.ExitLabel : env.EndLabel);
        return codeAns;
    }
    GO(env) {
        if (this.value !== null) {
            let value = this.value.Exe(env);
            if (value instanceof _index__WEBPACK_IMPORTED_MODULE_7__["Reference"]) {
                value = value.getValue();
            }
            return new _ReturnObj__WEBPACK_IMPORTED_MODULE_1__["ReturnObj"](value);
        }
        return new _ReturnObj__WEBPACK_IMPORTED_MODULE_1__["ReturnObj"](new _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["UNDEFINED"]());
    }
    GetGraph(env) {
        return new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_3__["GraphvizNode"]('RETURN', this.value ? [this.value.GetGraph(env)] : []);
    }
    GetTSGraph() {
        return "";
    }
}


/***/ }),

/***/ "./src/nodes/ReturnObj.ts":
/*!********************************!*\
  !*** ./src/nodes/ReturnObj.ts ***!
  \********************************/
/*! exports provided: ReturnObj */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReturnObj", function() { return ReturnObj; });
/* harmony import */ var _utils_Cntnr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Cntnr */ "./src/utils/Cntnr.ts");

class ReturnObj extends _utils_Cntnr__WEBPACK_IMPORTED_MODULE_0__["Cntnr"] {
    constructor(returnn) {
        super();
        this.toString = () => {
            return "mi objeto return (ReturnObj)";
        };
        this.returnn = returnn;
    }
    getValue() {
        return this.returnn;
    }
}


/***/ }),

/***/ "./src/nodes/SentenceTernaryNode.ts":
/*!******************************************!*\
  !*** ./src/nodes/SentenceTernaryNode.ts ***!
  \******************************************/
/*! exports provided: SentenceTernaryNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SentenceTernaryNode", function() { return SentenceTernaryNode; });
/* harmony import */ var _utils_Op__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Op */ "./src/utils/Op.ts");
/* harmony import */ var _utils_Reference__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Reference */ "./src/utils/Reference.ts");
/* harmony import */ var _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/PrimitiveTypoContainer */ "./src/utils/PrimitiveTypoContainer.ts");
/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
/* harmony import */ var _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/C3D/Code */ "./src/utils/C3D/Code.ts");
/* harmony import */ var _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/C3D/Lbl */ "./src/utils/C3D/Lbl.ts");
/* harmony import */ var _utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/C3D/Tmp */ "./src/utils/C3D/Tmp.ts");








class SentenceTernaryNode extends _utils_Op__WEBPACK_IMPORTED_MODULE_0__["Op"] {
    constructor(position, condition, trueSentence, falseSentence) {
        super(position);
        this.condicion = condition;
        this.trueSentence = trueSentence;
        this.falseSentence = falseSentence;
    }
    GOCode(env) {
        const cond = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_3__["GetReferenceValueCode"])(this.condicion.ExeCode(env));
        if (!(cond.getValue() instanceof _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"]))
            throw new _utils_Utils__WEBPACK_IMPORTED_MODULE_3__["SemanticException"]("condicion utilizada como parametro no soportada por sentencia if");
        const codeTernary = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_5__["Code"](cond);
        codeTernary.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_7__["Tmp"].newTmp());
        codeTernary.appendSplitComment("Start Ternary");
        const lblEnd = _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_6__["Lbl"].newLbl();
        const lblFalse = _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_6__["Lbl"].newLbl();
        codeTernary.appendJE(cond.getPointer(), "0", lblFalse);
        codeTernary.appendSplitComment("Start True Sentence");
        let codeTrue = this.trueSentence.ExeCode(env);
        codeTrue = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_3__["GetReferenceValueCode"])(codeTrue);
        codeTernary.append(codeTrue);
        codeTernary.appendValueToPointer(codeTrue.getPointer());
        codeTernary.appendJMP(lblEnd);
        codeTernary.appendSplitComment("End True Sentence");
        codeTernary.appendLabel(lblFalse);
        codeTernary.appendSplitComment("Start False Sentence");
        let codeFalse = this.falseSentence.ExeCode(env);
        codeFalse = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_3__["GetReferenceValueCode"])(codeFalse);
        codeTernary.append(codeFalse);
        codeTernary.appendValueToPointer(codeFalse.getPointer());
        codeTernary.appendSplitComment("End False Sentence");
        codeTernary.appendLabel(lblEnd);
        codeTernary.appendSplitComment("End Ternary");
        return codeTernary;
    }
    GO(env) {
        let ans = this.condicion.Exe(env);
        if (ans instanceof _utils_Reference__WEBPACK_IMPORTED_MODULE_1__["Reference"]) {
            ans = ans.getValue();
        }
        if (!(ans instanceof _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"])) {
            throw new _utils_Utils__WEBPACK_IMPORTED_MODULE_3__["SemanticException"]("Condicion utilizada con parametro no soportada por operador ternario", this.position);
        }
        if (ans.getValue()) {
            return this.trueSentence.Exe(env);
        }
        return this.falseSentence.Exe(env);
    }
    GetGraph(env) {
        return new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_4__["GraphvizNode"]('TERNARY', [this.condicion.GetGraph(env), this.trueSentence.GetGraph(env), this.falseSentence.GetGraph(env)]);
    }
    GetTSGraph() {
        return "";
    }
}


/***/ }),

/***/ "./src/nodes/StringNode.ts":
/*!*********************************!*\
  !*** ./src/nodes/StringNode.ts ***!
  \*********************************/
/*! exports provided: StringNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StringNode", function() { return StringNode; });
/* harmony import */ var _utils_Op__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Op */ "./src/utils/Op.ts");
/* harmony import */ var _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/PrimitiveTypoContainer */ "./src/utils/PrimitiveTypoContainer.ts");
/* harmony import */ var _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/C3D/Code */ "./src/utils/C3D/Code.ts");
/* harmony import */ var _utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/C3D/Tmp */ "./src/utils/C3D/Tmp.ts");





class StringNode extends _utils_Op__WEBPACK_IMPORTED_MODULE_0__["Op"] {
    constructor(position, val) {
        super(position);
        this.val = val.replace(/\\n/g, "&#13;&#10;       ").replace(/\\t/g, "&#9;");
    }
    GOCode(env) {
        const codeAns = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"]();
        codeAns.appendSplitComment("start string asign");
        codeAns.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_4__["Tmp"].newTmp());
        codeAns.appendValueToPointer("H", "string start");
        const codePos = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"]();
        codePos.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_4__["Tmp"].newTmp());
        codePos.appendSuma(codeAns.getPointer(), 0 + "", "str[" + 0 + "]");
        let newVal = this.val.substring(1, this.val.length - 1);
        let chCode = newVal.length;
        codePos.appendAsignToHeapPosition(codePos.getPointer(), chCode, "str[" + 0 + "]=" + chCode + " (strLth)");
        codeAns.append(codePos);
        for (let i = 1; i <= newVal.length; i++) {
            const codePos = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"]();
            codePos.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_4__["Tmp"].newTmp());
            codePos.appendSuma(codeAns.getPointer(), i + "", "str[" + i + "]");
            chCode = newVal.charCodeAt(i - 1);
            codePos.appendAsignToHeapPosition(codePos.getPointer(), chCode, "str[" + i + "]=" + String.fromCharCode(chCode));
            codeAns.append(codePos);
        }
        codeAns.appendAddToHeapPointer(newVal.length + 1 + "", "string size");
        codeAns.appendSplitComment("end string asign");
        codeAns.setValue(new _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_1__["STRING"](newVal));
        //TODO Tmpmanager ??
        return codeAns;
    }
    GO(env) {
        return new _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_1__["STRING"](this.val.substring(1, this.val.length - 1));
    }
    GetGraph(env) {
        return new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__["GraphvizNode"]('STRING', [new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__["GraphvizNode"](this.val.substring(1, this.val.length - 1))]);
    }
    GetTSGraph() {
        return "";
    }
}


/***/ }),

/***/ "./src/nodes/SubNode.ts":
/*!******************************!*\
  !*** ./src/nodes/SubNode.ts ***!
  \******************************/
/*! exports provided: SubNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SubNode", function() { return SubNode; });
/* harmony import */ var _utils_Op__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Op */ "./src/utils/Op.ts");
/* harmony import */ var _utils_AlgebraicOperationsFunctions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/AlgebraicOperationsFunctions */ "./src/utils/AlgebraicOperationsFunctions.ts");
/* harmony import */ var _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/C3D/Code */ "./src/utils/C3D/Code.ts");
/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
/* harmony import */ var _utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/C3D/Tmp */ "./src/utils/C3D/Tmp.ts");






class SubNode extends _utils_Op__WEBPACK_IMPORTED_MODULE_0__["Op"] {
    constructor(position, lf, rt) {
        super(position);
        this.lf = lf;
        this.rt = rt;
    }
    GOCode(env) {
        const codeLf = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_4__["GetReferenceValueCode"])(this.lf.ExeCode(env));
        const codeRt = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_4__["GetReferenceValueCode"])(this.rt.ExeCode(env));
        var codeAns = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"](codeLf, codeRt);
        codeAns.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
        codeAns.appendResta(codeLf.getPointer(), codeRt.getPointer());
        codeAns.setValue(Object(_utils_AlgebraicOperationsFunctions__WEBPACK_IMPORTED_MODULE_1__["Resta"])(codeLf.getValue(), codeRt.getValue()));
        //TODO tmpmanager ??;
        return codeAns;
    }
    GO(env) {
        return Object(_utils_AlgebraicOperationsFunctions__WEBPACK_IMPORTED_MODULE_1__["Resta"])(this.lf.Exe(env), this.rt.Exe(env), this.position);
    }
    GetGraph(env) {
        return new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__["GraphvizNode"]('SUB', [this.lf.GetGraph(env), this.rt.GetGraph(env)]);
    }
    GetTSGraph() {
        return "";
    }
}


/***/ }),

/***/ "./src/nodes/SumNode.ts":
/*!******************************!*\
  !*** ./src/nodes/SumNode.ts ***!
  \******************************/
/*! exports provided: SumNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SumNode", function() { return SumNode; });
/* harmony import */ var _utils_Op__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Op */ "./src/utils/Op.ts");
/* harmony import */ var _utils_AlgebraicOperationsFunctions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/AlgebraicOperationsFunctions */ "./src/utils/AlgebraicOperationsFunctions.ts");
/* harmony import */ var _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/C3D/Code */ "./src/utils/C3D/Code.ts");
/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
/* harmony import */ var _utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/C3D/Tmp */ "./src/utils/C3D/Tmp.ts");
/* harmony import */ var _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/PrimitiveTypoContainer */ "./src/utils/PrimitiveTypoContainer.ts");
/* harmony import */ var _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/C3D/Lbl */ "./src/utils/C3D/Lbl.ts");








class SumNode extends _utils_Op__WEBPACK_IMPORTED_MODULE_0__["Op"] {
    constructor(position, lf, rt) {
        super(position);
        this.lf = lf;
        this.rt = rt;
    }
    GOCode(env) {
        let codeLf = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_4__["GetReferenceValueCode"])(this.lf.ExeCode(env));
        let codeRt = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_4__["GetReferenceValueCode"])(this.rt.ExeCode(env));
        return SumNode.SumConcat(codeLf, codeRt);
    }
    GO(env) {
        return Object(_utils_AlgebraicOperationsFunctions__WEBPACK_IMPORTED_MODULE_1__["Suma"])(this.lf.Exe(env), this.rt.Exe(env), this.position);
    }
    GetGraph(env) {
        return new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__["GraphvizNode"]('SUM', [this.lf.GetGraph(env), this.rt.GetGraph(env)]);
    }
    GetTSGraph() {
        return "";
    }
    static SumConcat(codeLf, codeRt) {
        const codeAns = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"](codeLf, codeRt);
        codeAns.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
        let value = Object(_utils_AlgebraicOperationsFunctions__WEBPACK_IMPORTED_MODULE_1__["Suma"])(codeLf.getValue(), codeRt.getValue());
        if (value instanceof _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_6__["STRING"]) {
            if (!(codeLf.getValue() instanceof _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_6__["STRING"])) {
                const codeRtToString = this.valToString(codeLf);
                codeAns.append(codeRtToString);
                codeLf.setPointer(codeRtToString.getPointer());
                codeLf.setValue(codeRtToString.getValue());
            }
            if (!(codeRt.getValue() instanceof _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_6__["STRING"])) {
                const codeRtToString = this.valToString(codeRt);
                codeAns.append(codeRtToString);
                codeRt.setPointer(codeRtToString.getPointer());
                codeRt.setValue(codeRtToString.getValue());
            }
            codeAns.appendSplitComment("START STRING concat");
            codeAns.appendValueToPointer("H");
            const newStr = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"]();
            newStr.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
            newStr.GetFromHeap(codeLf.getPointer());
            let realSize1 = _utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp();
            const codeStr1Cicle = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"]();
            codeStr1Cicle.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
            codeStr1Cicle.appendValueToPointer(codeLf.getPointer());
            newStr.append(codeStr1Cicle);
            newStr.appendLine(`${realSize1} = ${newStr.getPointer()};`, "guardo tamaño real 1er string");
            newStr.appendSuma(newStr.getPointer(), codeStr1Cicle.getPointer());
            let codePos = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"]();
            codePos.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
            codePos.appendValueToPointer(codeAns.getPointer());
            newStr.append(codePos);
            const str1LblCicle = _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_7__["Lbl"].newLbl();
            newStr.appendLabel(str1LblCicle, "start " + codeLf.getValue().getValue());
            let codeTmp = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"]();
            codeTmp.setPointer(codeStr1Cicle.getPointer());
            codeTmp.appendSuma(codeStr1Cicle.getPointer(), "1");
            newStr.append(codeTmp);
            let codePosTmp = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"]();
            codePosTmp.setPointer(codePos.getPointer());
            codePosTmp.appendSuma(codePos.getPointer(), "1");
            newStr.append(codePosTmp);
            let codeHeap = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"]();
            codeHeap.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
            codeHeap.GetFromHeap(codeTmp.getPointer());
            newStr.append(codeHeap);
            newStr.appendAsignToHeapPosition(codePos.getPointer(), codeHeap.getPointer());
            newStr.appendJL(codeStr1Cicle.getPointer(), newStr.getPointer(), str1LblCicle, "end " + codeLf.getValue().getValue());
            const newStr2 = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"]();
            newStr2.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
            newStr2.GetFromHeap(codeRt.getPointer());
            let realSize2 = _utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp();
            const codeStr2Cicle = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"]();
            codeStr2Cicle.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
            codeStr2Cicle.appendValueToPointer(codeRt.getPointer());
            newStr2.append(codeStr2Cicle);
            newStr2.appendLine(`${realSize2} = ${newStr2.getPointer()};`, "guardo tamaño real 2do string");
            newStr2.appendSuma(newStr2.getPointer(), codeStr2Cicle.getPointer());
            const str2LblCicle = _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_7__["Lbl"].newLbl();
            newStr2.appendLabel(str2LblCicle, "start " + codeRt.getValue().getValue());
            codeTmp = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"]();
            codeTmp.setPointer(codeStr2Cicle.getPointer());
            codeTmp.appendSuma(codeStr2Cicle.getPointer(), "1");
            newStr2.append(codeTmp);
            codePosTmp = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"]();
            codePosTmp.setPointer(codePos.getPointer());
            codePosTmp.appendSuma(codePos.getPointer(), "1");
            newStr2.append(codePosTmp);
            codeHeap = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"]();
            codeHeap.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
            codeHeap.GetFromHeap(codeTmp.getPointer());
            newStr2.append(codeHeap);
            newStr2.appendAsignToHeapPosition(codePos.getPointer(), codeHeap.getPointer());
            newStr2.appendJL(codeStr2Cicle.getPointer(), newStr2.getPointer(), str2LblCicle, "end " + codeRt.getValue().getValue());
            codeAns.append(newStr);
            codeAns.append(newStr2);
            codePos = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"]();
            codePos.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
            codePos.appendSuma(realSize1, realSize2, "suma de tamaños de string 1 y 2");
            codePos.appendSuma(codePos.getPointer(), "1");
            codePos.appendAsignToHeapPosition(codeAns.getPointer(), codePos.getPointer(), "añadir el tamaño de string");
            codeAns.append(codePos);
            codeAns.appendAddToHeapPointer(codePos.getPointer(), "string size");
            codeAns.appendSplitComment("End string concat");
        }
        else {
            codeAns.appendSuma(codeLf.getPointer(), codeRt.getPointer());
        }
        codeAns.setValue(value);
        //TODO tmpmanager ??
        return codeAns;
    }
    static valToString(codeValue) {
        let codeToString = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"]();
        codeToString.appendSplitComment("start pasando a string");
        const codeCopiaNumero = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"]();
        codeCopiaNumero.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
        let isNegativeLbl = _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_7__["Lbl"].newLbl();
        let endLbl = _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_7__["Lbl"].newLbl();
        let negativoBandera = _utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp();
        codeCopiaNumero.appendJL(codeValue.getPointer(), "0", isNegativeLbl);
        codeCopiaNumero.appendValueToPointer(codeValue.getPointer(), "no es negativo");
        codeCopiaNumero.appendLine(`${negativoBandera} = 0;`, "bandera no es negativo");
        codeCopiaNumero.appendJMP(endLbl);
        codeCopiaNumero.appendLabel(isNegativeLbl);
        codeCopiaNumero.appendMulti(codeValue.getPointer(), "-1", "si es negativo");
        codeCopiaNumero.appendLine(`${negativoBandera} = 1;`, "bandera si es negativo");
        codeCopiaNumero.appendLabel(endLbl);
        codeToString.append(codeCopiaNumero);
        let codeSize = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"]();
        codeSize.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
        codeSize.appendValueToPointer("0");
        let whileStartLbl = _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_7__["Lbl"].newLbl();
        let whileEndLbl = _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_7__["Lbl"].newLbl();
        codeSize.appendLabel(whileStartLbl, "ciclo para tamaño");
        codeSize.appendJLE("(int)" + codeCopiaNumero.getPointer(), "0", whileEndLbl);
        codeSize.appendLine(`${codeCopiaNumero.getPointer()} = ${codeCopiaNumero.getPointer()} / 10;`, "divide la copia del numero");
        codeSize.appendSuma(codeSize.getPointer(), "1", "incrementa el tamaño del string");
        codeSize.appendJMP(whileStartLbl);
        codeSize.appendLabel(whileEndLbl, "termina ciclo para tamaño");
        codeToString.append(codeSize);
        isNegativeLbl = _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_7__["Lbl"].newLbl();
        endLbl = _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_7__["Lbl"].newLbl();
        codeToString.appendJE(negativoBandera, "1", isNegativeLbl);
        codeToString.appendLine(`${codeCopiaNumero.getPointer()} = ${codeValue.getPointer()};`, "si no es negativo solo copia el numero");
        codeToString.appendJMP(endLbl);
        codeToString.appendLabel(isNegativeLbl, "si es negativo va a negativo");
        codeToString.appendLine(`${codeSize.getPointer()} = ${codeSize.getPointer()} + 1;`, "aumenta en uno el string");
        codeToString.appendLine(`${codeCopiaNumero.getPointer()} = ${codeValue.getPointer()} * -1;`, "multiplica por menos uno");
        codeToString.appendLabel(endLbl);
        const codeNewString = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"]();
        codeNewString.appendSplitComment("start asign string");
        codeNewString.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
        codeNewString.appendValueToPointer("H", "string start");
        const codePos = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"]();
        codePos.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
        codePos.appendSuma(codeNewString.getPointer(), 0 + "", "str[" + 0 + "]");
        codePos.appendAsignToHeapPosition(codePos.getPointer(), codeSize.getPointer(), "str[" + 0 + "]=" + codeSize.getPointer() + " (strLth)");
        codeNewString.append(codePos);
        let codeCopyToHeap = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"]();
        codeCopyToHeap.setPointer(_utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
        let stringSize = _utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp();
        codeCopyToHeap.appendLine(`${stringSize} = ${codeSize.getPointer()};`, "guardo tamaño de string");
        codeCopyToHeap.appendValueToPointer("0");
        whileStartLbl = _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_7__["Lbl"].newLbl();
        whileEndLbl = _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_7__["Lbl"].newLbl();
        let tmpForChr = _utils_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp();
        codeCopyToHeap.appendLabel(whileStartLbl);
        codeCopyToHeap.appendJLE("(int)" + codeCopiaNumero.getPointer(), "0", whileEndLbl);
        codeCopyToHeap.appendSuma(codeNewString.getPointer(), codeSize.getPointer(), "suma puntero string + size");
        codeCopyToHeap.appendLine(`${tmpForChr} = (int)${codeCopiaNumero.getPointer()} % 10;`, "cuenta para numero");
        codeCopyToHeap.appendLine(`${tmpForChr} = ${tmpForChr} + 48;`, "añade ascii");
        codeCopyToHeap.appendAsignToHeapPosition(codeCopyToHeap.getPointer(), tmpForChr, "añade char a heap");
        codeCopyToHeap.appendLine(`${codeCopiaNumero.getPointer()} = ${codeCopiaNumero.getPointer()} / 10;`, "siguiente numero");
        codeCopyToHeap.appendLine(`${codeSize.getPointer()} = ${codeSize.getPointer()} - 1;`, "reduce size");
        codeCopyToHeap.appendJMP(whileStartLbl);
        codeCopyToHeap.appendLabel(whileEndLbl);
        codeCopyToHeap.appendAddToHeapPointer(stringSize);
        codeNewString.append(codeCopyToHeap);
        codeNewString.appendSplitComment("end asign string");
        codeToString.append(codeNewString);
        codeToString.appendSplitComment("end pasando a string");
        codeToString.setPointer(codeNewString.getPointer());
        codeToString.setValue(new _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_6__["STRING"]());
        return codeToString;
    }
}


/***/ }),

/***/ "./src/nodes/SwitchNode.ts":
/*!*********************************!*\
  !*** ./src/nodes/SwitchNode.ts ***!
  \*********************************/
/*! exports provided: SwitchNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SwitchNode", function() { return SwitchNode; });
/* harmony import */ var _utils_Op__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Op */ "./src/utils/Op.ts");
/* harmony import */ var _utils_Envmnt__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Envmnt */ "./src/utils/Envmnt.ts");
/* harmony import */ var _utils_RelationalOperationsFunctions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/RelationalOperationsFunctions */ "./src/utils/RelationalOperationsFunctions.ts");
/* harmony import */ var _BreakObj__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./BreakObj */ "./src/nodes/BreakObj.ts");
/* harmony import */ var _ReturnObj__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ReturnObj */ "./src/nodes/ReturnObj.ts");
/* harmony import */ var _ContinueObj__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ContinueObj */ "./src/nodes/ContinueObj.ts");
/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
/* harmony import */ var _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/C3D/Code */ "./src/utils/C3D/Code.ts");
/* harmony import */ var _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/C3D/Lbl */ "./src/utils/C3D/Lbl.ts");










class SwitchNode extends _utils_Op__WEBPACK_IMPORTED_MODULE_0__["Op"] {
    constructor(position, condition, cases) {
        super(position);
        this.condition = condition;
        this.cases = cases;
    }
    GOCode(env) {
        const cond = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_6__["GetReferenceValueCode"])(this.condition.ExeCode(env));
        const codeAns = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_8__["Code"](cond);
        let endLbl = _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_9__["Lbl"].newLbl();
        let defaultCount = 0;
        for (let Case of this.cases) {
            if (Case.getConditionValue() === null) {
                defaultCount++;
            }
        }
        if (defaultCount > 1) {
            throw new _utils_Utils__WEBPACK_IMPORTED_MODULE_6__["SemanticException"]("No pueden exisistir mas de una sentencia 'default' dentro de un ciclo switch", this.position);
        }
        for (let Case of this.cases) {
            let endCase = "";
            if (Case.getConditionValue() !== null) {
                const condValue = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_6__["GetReferenceValueCode"])(Case.getConditionValue().ExeCode(env));
                codeAns.append(condValue);
                endCase = _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_9__["Lbl"].newLbl();
                codeAns.appendJNE(cond.getPointer(), condValue.getPointer(), endCase, "salto de caso si no son iguales");
            }
            const envCase = new _utils_Envmnt__WEBPACK_IMPORTED_MODULE_1__["Envmnt"](env, Case.getSentences(), "", endLbl, "");
            const codeCase = envCase.GO_ALL_CODE();
            codeAns.append(codeCase);
            if (Case.getConditionValue() !== null) {
                codeAns.appendLabel(endCase, "fin de caso");
            }
        }
        codeAns.appendLabel(endLbl, "fin de switch");
        return codeAns;
    }
    GO(env) {
        let condition = this.condition.Exe(env);
        let ret = undefined;
        let hasEnter = false;
        let defaultCount = 0;
        for (let Case of this.cases) {
            if (Case.getConditionValue() === null) {
                defaultCount++;
            }
        }
        if (defaultCount > 1) {
            throw new _utils_Utils__WEBPACK_IMPORTED_MODULE_6__["SemanticException"]("No pueden exisistir mas de una sentencia 'default' dentro de un ciclo switch", this.position);
        }
        for (let Case of this.cases) {
            if (ret instanceof _BreakObj__WEBPACK_IMPORTED_MODULE_3__["BreakObj"]) {
                break;
            }
            if (ret instanceof _ReturnObj__WEBPACK_IMPORTED_MODULE_4__["ReturnObj"]) {
                return ret;
            }
            if (ret instanceof _ContinueObj__WEBPACK_IMPORTED_MODULE_5__["ContinueObj"]) {
                continue;
            }
            if (Case.getConditionValue() !== null) {
                let caseValue = Case.getConditionValue().Exe(env);
                if (!Object(_utils_RelationalOperationsFunctions__WEBPACK_IMPORTED_MODULE_2__["Igual"])(condition, caseValue, this.position).getValue() && !hasEnter) {
                    continue;
                }
            }
            const env0 = new _utils_Envmnt__WEBPACK_IMPORTED_MODULE_1__["Envmnt"](env, Case.getSentences());
            ret = env0.GO_ALL();
            hasEnter = true;
            if (ret instanceof _BreakObj__WEBPACK_IMPORTED_MODULE_3__["BreakObj"]) {
                break;
            }
            if (ret instanceof _ReturnObj__WEBPACK_IMPORTED_MODULE_4__["ReturnObj"]) {
                return ret;
            }
        }
        return undefined;
    }
    GetGraph(env) {
        return new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_7__["GraphvizNode"]('SWTICH', [
            this.condition.GetGraph(env),
            new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_7__["GraphvizNode"]('SWITCH_BODY', this.cases.map(casee => new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_7__["GraphvizNode"]('CASE', [
                casee.getConditionValue() ? casee.getConditionValue().GetGraph(env) : new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_7__["GraphvizNode"]('UNDEFINED'),
                new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_7__["GraphvizNode"]('SENTENCES', casee.getSentences().map(sentence => sentence.GetGraph(env)))
            ])))
        ]);
    }
    GetTSGraph() {
        return "";
    }
}


/***/ }),

/***/ "./src/nodes/UndefinedNode.ts":
/*!************************************!*\
  !*** ./src/nodes/UndefinedNode.ts ***!
  \************************************/
/*! exports provided: UndefinedNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UndefinedNode", function() { return UndefinedNode; });
/* harmony import */ var _utils_Op__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Op */ "./src/utils/Op.ts");
/* harmony import */ var _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/PrimitiveTypoContainer */ "./src/utils/PrimitiveTypoContainer.ts");
/* harmony import */ var _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/C3D/Code */ "./src/utils/C3D/Code.ts");




class UndefinedNode extends _utils_Op__WEBPACK_IMPORTED_MODULE_0__["Op"] {
    constructor() {
        super();
    }
    GOCode(env) {
        const code = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"]();
        code.setValue(new _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_1__["UNDEFINED"]());
        code.setPointer(0);
        return code;
    }
    GO(env) {
        return new _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_1__["UNDEFINED"]();
    }
    GetGraph(env) {
        return new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__["GraphvizNode"]('UNDEFINED', [new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_2__["GraphvizNode"]('undefined')]);
    }
    GetTSGraph() {
        return "";
    }
}


/***/ }),

/***/ "./src/nodes/WhileNode.ts":
/*!********************************!*\
  !*** ./src/nodes/WhileNode.ts ***!
  \********************************/
/*! exports provided: WhileNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WhileNode", function() { return WhileNode; });
/* harmony import */ var _utils_Op__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Op */ "./src/utils/Op.ts");
/* harmony import */ var _utils_Envmnt__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Envmnt */ "./src/utils/Envmnt.ts");
/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
/* harmony import */ var _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _utils_TSGraphControl__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/TSGraphControl */ "./src/utils/TSGraphControl.ts");
/* harmony import */ var _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/C3D/Code */ "./src/utils/C3D/Code.ts");
/* harmony import */ var _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/PrimitiveTypoContainer */ "./src/utils/PrimitiveTypoContainer.ts");
/* harmony import */ var _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/C3D/Lbl */ "./src/utils/C3D/Lbl.ts");








class WhileNode extends _utils_Op__WEBPACK_IMPORTED_MODULE_0__["Op"] {
    constructor(position, condition, sentences) {
        super(position);
        this.condition = condition;
        this.sentences = sentences;
    }
    GOCode(env) {
        const cond = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_2__["GetReferenceValueCode"])(this.condition.ExeCode(env));
        if (!(cond.getValue() instanceof _utils_PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_6__["BOOLEAN"]))
            throw new _utils_Utils__WEBPACK_IMPORTED_MODULE_2__["SemanticException"]("condicion utilizada como parametro no soportada por sentencia while");
        const startLbl = _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_7__["Lbl"].newLbl(); //while start lbl
        const endLbl = _utils_C3D_Lbl__WEBPACK_IMPORTED_MODULE_7__["Lbl"].newLbl(); // while end lbl
        const codeWhile = new _utils_C3D_Code__WEBPACK_IMPORTED_MODULE_5__["Code"]();
        codeWhile.appendSplitComment("WHILE START");
        codeWhile.appendLabel(startLbl);
        codeWhile.append(cond);
        codeWhile.appendJE(cond.getPointer(), "0", endLbl);
        const envWhile = new _utils_Envmnt__WEBPACK_IMPORTED_MODULE_1__["Envmnt"](env, this.sentences, startLbl, endLbl);
        //Utils.PassPropsAndFuncs(env, envWhile);
        const whileCode = envWhile.GO_ALL_CODE();
        codeWhile.append(whileCode);
        codeWhile.appendJMP(startLbl);
        codeWhile.appendLabel(endLbl);
        codeWhile.appendSplitComment("WHILE END");
        return codeWhile;
    }
    GO(env) {
        return Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_2__["LogicWhile"])(env, this.condition, this.sentences, null);
    }
    GetGraph(env) {
        return new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_3__["GraphvizNode"]('WHILE', [this.condition.GetGraph(env), new _utils_GraphvizNode__WEBPACK_IMPORTED_MODULE_3__["GraphvizNode"]('WHILE_BODY', this.sentences.map(sentence => sentence.GetGraph(env)))]);
    }
    GetTSGraph() {
        let value = '';
        const graphId = _utils_TSGraphControl__WEBPACK_IMPORTED_MODULE_4__["TSGraphControl"].GetGraphId();
        value += `subgraph cluster_${graphId} { \n`;
        value += 'style=filled;\n' +
            'color="#2BBBAD";\n' +
            'fillcolor="#1E222A";\n';
        value += 'node [color="#2BBBAD" fontcolor="#2BBBAD" shape="rectangle"] \n';
        value += this.condition.GetTSGraph();
        this.sentences.forEach(sentence => {
            value += sentence.GetTSGraph();
        });
        value += `label = "${"WHILE_SENTENCE"}";\n`;
        value += `}\n`;
        return value;
    }
}


/***/ }),

/***/ "./src/utils/AlgebraicOperationsFunctions.ts":
/*!***************************************************!*\
  !*** ./src/utils/AlgebraicOperationsFunctions.ts ***!
  \***************************************************/
/*! exports provided: Suma, Resta, Multiplicacion, Division, Modulo, Potencia, Add, Sub */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Suma", function() { return Suma; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Resta", function() { return Resta; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Multiplicacion", function() { return Multiplicacion; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Division", function() { return Division; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Modulo", function() { return Modulo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Potencia", function() { return Potencia; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Add", function() { return Add; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Sub", function() { return Sub; });
/* harmony import */ var _Reference__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Reference */ "./src/utils/Reference.ts");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utils */ "./src/utils/Utils.ts");
/* harmony import */ var _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./PrimitiveTypoContainer */ "./src/utils/PrimitiveTypoContainer.ts");
/* harmony import */ var _ErrorsControl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ErrorsControl */ "./src/utils/ErrorsControl.ts");




function Suma(lf, rt, position = new _ErrorsControl__WEBPACK_IMPORTED_MODULE_3__["Position"]()) {
    //console.log(lf);
    //console.log(rt);
    lf instanceof _Reference__WEBPACK_IMPORTED_MODULE_0__["Reference"] ? lf = lf.getValue() : lf;
    rt instanceof _Reference__WEBPACK_IMPORTED_MODULE_0__["Reference"] ? rt = rt.getValue() : rt;
    try {
        return Sumar(lf, rt);
    }
    catch (e) {
        throw new _Utils__WEBPACK_IMPORTED_MODULE_1__["SemanticException"](`Operacion entre tipos ( ${lf.typo} + ${rt.typo} ) no permitida.`, position);
    }
    function Sumar(lf, rt) {
        switch (true) {
            case lf instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"]:
                switch (true) {
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"](lf.getValue() + rt.getValue());
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"](lf.getValue() + rt.getValueNumber());
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["STRING"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["STRING"](lf.getValue() + rt.getValue());
                    default:
                        throw new Error();
                }
            case lf instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"]:
                switch (true) {
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"](lf.getValueNumber() + rt.getValue());
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"](lf.getValueNumber() + rt.getValueNumber());
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["STRING"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["STRING"](lf.getValue() + rt.getValue());
                    default:
                        throw new Error();
                }
            case lf instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["STRING"]:
                switch (true) {
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["STRING"](lf.getValue() + rt.getValue());
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["STRING"](lf.getValue() + rt.getValue());
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["STRING"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["STRING"](lf.getValue() + rt.getValue());
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["UNDEFINED"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["STRING"](lf.getValue() + rt);
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NULL"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["STRING"](lf.getValue() + rt);
                    default:
                        throw new Error();
                }
            case lf instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["UNDEFINED"]:
                switch (true) {
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["STRING"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["STRING"](lf + rt.getValue());
                    default:
                        throw new Error();
                }
            case lf instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NULL"]:
                switch (true) {
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["STRING"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["STRING"](lf + rt.getValue());
                    default:
                        throw new Error();
                }
            default:
                throw new Error();
        }
    }
}
function Resta(lf, rt, position = new _ErrorsControl__WEBPACK_IMPORTED_MODULE_3__["Position"]()) {
    lf instanceof _Reference__WEBPACK_IMPORTED_MODULE_0__["Reference"] ? lf = lf.getValue() : lf;
    rt instanceof _Reference__WEBPACK_IMPORTED_MODULE_0__["Reference"] ? rt = rt.getValue() : rt;
    try {
        return Restar(lf, rt);
    }
    catch (e) {
        throw new _Utils__WEBPACK_IMPORTED_MODULE_1__["SemanticException"](`Operacion entre tipos ( ${lf.typo} - ${rt.typo} ) no permitida.`, position);
    }
    function Restar(lf, rt) {
        switch (true) {
            case lf instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"]:
                switch (true) {
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"](lf.getValue() - rt.getValue());
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"](lf.getValue() - rt.getValueNumber());
                    default:
                        throw new Error();
                }
            case lf instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"]:
                switch (true) {
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"](lf.getValueNumber() - rt.getValue());
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"](lf.getValueNumber() - rt.getValueNumber());
                    default:
                        throw new Error();
                }
            default:
                throw new Error();
        }
    }
}
function Multiplicacion(lf, rt, position = new _ErrorsControl__WEBPACK_IMPORTED_MODULE_3__["Position"]()) {
    lf instanceof _Reference__WEBPACK_IMPORTED_MODULE_0__["Reference"] ? lf = lf.getValue() : lf;
    rt instanceof _Reference__WEBPACK_IMPORTED_MODULE_0__["Reference"] ? rt = rt.getValue() : rt;
    try {
        return Multiplicar(lf, rt);
    }
    catch (e) {
        throw new _Utils__WEBPACK_IMPORTED_MODULE_1__["SemanticException"](`Operacion entre tipos ( ${lf.typo} * ${rt.typo} ) no permitida.`, position);
    }
    function Multiplicar(lf, rt) {
        switch (true) {
            case lf instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"]:
                switch (true) {
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"](lf.getValue() * rt.getValue());
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"](lf.getValue() * rt.getValueNumber());
                    default:
                        throw new Error();
                }
            case lf instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"]:
                switch (true) {
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"](lf.getValueNumber() * rt.getValue());
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"](lf.getValueNumber() * rt.getValueNumber());
                    default:
                        throw new Error();
                }
            default:
                throw new Error();
        }
    }
}
function Division(lf, rt, position = new _ErrorsControl__WEBPACK_IMPORTED_MODULE_3__["Position"]()) {
    lf instanceof _Reference__WEBPACK_IMPORTED_MODULE_0__["Reference"] ? lf = lf.getValue() : lf;
    rt instanceof _Reference__WEBPACK_IMPORTED_MODULE_0__["Reference"] ? rt = rt.getValue() : rt;
    if (rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"]) {
        if (rt.getValue() === 0) {
            throw new _Utils__WEBPACK_IMPORTED_MODULE_1__["SemanticException"]('Operación no válida, no se puede dividir entre 0', position);
        }
    }
    else if (rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"]) {
        if (rt.getValueNumber() === 0) {
            throw new _Utils__WEBPACK_IMPORTED_MODULE_1__["SemanticException"]('Operación no válida, no se puede dividir entre 0', position);
        }
    }
    try {
        return Dividir(lf, rt);
    }
    catch (e) {
        throw new _Utils__WEBPACK_IMPORTED_MODULE_1__["SemanticException"](`Operacion entre tipos ( ${lf.typo} / ${rt.typo} ) no permitida.`);
    }
    function Dividir(lf, rt) {
        switch (true) {
            case lf instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"]:
                switch (true) {
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"](lf.getValue() / rt.getValue());
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"](lf.getValue() / rt.getValueNumber());
                    default:
                        throw new Error();
                }
            case lf instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"]:
                switch (true) {
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"](lf.getValueNumber() / rt.getValue());
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"](lf.getValueNumber() / rt.getValueNumber());
                    default:
                        throw new Error();
                }
            default:
                throw new Error();
        }
    }
}
function Modulo(lf, rt, position = new _ErrorsControl__WEBPACK_IMPORTED_MODULE_3__["Position"]()) {
    lf instanceof _Reference__WEBPACK_IMPORTED_MODULE_0__["Reference"] ? lf = lf.getValue() : lf;
    rt instanceof _Reference__WEBPACK_IMPORTED_MODULE_0__["Reference"] ? rt = rt.getValue() : rt;
    try {
        return Mod(lf, rt);
    }
    catch (e) {
        throw new _Utils__WEBPACK_IMPORTED_MODULE_1__["SemanticException"](`Operacion entre tipos ( ${lf.typo} % ${rt.typo} ) no permitida.`, position);
    }
    function Mod(lf, rt) {
        switch (true) {
            case lf instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"]:
                switch (true) {
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"](lf.getValue() % rt.getValue());
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"](lf.getValue() % rt.getValueNumber());
                    default:
                        throw new Error();
                }
            case lf instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"]:
                switch (true) {
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"](lf.getValueNumber() % rt.getValue());
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"](lf.getValueNumber() % rt.getValueNumber());
                    default:
                        throw new Error();
                }
            default:
                throw new Error();
        }
    }
}
function Potencia(lf, rt, position = new _ErrorsControl__WEBPACK_IMPORTED_MODULE_3__["Position"]()) {
    lf instanceof _Reference__WEBPACK_IMPORTED_MODULE_0__["Reference"] ? lf = lf.getValue() : lf;
    rt instanceof _Reference__WEBPACK_IMPORTED_MODULE_0__["Reference"] ? rt = rt.getValue() : rt;
    try {
        return Pot(lf, rt);
    }
    catch (e) {
        throw new _Utils__WEBPACK_IMPORTED_MODULE_1__["SemanticException"](`Operacion entre tipos ( ${lf.typo} ** ${rt.typo} ) no permitida.`, position);
    }
    function Pot(lf, rt) {
        switch (true) {
            case lf instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"]:
                switch (true) {
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"](Math.pow(lf.getValue(), rt.getValue()));
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"](Math.pow(lf.getValue(), rt.getValueNumber()));
                    default:
                        throw new Error();
                }
            case lf instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"]:
                switch (true) {
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"](Math.pow(lf.getValueNumber(), rt.getValue()));
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"](Math.pow(lf.getValueNumber(), rt.getValueNumber()));
                    default:
                        throw new Error();
                }
            default:
                throw new Error();
        }
    }
}
function Add(lf, position = new _ErrorsControl__WEBPACK_IMPORTED_MODULE_3__["Position"]()) {
    if (!(lf instanceof _Reference__WEBPACK_IMPORTED_MODULE_0__["Reference"])) {
        throw new _Utils__WEBPACK_IMPORTED_MODULE_1__["SemanticException"]("Operacion {ref++} permitida solamente sobre referencas", position);
    }
    const val = lf.getValue();
    if (val instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"]) {
        lf.setValue(new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"](val.getValue() + 1));
        return val;
    }
    throw new _Utils__WEBPACK_IMPORTED_MODULE_1__["SemanticException"]("Operacion {ref++} No se puede realizar sobre variables distintas de tipo number", position);
}
function Sub(lf, position = new _ErrorsControl__WEBPACK_IMPORTED_MODULE_3__["Position"]()) {
    if (!(lf instanceof _Reference__WEBPACK_IMPORTED_MODULE_0__["Reference"])) {
        throw new _Utils__WEBPACK_IMPORTED_MODULE_1__["SemanticException"]("Operacion {ref--} permitida solamente sobre referencas", position);
    }
    const val = lf.getValue();
    if (val instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"]) {
        lf.setValue(new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"](val.getValue() - 1));
        return val;
    }
    throw new _Utils__WEBPACK_IMPORTED_MODULE_1__["SemanticException"]("Operacion {ref--} No se puede realizar sobre variables distintas de tipo number", position);
}


/***/ }),

/***/ "./src/utils/BlocksControlReport.ts":
/*!******************************************!*\
  !*** ./src/utils/BlocksControlReport.ts ***!
  \******************************************/
/*! exports provided: BlocksControlReport */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlocksControlReport", function() { return BlocksControlReport; });
class BlocksControlReport {
    static clearSTrucutres() {
        BlocksControlReport.blocks = new Array();
    }
    static GetBlocks() {
        return BlocksControlReport.blocks;
    }
    static AddBlock(block) {
        if (block == "") {
            return;
        }
        this.blocks.push(block.replace(/\\n/g, "&#13;&#10;       ").replace(/\\t/g, "&#9;"));
    }
}
BlocksControlReport.blocks = new Array();


/***/ }),

/***/ "./src/utils/BlocksOptimization.ts":
/*!*****************************************!*\
  !*** ./src/utils/BlocksOptimization.ts ***!
  \*****************************************/
/*! exports provided: OpimizarionByBlocks */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OpimizarionByBlocks", function() { return OpimizarionByBlocks; });
/* harmony import */ var _C3D_Code__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./C3D/Code */ "./src/utils/C3D/Code.ts");
/* harmony import */ var _BlocksControlReport__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BlocksControlReport */ "./src/utils/BlocksControlReport.ts");


function OpimizarionByBlocks(code) {
    const Blocks = new Array();
    let blockLines = new Array();
    let index = 0;
    let codeLines = code.getLines();
    while (index < codeLines.length) {
        let line = codeLines[index];
        if (line.startsWith("goto")) {
            Blocks.push(new _C3D_Code__WEBPACK_IMPORTED_MODULE_0__["Code"](...blockLines));
            blockLines = new Array();
            Blocks.push(new _C3D_Code__WEBPACK_IMPORTED_MODULE_0__["Code"](...[line]));
        }
        else if (line.startsWith("if")) {
            Blocks.push(new _C3D_Code__WEBPACK_IMPORTED_MODULE_0__["Code"](...blockLines));
            blockLines = new Array();
            Blocks.push(new _C3D_Code__WEBPACK_IMPORTED_MODULE_0__["Code"](...[line]));
        }
        else if (!line.startsWith("L")) {
            blockLines.push(line);
        }
        else {
            Blocks.push(new _C3D_Code__WEBPACK_IMPORTED_MODULE_0__["Code"](...blockLines));
            blockLines = new Array();
            blockLines.push(line);
        }
        index++;
        if (index == codeLines.length) {
            Blocks.push(new _C3D_Code__WEBPACK_IMPORTED_MODULE_0__["Code"](...blockLines));
        }
    }
    //REGLA 1
    for (let i = 0; i < Blocks.length; i++) {
        let block = Blocks[i];
        if (block.getText().startsWith("goto")) {
            let tmpBlock = Blocks[i + 1];
            let containsLabel = false;
            for (let line of tmpBlock.getLines()) {
                if (line.startsWith("L")) {
                    containsLabel = true;
                }
            }
            if (!containsLabel) {
                Blocks[i + 1].CommentMe(1);
            }
        }
    }
    for (let i = 0; i < Blocks.length; i++) {
        let block = Blocks[i];
        if (block.getText().startsWith("if")) {
            let header = block.getLines()[0];
            let parts = header.split(" ");
            let p1 = parts[0].split("(")[1];
            let sign = parts[1];
            let p2 = parts[2].split(")")[0];
            let lbl = parts[4].split(";")[0];
            if (p1.startsWith("t") || p2.startsWith("t")) {
            }
            else if (compare(p1, p2, sign)) {
                block.CommentMe(3, true);
            }
            else {
                block.CommentMe(4);
            }
        }
    }
    function compare(p1s, p2s, sign) {
        let p1 = +p1s;
        let p2 = +p2s;
        switch (sign) {
            case "==":
                return p1 == p2;
            case "!=":
                return p1 != p2;
            case "<":
                return p1 < p2;
            case ">":
                return p1 > p2;
            case "<=":
                return p1 <= p2;
            case ">=":
                return p1 >= p2;
            default:
                return false;
        }
    }
    for (let block of Blocks) {
        _BlocksControlReport__WEBPACK_IMPORTED_MODULE_1__["BlocksControlReport"].AddBlock(block.getText());
    }
    const retCode = new _C3D_Code__WEBPACK_IMPORTED_MODULE_0__["Code"](...Blocks);
    return retCode;
}


/***/ }),

/***/ "./src/utils/C3D/ArrayRange.ts":
/*!*************************************!*\
  !*** ./src/utils/C3D/ArrayRange.ts ***!
  \*************************************/
/*! exports provided: ArrayRange */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ArrayRange", function() { return ArrayRange; });
/* harmony import */ var _Code__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Code */ "./src/utils/C3D/Code.ts");

class ArrayRange extends _Code__WEBPACK_IMPORTED_MODULE_0__["Code"] {
    constructor(sIndex, eIndex) {
        super();
        this.sIndex = sIndex;
        this.eIndex = eIndex;
    }
}


/***/ }),

/***/ "./src/utils/C3D/Code.ts":
/*!*******************************!*\
  !*** ./src/utils/C3D/Code.ts ***!
  \*******************************/
/*! exports provided: Code */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Code", function() { return Code; });
/* harmony import */ var _Tmp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Tmp */ "./src/utils/C3D/Tmp.ts");
/* harmony import */ var _Lbl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Lbl */ "./src/utils/C3D/Lbl.ts");
/* harmony import */ var _OptimizationRecords__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../OptimizationRecords */ "./src/utils/OptimizationRecords.ts");



class Code {
    constructor(...codes) {
        this.lines = new Array();
        this.asmLines = new Array();
        this.asmProcLines = new Array();
        this.isProc = false;
        this.getValue = () => this.value;
        this.setValue = (value) => this.value = value;
        this.getPointer = () => this.pointer;
        this.setPointer = (pointer) => this.pointer = pointer + "";
        this.getText = () => this.lines.join('\n').trim();
        this.getASMText = () => this.asmLines.join('\n').trim();
        this.getASMProcText = () => this.asmProcLines.join('\n').trim();
        this.getLines = () => this.lines;
        this.getASMLines = () => this.asmLines;
        this.getASMProcLines = () => this.asmProcLines;
        for (let code of codes) {
            if (code instanceof Code) {
                this.append(code);
            }
            else {
                this.appendLine(code);
            }
        }
    }
    CommentMe(rule = undefined, onlyHeader = false) {
        if (!onlyHeader) {
            this.lines = this.lines.map(line => `//${line}`);
        }
        if (rule != undefined) {
            let header = "// ---------------------------------------------------------\n" +
                `// |                      REGLA ${rule}                          |\n` +
                "// ---------------------------------------------------------";
            this.lines = [header].concat(this.lines);
        }
    }
    RemoveTmpIfItsUsed(...tmps) {
        for (let tmp of tmps) {
            if (!`${tmp}`.startsWith("t")) {
                return;
            }
            _Tmp__WEBPACK_IMPORTED_MODULE_0__["Tmp"].removeUsedTmp(`${tmp}`);
        }
    }
    appendLine(line, comment = "") {
        comment = comment !== "" ? `\t/* ${comment} */` : "";
        this.lines.push(`${line} ${comment}`);
    }
    appendSplitComment(comment) {
        this.lines.push(`${comment.toUpperCase().includes("START ") ? '\n' : ''}// --------------------- ${comment.toUpperCase()} ---------------------${comment.toUpperCase().includes("END ") ? '\n' : ''}`);
    }
    appendLabel(label, comment = "") {
        this.appendLine(`${label}:`, comment); // label:
    }
    appendValueToPointer(value, comment = "") {
        this.appendLine(`${this.pointer} = ${value};`, comment); //pointer = value;
        this.RemoveTmpIfItsUsed(value);
    }
    appendSuma(pointer1, pointer2, comment = "") {
        if (Code.optimizado
            && (this.pointer === pointer1 && pointer2 === "0")
            || (this.pointer === pointer2 && pointer1 === "0")) {
            this.appendLine(`// ELIMINADO POR REGLA 6 ${this.pointer} = ${pointer1} + ${pointer2};`, comment); // pointer = pointer1 + pointer2;
            _OptimizationRecords__WEBPACK_IMPORTED_MODULE_2__["OptimizationRecords"].AddRecord(`${this.pointer} = ${pointer1} + ${pointer2};`, 'DELETED', 6);
            //this.RemoveTmpIfItsUsed(pointer1, pointer2);
            return;
        }
        if (Code.optimizado
            && (pointer1 === "0" || pointer2 === "0")) {
            let val = pointer1 === "0" ? pointer2 : pointer1;
            this.appendLine(`// OPTIMIZADO POR REGLA 10 ${this.pointer} = ${pointer1} + ${pointer2};`, comment); // pointer = pointer1 + pointer2;
            this.appendLine(`${this.pointer} = ${val};`);
            _OptimizationRecords__WEBPACK_IMPORTED_MODULE_2__["OptimizationRecords"].AddRecord(`${this.pointer} = ${pointer1} + ${pointer2};`, `${this.pointer} = ${val};`, 10);
            //this.RemoveTmpIfItsUsed(pointer1, pointer2);
            return;
        }
        this.appendLine(`${this.pointer} = ${pointer1} + ${pointer2};`, comment); // pointer = pointer1 + pointer2;
        this.RemoveTmpIfItsUsed(pointer1, pointer2);
    }
    appendResta(pointer1, pointer2, comment = "") {
        if (Code.optimizado
            && (this.pointer === pointer1 && pointer2 === "0")
            || (this.pointer === pointer2 && pointer1 === "0")) {
            this.appendLine(`// ELIMINADO POR REGLA 7 ${this.pointer} = ${pointer1} - ${pointer2};`, comment); // pointer = pointer1 + pointer2;
            //this.RemoveTmpIfItsUsed(pointer1, pointer2);
            _OptimizationRecords__WEBPACK_IMPORTED_MODULE_2__["OptimizationRecords"].AddRecord(`${this.pointer} = ${pointer1} - ${pointer2};`, 'DELETED', 7);
            return;
        }
        if (Code.optimizado
            && (pointer2 === "0")) {
            this.appendLine(`// OPTIMIZADO POR REGLA 11 ${this.pointer} = ${pointer1} - ${pointer2};`, comment); // pointer = pointer1 + pointer2;
            this.appendLine(`${this.pointer} = ${pointer1};`);
            _OptimizationRecords__WEBPACK_IMPORTED_MODULE_2__["OptimizationRecords"].AddRecord(`${this.pointer} = ${pointer1} - ${pointer2};`, `${this.pointer} = ${pointer1};`, 11);
            //this.RemoveTmpIfItsUsed(pointer1, pointer2);
            return;
        }
        this.appendLine(`${this.pointer} = ${pointer1} - ${pointer2};`, comment); // pointer = pointer1 - pointer2;
        this.RemoveTmpIfItsUsed(pointer1, pointer2);
    }
    appendMulti(pointer1, pointer2, comment = "") {
        if (Code.optimizado
            && (this.pointer === pointer1 && pointer2 === "1")
            || (this.pointer === pointer2 && pointer1 === "1")) {
            this.appendLine(`// ELIMINADO POR REGLA 8 ${this.pointer} = ${pointer1} * ${pointer2};`, comment); // pointer = pointer1 + pointer2;
            _OptimizationRecords__WEBPACK_IMPORTED_MODULE_2__["OptimizationRecords"].AddRecord(`${this.pointer} = ${pointer1} * ${pointer2};`, 'DELETED', 8);
            //this.RemoveTmpIfItsUsed(pointer1, pointer2);
            return;
        }
        if (Code.optimizado
            && (pointer1 === "1" || pointer2 === "1")) {
            let val = pointer1 === "1" ? pointer2 : pointer1;
            this.appendLine(`// OPTIMIZADO POR REGLA 12 ${this.pointer} = ${pointer1} * ${pointer2};`, comment); // pointer = pointer1 + pointer2;
            this.appendLine(`${this.pointer} = ${val};`);
            _OptimizationRecords__WEBPACK_IMPORTED_MODULE_2__["OptimizationRecords"].AddRecord(`${this.pointer} = ${pointer1} * ${pointer2};`, `${this.pointer} = ${val};`, 12);
            //this.RemoveTmpIfItsUsed(pointer1, pointer2);
            return;
        }
        if (Code.optimizado
            && (pointer1 === "2" || pointer2 === "2")) {
            let val = pointer1 === "2" ? pointer2 : pointer1;
            this.appendLine(`// OPTIMIZADO POR REGLA 14 ${this.pointer} = ${pointer1} * ${pointer2};`, comment); // pointer = pointer1 + pointer2;
            this.appendSuma(val, val, comment);
            //this.RemoveTmpIfItsUsed(pointer1, pointer2);
            _OptimizationRecords__WEBPACK_IMPORTED_MODULE_2__["OptimizationRecords"].AddRecord(`${this.pointer} = ${pointer1} * ${pointer2};`, `${this.pointer} = ${val} + ${val};`, 14);
            return;
        }
        if (Code.optimizado
            && (pointer1 === "0" || pointer2 === "0")) {
            let val = pointer1 === "0" ? pointer2 : pointer1;
            this.appendLine(`// OPTIMIZADO POR REGLA 15 ${this.pointer} = ${pointer1} * ${pointer2};`, comment); // pointer = pointer1 + pointer2;
            this.appendLine(`${this.pointer} = 0;`, comment);
            //this.RemoveTmpIfItsUsed(pointer1, pointer2);
            _OptimizationRecords__WEBPACK_IMPORTED_MODULE_2__["OptimizationRecords"].AddRecord(`${this.pointer} = ${pointer1} * ${pointer2};`, `${this.pointer} = 0;`, 15);
            return;
        }
        this.appendLine(`${this.pointer} = ${pointer1} * ${pointer2};`, comment); // pointer = pointer1 * pointer2;
        this.RemoveTmpIfItsUsed(pointer1, pointer2);
    }
    appendDiv(pointer1, pointer2, comment = "") {
        if (Code.optimizado
            && (this.pointer === pointer1 && pointer2 === "1")) {
            this.appendLine(`// ELIMINADO POR REGLA 9 ${this.pointer} = ${pointer1} / ${pointer2};`, comment); // pointer = pointer1 + pointer2;
            //this.RemoveTmpIfItsUsed(pointer1, pointer2);
            _OptimizationRecords__WEBPACK_IMPORTED_MODULE_2__["OptimizationRecords"].AddRecord(`${this.pointer} = ${pointer1} / ${pointer2};`, 'DELETED', 9);
            return;
        }
        if (Code.optimizado
            && (pointer2 === "1")) {
            this.appendLine(`// OPTIMIZADO POR REGLA 13 ${this.pointer} = ${pointer1} / ${pointer2};`, comment); // pointer = pointer1 + pointer2;
            this.appendLine(`${this.pointer} = ${pointer1};`);
            //this.RemoveTmpIfItsUsed(pointer1, pointer2);
            _OptimizationRecords__WEBPACK_IMPORTED_MODULE_2__["OptimizationRecords"].AddRecord(`${this.pointer} = ${pointer1} / ${pointer2};`, `${this.pointer} = ${pointer1};`, 13);
            return;
        }
        if (Code.optimizado
            && (pointer1 === "0" || pointer2 === "0")) {
            let val = pointer1 === "0" ? pointer2 : pointer1;
            this.appendLine(`// OPTIMIZADO POR REGLA 16 ${this.pointer} = ${pointer1} / ${pointer2};`, comment); // pointer = pointer1 + pointer2;
            this.appendLine(`${this.pointer} = 0;`, comment);
            //this.RemoveTmpIfItsUsed(pointer1, pointer2);
            _OptimizationRecords__WEBPACK_IMPORTED_MODULE_2__["OptimizationRecords"].AddRecord(`${this.pointer} = ${pointer1} / ${pointer2};`, `${this.pointer} = 0;`, 16);
            return;
        }
        this.appendLine(`${this.pointer} = ${pointer1} / ${pointer2};`, comment); // pointer = pointer1 / pointer2;
        this.RemoveTmpIfItsUsed(pointer1, pointer2);
    }
    appendMod(pointer1, pointer2, comment = "") {
        this.appendLine(`${this.pointer} = (int) ${pointer1} %  (int)${pointer2};`, comment); // pointer = pointer1 % pointer2;
        this.RemoveTmpIfItsUsed(pointer1, pointer2);
    }
    appendStackPointerPlusValue(value, comment = "") {
        if (value instanceof String || value instanceof Number) {
            this.appendSuma("P", `${value}`, comment);
        }
        else {
            let index = value[0];
            let isConst = value[1];
            if (isConst) {
                this.appendLine(`${this.pointer} = ${index};`, comment);
            }
            else {
                this.appendSuma("P", `${index}`, comment);
            }
        }
        this.RemoveTmpIfItsUsed(value);
    }
    appendHeapPointerPlusValue(value, comment = "") {
        this.appendSuma("H", `${value}`, comment);
        this.RemoveTmpIfItsUsed(value);
    }
    appendJMP(label, comment = "") {
        this.appendLine(`goto ${label};`, comment); //goto label;
    }
    appendJE(pointer1, pointer2, label, comment = "") {
        this.appendLine(`if(${pointer1} == ${pointer2}) goto ${label};`, comment); //if(pointer1 == pointer2) goto label;
        this.RemoveTmpIfItsUsed(pointer1, pointer2);
    }
    appendJNE(pointer1, pointer2, label, comment = "") {
        this.appendLine(`if(${pointer1} != ${pointer2}) goto ${label};`, comment); //if(pointer1 != pointer2) goto label;
        this.RemoveTmpIfItsUsed(pointer1, pointer2);
    }
    appendJG(pointer1, pointer2, label, comment = "") {
        this.appendLine(`if(${pointer1} > ${pointer2}) goto ${label};`, comment); //if(pointer1 > pointer2) goto label;
        this.RemoveTmpIfItsUsed(pointer1, pointer2);
    }
    appendJL(pointer1, pointer2, label, comment = "") {
        this.appendLine(`if(${pointer1} < ${pointer2}) goto ${label};`, comment); //if(pointer1 < pointer2) goto label;
        this.RemoveTmpIfItsUsed(pointer1, pointer2);
    }
    appendJGE(pointer1, pointer2, label, comment = "") {
        this.appendLine(`if(${pointer1} >= ${pointer2}) goto ${label};`, comment); //if(pointer1 >= pointer2) goto label;
        this.RemoveTmpIfItsUsed(pointer1, pointer2);
    }
    appendJLE(pointer1, pointer2, label, comment = "") {
        this.appendLine(`if(${pointer1} <= ${pointer2}) goto ${label};`, comment); //if(pointer1 <= pointer2) goto label;
        this.RemoveTmpIfItsUsed(pointer1, pointer2);
    }
    appendAsignToStackPosition(position, value, comment = "") {
        this.appendLine(`STACK[(int)${position}] = ${value};`, comment); // STACK [position] = value;
        this.RemoveTmpIfItsUsed(position, value);
    }
    appendAsignToHeapPosition(position, value, comment = "") {
        this.appendLine(`HEAP[(int)${position}] = ${value};`, comment); // HEAP [position] = value;
        this.RemoveTmpIfItsUsed(position, value);
    }
    appendAddToStackPointer(value, comment = "") {
        this.appendLine(`P = P + ${value};`, comment);
        this.RemoveTmpIfItsUsed(value);
    }
    appendAddToHeapPointer(value, comment = "") {
        this.appendLine(`H = H + ${value};`, comment);
        this.RemoveTmpIfItsUsed(value);
    }
    appendSubToStackPointer(value, comment = "") {
        this.appendLine(`P = P - ${value};`, comment);
        this.RemoveTmpIfItsUsed(value);
    }
    appendSubToHeapPointer(value, comment = "") {
        this.appendLine(`H = H - ${value};`, comment);
        this.RemoveTmpIfItsUsed(value);
    }
    GetFromStack(position, comment = "") {
        this.appendLine(`${this.pointer} = STACK[(int)${position}];`, comment); // pointer = STACK [position];
        this.RemoveTmpIfItsUsed(position);
    }
    GetFromHeap(position, comment = "") {
        this.appendLine(`${this.pointer} = HEAP[(int)${position}];`, comment); // pointer = HEAP [position];
        this.RemoveTmpIfItsUsed(position);
    }
    appendMethodStart(name, comment = "") {
        _Tmp__WEBPACK_IMPORTED_MODULE_0__["Tmp"].isOnFunction();
        this.isProc = true;
        this.appendLine(`void ${name.toLowerCase()}(){`, comment);
    }
    appendMethodEnd(comment = "") {
        _Tmp__WEBPACK_IMPORTED_MODULE_0__["Tmp"].isNotOnFunction();
        this.appendLine(`return;`);
        this.appendLine(`}`, comment);
        this.isProc = false;
    }
    appendMethodCall(name, comment = "") {
        this.appendLine(`${name.toLowerCase()}();`, comment);
    }
    appendPrintChar(char, comment = "") {
        this.appendLine(`printf("%c", (int)${char});`, comment);
        this.RemoveTmpIfItsUsed(char);
    }
    appendPrintInt(int, comment = "") {
        this.appendLine(`printf("%f", (double)${int});`, comment);
        this.RemoveTmpIfItsUsed(int);
    }
    appendPrintDouble(double, comment = "") {
        this.appendLine(`printf("%d", ${double});`, comment);
        this.RemoveTmpIfItsUsed(double);
    }
    ValueToStringCode() {
        const toStringCode = new Code(this);
        toStringCode.appendSplitComment("START IMPRIMIENDO VALOR");
        let type = this.value.typo;
        type = type.toUpperCase();
        switch (type) {
            case "NUMBER":
                toStringCode.appendPrintInt(this.getPointer());
                break;
            case "BOOLEAN":
                toStringCode.appendPrintInt(this.getPointer());
                break;
            case "STRING":
                const CodeTmp = new Code();
                CodeTmp.setPointer(_Tmp__WEBPACK_IMPORTED_MODULE_0__["Tmp"].newTmp());
                CodeTmp.GetFromHeap(this.getPointer());
                CodeTmp.appendSuma(CodeTmp.getPointer(), this.getPointer());
                const controlCode = new Code(CodeTmp);
                controlCode.setPointer(_Tmp__WEBPACK_IMPORTED_MODULE_0__["Tmp"].newTmp());
                controlCode.appendSuma(this.getPointer(), "1");
                const lbl = _Lbl__WEBPACK_IMPORTED_MODULE_1__["Lbl"].newLbl();
                controlCode.appendLabel(lbl);
                const charCode = new Code();
                charCode.setPointer(_Tmp__WEBPACK_IMPORTED_MODULE_0__["Tmp"].newTmp());
                charCode.GetFromHeap(controlCode.getPointer());
                charCode.appendPrintChar(charCode.getPointer());
                controlCode.append(charCode);
                controlCode.appendSuma(controlCode.getPointer(), "1");
                controlCode.appendJLE(controlCode.getPointer(), CodeTmp.getPointer(), lbl);
                toStringCode.append(controlCode);
                break;
            default:
                toStringCode.appendPrintInt(this.getPointer());
                break;
        }
        toStringCode.appendSplitComment("END IMPRIMIENDO VALOR");
        return toStringCode;
    }
    append(code) {
        this.isProc = code.isProc;
        if (!code) {
            return;
        }
        if (code.getText() != "") {
            this.lines.push(...code.getLines());
        }
        if (code.getASMText() != "") {
            this.asmLines.push(...code.getASMLines());
        }
        if (code.getASMProcText() != "") {
            this.asmProcLines.push(...code.getASMProcLines());
        }
    }
}
Code.optimizado = false;


/***/ }),

/***/ "./src/utils/C3D/Lbl.ts":
/*!******************************!*\
  !*** ./src/utils/C3D/Lbl.ts ***!
  \******************************/
/*! exports provided: Lbl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Lbl", function() { return Lbl; });
class Lbl {
}
Lbl.lblCount = 0;
Lbl.newLbl = () => `L${Lbl.lblCount++}`;
Lbl.getCount = () => Lbl.lblCount;
Lbl.resetCount = () => Lbl.lblCount = 0;


/***/ }),

/***/ "./src/utils/C3D/Tmp.ts":
/*!******************************!*\
  !*** ./src/utils/C3D/Tmp.ts ***!
  \******************************/
/*! exports provided: Tmp */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Tmp", function() { return Tmp; });
class Tmp {
}
Tmp.tmpCount = 0;
Tmp.onFunction = false;
Tmp.tmpsForSave = new Array();
Tmp.newTmp = function () {
    let tmp = `t${Tmp.tmpCount++}`;
    if (Tmp.onFunction) {
        Tmp.tmpsForSave.push(tmp);
    }
    return tmp;
};
Tmp.getCount = () => Tmp.tmpCount;
Tmp.resetCount = () => Tmp.tmpCount = 0;
Tmp.isGodeOfFunction = () => Tmp.onFunction;
Tmp.isOnFunction = function () {
    Tmp.onFunction = true;
    Tmp.tmpsForSave = new Array();
};
Tmp.getTempsForSave = () => Tmp.tmpsForSave;
Tmp.removeUsedTmp = function (tmp) {
    Tmp.tmpsForSave = Tmp.tmpsForSave.filter(t => t !== tmp);
};
Tmp.isNotOnFunction = function () {
    Tmp.onFunction = false;
    Tmp.tmpsForSave = new Array();
};


/***/ }),

/***/ "./src/utils/Cntnr.ts":
/*!****************************!*\
  !*** ./src/utils/Cntnr.ts ***!
  \****************************/
/*! exports provided: Cntnr */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Cntnr", function() { return Cntnr; });
/* harmony import */ var _Reference__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Reference */ "./src/utils/Reference.ts");
/* harmony import */ var _TSGraphControl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TSGraphControl */ "./src/utils/TSGraphControl.ts");


class Cntnr {
    constructor(owner) {
        this.props = new Map();
        this.propsOrder = new Array();
        this.owner = owner || null;
    }
    AsObjectProps() {
        let ans = "--------------------------------\n";
        this.props.forEach((v, k) => {
            ans += k + ' => ' + v + '\n';
        });
        ans += "--------------------------------\n";
        return ans;
    }
    AddProperty(id, cntnr) {
        id = id.toUpperCase();
        this.props.set(id, cntnr);
        this.propsOrder.push(id);
    }
    GetProperty(id) {
        id = id.toUpperCase();
        const val = this.props.get(id);
        if (val !== null && val !== undefined) {
            return val;
        }
        //this.props.set(id, new Reference());
        //return this.props.get(id);
        return undefined;
    }
    FatherPropertiesSize() {
        let propertiesTotal = 0;
        let ownerCntnr = this.owner;
        while (ownerCntnr != null) {
            if (this.returnVarRefName !== "" && ownerCntnr.GetOwner() !== null) {
                propertiesTotal += ownerCntnr.propsOrder.length;
            }
            else if (this.returnVarRefName === "") {
                propertiesTotal += ownerCntnr.propsOrder.length;
            }
            ownerCntnr = ownerCntnr.GetOwner();
        }
        return propertiesTotal;
    }
    GetPropertyIndex(id) {
        id = id.toUpperCase();
        const val = this.propsOrder.indexOf(id);
        return val !== -1 ? [val + this.FatherPropertiesSize(), this.owner === null] : this.owner.GetPropertyIndex(id);
    }
    GetEnvmtOfset() {
        let val = this.propsOrder.length;
        let ownerCntnr = this.owner;
        while (ownerCntnr != null) {
            val += ownerCntnr.propsOrder.length;
            ownerCntnr = ownerCntnr.GetOwner();
        }
        return val;
    }
    GetTSGraph(owner = '') {
        let value = '';
        const graphId = _TSGraphControl__WEBPACK_IMPORTED_MODULE_1__["TSGraphControl"].GetGraphId();
        value += `subgraph cluster_${graphId} { \n`;
        value += 'style=filled;\n' +
            'color=black;\n' +
            'fillcolor="#1E222";\n';
        value += 'node [fillcolor="yellow" shape="rectangle"] \n';
        this.props.forEach((v, k) => {
            value += `n${_TSGraphControl__WEBPACK_IMPORTED_MODULE_1__["TSGraphControl"].GetNodeId()} [label="${k}"]\n`;
        });
        value += `label = "${owner}";\n`;
        this.props.forEach((v, k) => {
            let vv = v;
            if (vv instanceof _Reference__WEBPACK_IMPORTED_MODULE_0__["Reference"]) {
                vv = vv.getValue();
            }
            value += vv.GetTSGraph(k);
        });
        value += `}\n`;
        return value;
    }
    Declare(id, cntnr, isFun = false) {
        id = id.toUpperCase();
        this.props.set(id, cntnr);
        if (!isFun && this.propsOrder.indexOf(id) == -1) {
            this.propsOrder.push(id);
        }
    }
    GetTypo() {
        return this.typo;
    }
    SetTypo(typo) {
        this.typo = typo;
    }
    GetOwner() {
        return this.owner;
    }
}


/***/ }),

/***/ "./src/utils/Console.ts":
/*!******************************!*\
  !*** ./src/utils/Console.ts ***!
  \******************************/
/*! exports provided: Console */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Console", function() { return Console; });
class Console {
}
Console.log = '';


/***/ }),

/***/ "./src/utils/Envmnt.ts":
/*!*****************************!*\
  !*** ./src/utils/Envmnt.ts ***!
  \*****************************/
/*! exports provided: Envmnt */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Envmnt", function() { return Envmnt; });
/* harmony import */ var _Cntnr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Cntnr */ "./src/utils/Cntnr.ts");
/* harmony import */ var _nodes_BreakObj__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../nodes/BreakObj */ "./src/nodes/BreakObj.ts");
/* harmony import */ var _nodes_ReturnObj__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../nodes/ReturnObj */ "./src/nodes/ReturnObj.ts");
/* harmony import */ var _nodes_ContinueObj__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../nodes/ContinueObj */ "./src/nodes/ContinueObj.ts");
/* harmony import */ var _nodes_DeclareFunNode__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../nodes/DeclareFunNode */ "./src/nodes/DeclareFunNode.ts");
/* harmony import */ var _nodes_DeclareTypeStructureNode__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../nodes/DeclareTypeStructureNode */ "./src/nodes/DeclareTypeStructureNode.ts");
/* harmony import */ var _GraphvizNode__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./GraphvizNode */ "./src/utils/GraphvizNode.ts");
/* harmony import */ var _nativeFunctions_graficar_ts__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./nativeFunctions/graficar_ts */ "./src/utils/nativeFunctions/graficar_ts.ts");
/* harmony import */ var _C3D_Code__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./C3D/Code */ "./src/utils/C3D/Code.ts");
/* harmony import */ var _nodes_DeclareVarListNode__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../nodes/DeclareVarListNode */ "./src/nodes/DeclareVarListNode.ts");










class Envmnt extends _Cntnr__WEBPACK_IMPORTED_MODULE_0__["Cntnr"] {
    constructor(owner, operations, startLabel = "", endLabel = "", exitLabel = "", returnVarRefName = "") {
        super(owner);
        this.Extra = new Map();
        this.operations = operations;
        this.StartLabel = startLabel === "" ? owner ? owner.StartLabel : startLabel : startLabel;
        this.EndLabel = endLabel === "" ? owner ? owner.EndLabel : endLabel : endLabel;
        this.ExitLabel = owner ? owner.ExitLabel !== "" ? owner.ExitLabel : exitLabel : exitLabel;
        this.returnVarRefName = owner ? owner.returnVarRefName !== "" ? owner.returnVarRefName : returnVarRefName : returnVarRefName;
        this.typo = "Ambito";
        if (returnVarRefName != "") {
            this.Declare("graficar_ts", new _nativeFunctions_graficar_ts__WEBPACK_IMPORTED_MODULE_7__["Graficar_ts"](), true);
        }
    }
    GO_ALL() {
        for (let op of this.operations) {
            if (op instanceof _nodes_DeclareFunNode__WEBPACK_IMPORTED_MODULE_4__["DeclareFunNode"] || op instanceof _nodes_DeclareTypeStructureNode__WEBPACK_IMPORTED_MODULE_5__["DeclareTypeStructureNode"]) {
                try {
                    op.Exe(this);
                }
                catch (e) {
                    console.log(e.message);
                }
            }
        }
        for (let op of this.operations) {
            if (!(op instanceof _nodes_DeclareFunNode__WEBPACK_IMPORTED_MODULE_4__["DeclareFunNode"] || op instanceof _nodes_DeclareTypeStructureNode__WEBPACK_IMPORTED_MODULE_5__["DeclareTypeStructureNode"])) {
                try {
                    let result = op.Exe(this);
                    if (result instanceof _nodes_BreakObj__WEBPACK_IMPORTED_MODULE_1__["BreakObj"] || result instanceof _nodes_ReturnObj__WEBPACK_IMPORTED_MODULE_2__["ReturnObj"] || result instanceof _nodes_ContinueObj__WEBPACK_IMPORTED_MODULE_3__["ContinueObj"]) {
                        return result;
                    }
                }
                catch (e) {
                    console.log(e.message, op);
                }
            }
        }
        return null;
    }
    GetGraph() {
        console.log('aver');
        return new _GraphvizNode__WEBPACK_IMPORTED_MODULE_6__["GraphvizNode"]('ROOT', this.operations.map(operation => operation.GetGraph(this)));
    }
    GetSentences() {
        return this.operations;
    }
    GO_ALL_TYPES(env = null) {
        const codeAns = new _C3D_Code__WEBPACK_IMPORTED_MODULE_8__["Code"]();
        for (let op of this.operations) {
            if (op instanceof _nodes_DeclareTypeStructureNode__WEBPACK_IMPORTED_MODULE_5__["DeclareTypeStructureNode"]) {
                try {
                    const result = op.ExeCode(env ? env : this);
                    codeAns.append(result);
                }
                catch (e) {
                    console.log(e.message);
                }
            }
        }
        return codeAns;
    }
    GO_ALL_GLOBAL_VAR(env = null) {
        const codeAns = new _C3D_Code__WEBPACK_IMPORTED_MODULE_8__["Code"]();
        for (let op of this.operations) {
            if (op instanceof _nodes_DeclareVarListNode__WEBPACK_IMPORTED_MODULE_9__["DeclareVarListNode"] && env === null) {
                try {
                    const result = op.ExeCode(env ? env : this);
                    codeAns.append(result);
                }
                catch (e) {
                    console.log(e.message);
                }
            }
        }
        return codeAns;
    }
    GO_ALL_CODE_FUN(env = null) {
        const codeFunctions = new _C3D_Code__WEBPACK_IMPORTED_MODULE_8__["Code"]();
        for (let op of this.operations) {
            if (op instanceof _nodes_DeclareFunNode__WEBPACK_IMPORTED_MODULE_4__["DeclareFunNode"]) {
                try {
                    const result = op.ExeCode(env ? env : this);
                    codeFunctions.append(result);
                }
                catch (e) {
                    console.log(e.message);
                }
            }
        }
        return codeFunctions;
    }
    GO_ALL_CODE(env = null) {
        const codeMain = new _C3D_Code__WEBPACK_IMPORTED_MODULE_8__["Code"]();
        for (let op of this.operations) {
            if (!(op instanceof _nodes_DeclareFunNode__WEBPACK_IMPORTED_MODULE_4__["DeclareFunNode"] || op instanceof _nodes_DeclareTypeStructureNode__WEBPACK_IMPORTED_MODULE_5__["DeclareTypeStructureNode"])) {
                try {
                    const result = op.ExeCode(env ? env : this);
                    codeMain.append(result);
                }
                catch (e) {
                    console.log(e.message, op);
                }
            }
        }
        return codeMain;
    }
}


/***/ }),

/***/ "./src/utils/ErrorsControl.ts":
/*!************************************!*\
  !*** ./src/utils/ErrorsControl.ts ***!
  \************************************/
/*! exports provided: ErrorsControl, Error, Position */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ErrorsControl", function() { return ErrorsControl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Error", function() { return Error; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Position", function() { return Position; });
class ErrorsControl {
    static clearStructures() {
        ErrorsControl.errors = new Array();
    }
    static GetErrors() {
        return ErrorsControl.errors;
    }
    static AddError(row, column, expected, obtained, typo) {
        this.errors.push(new Error(row, column, expected, obtained, typo));
    }
}
ErrorsControl.errors = new Array();
class Error {
    constructor(row, column, expected, obtained, typo) {
        this.row = row;
        this.column = column;
        this.expected = expected;
        this.obtained = obtained;
        this.typo = typo;
    }
}
class Position {
    constructor() {
        this.first_column = -1;
        this.first_line = -1;
        this.last_column = -1;
        this.last_line = -1;
    }
}


/***/ }),

/***/ "./src/utils/GraphvizNode.ts":
/*!***********************************!*\
  !*** ./src/utils/GraphvizNode.ts ***!
  \***********************************/
/*! exports provided: GraphvizNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GraphvizNode", function() { return GraphvizNode; });
/* harmony import */ var _NodesControl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NodesControl */ "./src/utils/NodesControl.ts");

class GraphvizNode {
    constructor(label, childs = []) {
        this.GetId = () => this.id;
        this.toString = () => {
            let value = `${this.id} [label="${this.label}"];\n`;
            this.childs.forEach(child => {
                value += `${this.id} -> ${child.GetId()};\n`;
            });
            this.childs.forEach(child => {
                value += child;
            });
            return value;
        };
        this.label = label;
        this.childs = childs;
        this.id = `n${_NodesControl__WEBPACK_IMPORTED_MODULE_0__["NodesControl"].GetNodeId()}`;
    }
}


/***/ }),

/***/ "./src/utils/LogicalOperationsFunctions.ts":
/*!*************************************************!*\
  !*** ./src/utils/LogicalOperationsFunctions.ts ***!
  \*************************************************/
/*! exports provided: Or, And, Not */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Or", function() { return Or; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "And", function() { return And; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Not", function() { return Not; });
/* harmony import */ var _Reference__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Reference */ "./src/utils/Reference.ts");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utils */ "./src/utils/Utils.ts");
/* harmony import */ var _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./PrimitiveTypoContainer */ "./src/utils/PrimitiveTypoContainer.ts");
/* harmony import */ var _ErrorsControl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ErrorsControl */ "./src/utils/ErrorsControl.ts");




function Or(lf, rt, position = new _ErrorsControl__WEBPACK_IMPORTED_MODULE_3__["Position"]()) {
    lf instanceof _Reference__WEBPACK_IMPORTED_MODULE_0__["Reference"] ? lf = lf.getValue() : lf;
    rt instanceof _Reference__WEBPACK_IMPORTED_MODULE_0__["Reference"] ? rt = rt.getValue() : rt;
    try {
        return or(lf, rt);
    }
    catch (e) {
        throw new _Utils__WEBPACK_IMPORTED_MODULE_1__["SemanticException"](`Operacion entre tipos ( ${lf.typo} || ${rt.typo} ) no permitida.`, position);
    }
    function or(lf, rt) {
        switch (true) {
            case lf instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"]:
                switch (true) {
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](lf.getValue() || rt.getValue());
                    default:
                        throw new Error();
                }
            default:
                throw new Error();
        }
    }
}
function And(lf, rt, position = new _ErrorsControl__WEBPACK_IMPORTED_MODULE_3__["Position"]()) {
    lf instanceof _Reference__WEBPACK_IMPORTED_MODULE_0__["Reference"] ? lf = lf.getValue() : lf;
    rt instanceof _Reference__WEBPACK_IMPORTED_MODULE_0__["Reference"] ? rt = rt.getValue() : rt;
    try {
        return and(lf, rt);
    }
    catch (e) {
        throw new _Utils__WEBPACK_IMPORTED_MODULE_1__["SemanticException"](`Operacion entre tipos ( ${lf.typo} && ${rt.typo} ) no permitida.`, position);
    }
    function and(lf, rt) {
        switch (true) {
            case lf instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"]:
                switch (true) {
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](lf.getValue() && rt.getValue());
                    default:
                        throw new Error();
                }
            default:
                throw new Error();
        }
    }
}
function Not(lf, position = new _ErrorsControl__WEBPACK_IMPORTED_MODULE_3__["Position"]()) {
    lf instanceof _Reference__WEBPACK_IMPORTED_MODULE_0__["Reference"] ? lf = lf.getValue() : lf;
    try {
        return not(lf);
    }
    catch (e) {
        throw new _Utils__WEBPACK_IMPORTED_MODULE_1__["SemanticException"](`Operacion entre tipos ( ! ${lf.typo} ) no permitida.`, position);
    }
    function not(lf) {
        switch (true) {
            case lf instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"]:
                return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](!lf.getValue());
            default:
                throw new Error();
        }
    }
}


/***/ }),

/***/ "./src/utils/NodesControl.ts":
/*!***********************************!*\
  !*** ./src/utils/NodesControl.ts ***!
  \***********************************/
/*! exports provided: NodesControl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NodesControl", function() { return NodesControl; });
class NodesControl {
    static clearStructures() {
        NodesControl.nodeIdCount = 0;
    }
}
NodesControl.nodeIdCount = 0;
NodesControl.GetNodeId = () => NodesControl.nodeIdCount++;


/***/ }),

/***/ "./src/utils/Op.ts":
/*!*************************!*\
  !*** ./src/utils/Op.ts ***!
  \*************************/
/*! exports provided: Op */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Op", function() { return Op; });
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Utils */ "./src/utils/Utils.ts");
/* harmony import */ var _ErrorsControl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ErrorsControl */ "./src/utils/ErrorsControl.ts");


class Op {
    constructor(position = new _ErrorsControl__WEBPACK_IMPORTED_MODULE_1__["Position"]()) {
        this.position = position;
    }
    Exe(env) {
        try {
            return this.GO(env);
        }
        catch (e) {
            throw new _Utils__WEBPACK_IMPORTED_MODULE_0__["ErrorCompo"](e.message);
        }
    }
    ExeCode(env) {
        try {
            return this.GOCode(env);
        }
        catch (e) {
            throw new _Utils__WEBPACK_IMPORTED_MODULE_0__["ErrorCompo"](e.message);
        }
    }
}


/***/ }),

/***/ "./src/utils/OptimizationRecords.ts":
/*!******************************************!*\
  !*** ./src/utils/OptimizationRecords.ts ***!
  \******************************************/
/*! exports provided: OptimizationRecords, OptimizationRecord */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OptimizationRecords", function() { return OptimizationRecords; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OptimizationRecord", function() { return OptimizationRecord; });
class OptimizationRecords {
    static clearRecords() {
        OptimizationRecords.records = new Array();
    }
    static GetRecords() {
        return OptimizationRecords.records;
    }
    static AddRecord(prevLine, newLine, rule, lineNo = 0) {
        OptimizationRecords.records.push(new OptimizationRecord(prevLine, newLine, rule, lineNo));
    }
}
OptimizationRecords.records = new Array();
class OptimizationRecord {
    constructor(prevLine, newLine, rule, lineNo = 0) {
        this.prevLine = prevLine;
        this.newLine = newLine;
        this.rule = rule;
        this.lineNo = lineNo;
    }
}


/***/ }),

/***/ "./src/utils/PrimitiveTypoContainer.ts":
/*!*********************************************!*\
  !*** ./src/utils/PrimitiveTypoContainer.ts ***!
  \*********************************************/
/*! exports provided: BOOLEAN, STRING, NUMBER, UNDEFINED, NAN, NULL, ARRAY, OBJECT */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BOOLEAN", function() { return BOOLEAN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "STRING", function() { return STRING; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUMBER", function() { return NUMBER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UNDEFINED", function() { return UNDEFINED; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NAN", function() { return NAN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NULL", function() { return NULL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ARRAY", function() { return ARRAY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OBJECT", function() { return OBJECT; });
/* harmony import */ var _Cntnr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Cntnr */ "./src/utils/Cntnr.ts");
/* harmony import */ var _Reference__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Reference */ "./src/utils/Reference.ts");
/* harmony import */ var _nativeFunctions_length__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./nativeFunctions/length */ "./src/utils/nativeFunctions/length.ts");
/* harmony import */ var _nativeFunctions_push__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./nativeFunctions/push */ "./src/utils/nativeFunctions/push.ts");
/* harmony import */ var _nativeFunctions_pop__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./nativeFunctions/pop */ "./src/utils/nativeFunctions/pop.ts");
/* harmony import */ var _C3D_ArrayRange__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./C3D/ArrayRange */ "./src/utils/C3D/ArrayRange.ts");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Utils */ "./src/utils/Utils.ts");
/* harmony import */ var _nativeFunctions_stringlenght__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./nativeFunctions/stringlenght */ "./src/utils/nativeFunctions/stringlenght.ts");
/* harmony import */ var _nativeFunctions_stringUpperCase__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./nativeFunctions/stringUpperCase */ "./src/utils/nativeFunctions/stringUpperCase.ts");
/* harmony import */ var _nativeFunctions_stringLowerCase__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./nativeFunctions/stringLowerCase */ "./src/utils/nativeFunctions/stringLowerCase.ts");
/* harmony import */ var _nativeFunctions_charat__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./nativeFunctions/charat */ "./src/utils/nativeFunctions/charat.ts");
/* harmony import */ var _nativeFunctions_concat__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./nativeFunctions/concat */ "./src/utils/nativeFunctions/concat.ts");












class BOOLEAN extends _Cntnr__WEBPACK_IMPORTED_MODULE_0__["Cntnr"] {
    constructor(value) {
        super();
        this.toString = () => {
            return this.value ? "true" : "false";
        };
        this.getValueNumber = () => {
            return this.value ? 1 : 0;
        };
        this.getValue = () => {
            return this.value;
        };
        this.value = value;
        this.typo = "BOOLEAN";
    }
}
class STRING extends _Cntnr__WEBPACK_IMPORTED_MODULE_0__["Cntnr"] {
    constructor(value) {
        super();
        this.toString = () => {
            return this.value;
        };
        this.getValue = () => {
            return this.value;
        };
        this.value = value || '';
        this.typo = "STRING";
        try {
            this.Declare("length", new _nativeFunctions_stringlenght__WEBPACK_IMPORTED_MODULE_7__["Stringlenght"](this));
            this.Declare("touppercase", new _nativeFunctions_stringUpperCase__WEBPACK_IMPORTED_MODULE_8__["StringUperCase"](this));
            this.Declare("tolowercase", new _nativeFunctions_stringLowerCase__WEBPACK_IMPORTED_MODULE_9__["StringLowrCase"](this));
            this.Declare("charat", new _nativeFunctions_charat__WEBPACK_IMPORTED_MODULE_10__["Charat"](this));
            this.Declare("concat", new _nativeFunctions_concat__WEBPACK_IMPORTED_MODULE_11__["Concat"](this));
        }
        catch (e) {
            throw new Error();
        }
    }
}
class NUMBER extends _Cntnr__WEBPACK_IMPORTED_MODULE_0__["Cntnr"] {
    constructor(value) {
        super();
        this.toString = () => {
            return this.value + '';
        };
        this.getValue = () => {
            return this.value;
        };
        this.value = value || 0;
        this.typo = "NUMBER";
    }
}
class UNDEFINED extends _Cntnr__WEBPACK_IMPORTED_MODULE_0__["Cntnr"] {
    constructor() {
        super();
        this.value = undefined;
        this.toString = () => {
            return "undefined";
        };
        this.getValue = () => {
            return this.value;
        };
        this.typo = "UNDEFINED";
    }
}
class NAN extends _Cntnr__WEBPACK_IMPORTED_MODULE_0__["Cntnr"] {
    constructor() {
        super();
        this.toString = () => {
            return "NaN";
        };
        this.typo = "NAN";
    }
}
class NULL extends _Cntnr__WEBPACK_IMPORTED_MODULE_0__["Cntnr"] {
    constructor() {
        super();
        this.toString = () => {
            return null;
        };
        this.getValue = () => {
            return null;
        };
        this.typo = "NULL";
    }
}
class ARRAY extends _Cntnr__WEBPACK_IMPORTED_MODULE_0__["Cntnr"] {
    constructor(value, contentType = 'ANY', ranges = null) {
        super();
        this.getContentType = () => this.contentType;
        this.toString = () => {
            const size = this.value.length;
            let log = `Array (${size}) [`;
            for (let i = 0; i < size; i++) {
                log += `${this.value[i].getValue()}`;
                if (size - 1 !== i) {
                    log += ', ';
                }
            }
            log += ']';
            return log;
        };
        this.getValue = (index) => {
            let val = this.value[index];
            if (val !== undefined) {
                return val;
            }
            let size = this.value.length;
            while (size <= index) {
                this.value.push(new _Reference__WEBPACK_IMPORTED_MODULE_1__["Reference"]());
                size++;
            }
            return this.value[index];
        };
        this.getValueList = () => {
            return this.value;
        };
        this.typo = `ARRAY`;
        this.contentType = contentType;
        this.ranges = ranges;
        if (value instanceof String) {
            this.value = new Array();
            this.ranges.push(new _C3D_ArrayRange__WEBPACK_IMPORTED_MODULE_5__["ArrayRange"](0, value.length - 1));
            for (let i = 0; i < value.length; i++) {
                let ref = new _Reference__WEBPACK_IMPORTED_MODULE_1__["Reference"]("NUMBER");
                ref.PutValueOnReference(new NUMBER(value.charCodeAt(i)));
                this.value.push(ref);
            }
        }
        else {
            this.value = value || new Array();
            let ranges = new Array();
            ranges.push(new _C3D_ArrayRange__WEBPACK_IMPORTED_MODULE_5__["ArrayRange"](0, this.value.length - 1));
            this.ranges = this.ranges ? this.ranges : ranges;
        }
        try {
            this.Declare("length", new _nativeFunctions_length__WEBPACK_IMPORTED_MODULE_2__["Length"](this));
            this.Declare("push", new _nativeFunctions_push__WEBPACK_IMPORTED_MODULE_3__["Push"](this));
            this.Declare("pop", new _nativeFunctions_pop__WEBPACK_IMPORTED_MODULE_4__["Pop"](this));
        }
        catch (e) {
            throw new Error();
        }
    }
    GetLinearMemorySize() {
        return Object(_Utils__WEBPACK_IMPORTED_MODULE_6__["ArrayMemorySize"])(this.ranges);
    }
    GetPosition(indexes) {
        return Object(_Utils__WEBPACK_IMPORTED_MODULE_6__["ArrayPosition"])(this.ranges, indexes);
    }
    GetPositionCode(codes) {
        return Object(_Utils__WEBPACK_IMPORTED_MODULE_6__["ArrayPositionCode"])(this.ranges, codes);
    }
    addValue(value) {
        this.value.push(value);
    }
}
class OBJECT extends _Cntnr__WEBPACK_IMPORTED_MODULE_0__["Cntnr"] {
    constructor(attributes) {
        super();
        this.toString = () => {
            let log = '{';
            let count = 1;
            this.props.forEach((v, k) => {
                let value = v;
                if (value instanceof _Reference__WEBPACK_IMPORTED_MODULE_1__["Reference"]) {
                    value = value.getValue();
                }
                log += `"${k}" : ${value}`;
                if (count < this.props.size) {
                    log += ', ';
                }
                count++;
            });
            log += '}';
            return log;
        };
        this.attributes = attributes || new Map();
        this.attributes.forEach((v, k) => {
            let value = v;
            if (value instanceof _Reference__WEBPACK_IMPORTED_MODULE_1__["Reference"]) {
                value = value.getValue();
            }
            const reference = new _Reference__WEBPACK_IMPORTED_MODULE_1__["Reference"]();
            reference.PutValueOnReference(value);
            this.Declare(k, reference);
        });
        this.typo = "OBJECT";
    }
}


/***/ }),

/***/ "./src/utils/Reference.ts":
/*!********************************!*\
  !*** ./src/utils/Reference.ts ***!
  \********************************/
/*! exports provided: Reference */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Reference", function() { return Reference; });
/* harmony import */ var _Cntnr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Cntnr */ "./src/utils/Cntnr.ts");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utils */ "./src/utils/Utils.ts");
/* harmony import */ var _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./PrimitiveTypoContainer */ "./src/utils/PrimitiveTypoContainer.ts");



class Reference extends _Cntnr__WEBPACK_IMPORTED_MODULE_0__["Cntnr"] {
    constructor(tipoNombre = 'ANY', isConst = false, isParam = false) {
        super();
        this.isConst = false;
        this.tipoNombre = 'any';
        this.getReferenceType = () => {
            return this.tipoNombre.toUpperCase();
        };
        this.toString = () => {
            return this.value.toString();
        };
        this.getValue = () => {
            return this.value;
        };
        this.setValue = (value) => {
            this.value = value;
        };
        this.Call = (args) => {
            for (let arg of args) {
                console.log(arg);
            }
            return null;
        };
        this.typo = "REFERENCE";
        this.tipoNombre = tipoNombre === 'VOID' ? 'ANY' : tipoNombre;
        this.value = isParam ? Object(_Utils__WEBPACK_IMPORTED_MODULE_1__["DefaultValueNoUndefined"])(this.tipoNombre) : Object(_Utils__WEBPACK_IMPORTED_MODULE_1__["DefaultValue"])(this.tipoNombre);
        this.isConst = isConst;
    }
    PutValueOnReference(value) {
        if (this.isConst && !(this.value instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["UNDEFINED"])) {
            throw new _Utils__WEBPACK_IMPORTED_MODULE_1__["SemanticException"]('No se puede cambiar el valor de una constante');
        }
        let v;
        if (value instanceof Reference) {
            v = value.value;
        }
        else {
            v = value;
        }
        if (v === undefined) {
            v = new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["UNDEFINED"]();
        }
        if (this.tipoNombre !== v.typo
            && this.tipoNombre !== 'ANY'
            && v.typo !== 'NULL'
            && v.typo !== 'UNDEFINED'
            && v.typo !== 'OBJECT'
            || (Object(_Utils__WEBPACK_IMPORTED_MODULE_1__["IsPrimitiveTypo"])(this.tipoNombre) && v.typo === 'OBJECT' && this.tipoNombre != "ANY")) {
            throw new _Utils__WEBPACK_IMPORTED_MODULE_1__["SemanticException"](`Tipo ${v.typo} no puede ser asignado a Variable de tipo ${this.tipoNombre}`);
        }
        this.value = v;
    }
}


/***/ }),

/***/ "./src/utils/RelationalOperationsFunctions.ts":
/*!****************************************************!*\
  !*** ./src/utils/RelationalOperationsFunctions.ts ***!
  \****************************************************/
/*! exports provided: Igual, Diferente, Mayor, Menor, MayorEq, MenorEq */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Igual", function() { return Igual; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Diferente", function() { return Diferente; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Mayor", function() { return Mayor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Menor", function() { return Menor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MayorEq", function() { return MayorEq; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MenorEq", function() { return MenorEq; });
/* harmony import */ var _Reference__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Reference */ "./src/utils/Reference.ts");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utils */ "./src/utils/Utils.ts");
/* harmony import */ var _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./PrimitiveTypoContainer */ "./src/utils/PrimitiveTypoContainer.ts");
/* harmony import */ var _ErrorsControl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ErrorsControl */ "./src/utils/ErrorsControl.ts");




function Igual(lf, rt, position = new _ErrorsControl__WEBPACK_IMPORTED_MODULE_3__["Position"]()) {
    lf instanceof _Reference__WEBPACK_IMPORTED_MODULE_0__["Reference"] ? lf = lf.getValue() : lf;
    rt instanceof _Reference__WEBPACK_IMPORTED_MODULE_0__["Reference"] ? rt = rt.getValue() : rt;
    try {
        return Eq(lf, rt);
    }
    catch (e) {
        throw new _Utils__WEBPACK_IMPORTED_MODULE_1__["SemanticException"](`Operacion entre tipos ( ${lf.typo} == ${rt.typo} ) no permitida.`, position);
    }
    function Eq(lf, rt) {
        switch (true) {
            case lf instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"]:
                switch (true) {
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](lf.getValue() === rt.getValue());
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](lf.getValue() === rt.getValueNumber());
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NULL"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](false);
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["UNDEFINED"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](false);
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NAN"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](false);
                    default:
                        throw new Error();
                }
            case lf instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"]:
                switch (true) {
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](lf.getValueNumber() == rt.getValue());
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](lf.getValueNumber() == rt.getValueNumber());
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NULL"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](false);
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["UNDEFINED"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](false);
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NAN"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](false);
                    default:
                        throw new Error();
                }
            case lf instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["STRING"]:
                switch (true) {
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["STRING"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](lf.getValue() === rt.getValue());
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NULL"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](false);
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["UNDEFINED"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](false);
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NAN"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](false);
                    default:
                        throw new Error();
                }
            case lf instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["UNDEFINED"]:
                switch (true) {
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["UNDEFINED"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](true);
                    default:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](false);
                }
            case lf instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NULL"]:
                switch (true) {
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NULL"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](true);
                    default:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](false);
                }
            case lf instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NAN"]:
                switch (true) {
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NAN"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](true);
                    default:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](false);
                }
            case lf instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["OBJECT"]:
                return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](false);
            case lf instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["ARRAY"]:
                return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](true);
        }
    }
}
function Diferente(lf, rt, position = new _ErrorsControl__WEBPACK_IMPORTED_MODULE_3__["Position"]()) {
    lf instanceof _Reference__WEBPACK_IMPORTED_MODULE_0__["Reference"] ? lf = lf.getValue() : lf;
    rt instanceof _Reference__WEBPACK_IMPORTED_MODULE_0__["Reference"] ? rt = rt.getValue() : rt;
    try {
        return Dif(lf, rt);
    }
    catch (e) {
        throw new _Utils__WEBPACK_IMPORTED_MODULE_1__["SemanticException"](`Operacion entre tipos ( ${lf.typo} != ${rt.typo} ) no permitida.`, position);
    }
    function Dif(lf, rt) {
        switch (true) {
            case lf instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"]:
                switch (true) {
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](lf.getValue() !== rt.getValue());
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](lf.getValue() !== rt.getValueNumber());
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NULL"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](true);
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["UNDEFINED"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](true);
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NAN"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](true);
                    default:
                        throw new Error();
                }
            case lf instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"]:
                switch (true) {
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](lf.getValueNumber() != rt.getValue());
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](lf.getValueNumber() != rt.getValueNumber());
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NULL"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](true);
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["UNDEFINED"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](true);
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NAN"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](true);
                    default:
                        throw new Error();
                }
            case lf instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["STRING"]:
                switch (true) {
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["STRING"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](lf.getValue() !== rt.getValue());
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NULL"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](true);
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["UNDEFINED"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](true);
                    default:
                        throw new Error();
                }
            case lf instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["UNDEFINED"]:
                switch (true) {
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["UNDEFINED"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](false);
                    default:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](true);
                }
            case lf instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NULL"]:
                switch (true) {
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NULL"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](false);
                    default:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](true);
                }
            case lf instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NAN"]:
                switch (true) {
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NAN"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](false);
                    default:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](true);
                }
            case lf instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["OBJECT"]:
                return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](true);
            case lf instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["ARRAY"]:
                return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](true);
            default:
                throw new Error();
        }
    }
}
function Mayor(lf, rt, position = new _ErrorsControl__WEBPACK_IMPORTED_MODULE_3__["Position"]()) {
    lf instanceof _Reference__WEBPACK_IMPORTED_MODULE_0__["Reference"] ? lf = lf.getValue() : lf;
    rt instanceof _Reference__WEBPACK_IMPORTED_MODULE_0__["Reference"] ? rt = rt.getValue() : rt;
    try {
        return May(lf, rt);
    }
    catch (e) {
        throw new _Utils__WEBPACK_IMPORTED_MODULE_1__["SemanticException"](`Operacion entre tipos ( ${lf.typo} > ${rt.typo} ) dddno permitida.`, position);
    }
    function May(lf, rt) {
        switch (true) {
            case lf instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"]:
                switch (true) {
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](lf.getValue() > rt.getValue());
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](lf.getValue() > rt.getValueNumber());
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NAN"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](false);
                    default:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](false);
                }
            case lf instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"]:
                switch (true) {
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](lf.getValueNumber() > rt.getValue());
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](lf.getValueNumber() > rt.getValueNumber());
                    default:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](false);
                }
            case lf instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["STRING"]:
                switch (true) {
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["STRING"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](lf.getValue() > rt.getValue());
                    default:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](false);
                }
            case lf instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NAN"]:
                switch (true) {
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](false);
                    default:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](false);
                }
            default:
                return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](false);
        }
    }
}
function Menor(lf, rt, position = new _ErrorsControl__WEBPACK_IMPORTED_MODULE_3__["Position"]()) {
    lf instanceof _Reference__WEBPACK_IMPORTED_MODULE_0__["Reference"] ? lf = lf.getValue() : lf;
    rt instanceof _Reference__WEBPACK_IMPORTED_MODULE_0__["Reference"] ? rt = rt.getValue() : rt;
    try {
        return Min(lf, rt);
    }
    catch (e) {
        throw new _Utils__WEBPACK_IMPORTED_MODULE_1__["SemanticException"](`Operacion entre tipos ( ${lf.typo} < ${rt.typo} ) ndadfao permitida.`, position);
    }
    function Min(lf, rt) {
        switch (true) {
            case lf instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"]:
                switch (true) {
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](lf.getValue() < rt.getValue());
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](lf.getValue() < rt.getValueNumber());
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NAN"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](false);
                    default:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](false);
                }
            case lf instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"]:
                switch (true) {
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](lf.getValueNumber() < rt.getValue());
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](lf.getValueNumber() < rt.getValueNumber());
                    default:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](false);
                }
            case lf instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["STRING"]:
                switch (true) {
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["STRING"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](lf.getValue() < rt.getValue());
                    default:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](false);
                }
            case lf instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NAN"]:
                switch (true) {
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](false);
                    default:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](false);
                }
            default:
                return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](false);
        }
    }
}
function MayorEq(lf, rt, position = new _ErrorsControl__WEBPACK_IMPORTED_MODULE_3__["Position"]()) {
    lf instanceof _Reference__WEBPACK_IMPORTED_MODULE_0__["Reference"] ? lf = lf.getValue() : lf;
    rt instanceof _Reference__WEBPACK_IMPORTED_MODULE_0__["Reference"] ? rt = rt.getValue() : rt;
    try {
        return MayEq(lf, rt);
    }
    catch (e) {
        throw new _Utils__WEBPACK_IMPORTED_MODULE_1__["SemanticException"](`Operacion entre tipos ( ${lf.typo} >= ${rt.typo} ) no permitida.`, position);
    }
    function MayEq(lf, rt) {
        switch (true) {
            case lf instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"]:
                switch (true) {
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](lf.getValue() >= rt.getValue());
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](lf.getValue() >= rt.getValueNumber());
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NAN"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](false);
                    default:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](false);
                }
            case lf instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"]:
                switch (true) {
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](lf.getValueNumber() >= rt.getValue());
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](lf.getValueNumber() >= rt.getValueNumber());
                    default:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](false);
                }
            case lf instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["STRING"]:
                switch (true) {
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["STRING"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](lf.getValue() >= rt.getValue());
                    default:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](false);
                }
            case lf instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NAN"]:
                switch (true) {
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](false);
                    default:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](false);
                }
            default:
                return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](false);
        }
    }
}
function MenorEq(lf, rt, position = new _ErrorsControl__WEBPACK_IMPORTED_MODULE_3__["Position"]()) {
    lf instanceof _Reference__WEBPACK_IMPORTED_MODULE_0__["Reference"] ? lf = lf.getValue() : lf;
    rt instanceof _Reference__WEBPACK_IMPORTED_MODULE_0__["Reference"] ? rt = rt.getValue() : rt;
    try {
        return MinEq(lf, rt);
    }
    catch (e) {
        throw new _Utils__WEBPACK_IMPORTED_MODULE_1__["SemanticException"](`Operacion entre tipos ( ${lf.typo} >= ${rt.typo} ) no permitida.`, position);
    }
    function MinEq(lf, rt) {
        switch (true) {
            case lf instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"]:
                switch (true) {
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](lf.getValue() <= rt.getValue());
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](lf.getValue() <= rt.getValueNumber());
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NAN"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](false);
                    default:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](false);
                }
            case lf instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"]:
                switch (true) {
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](lf.getValueNumber() <= rt.getValue());
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](lf.getValueNumber() <= rt.getValueNumber());
                    default:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](false);
                }
            case lf instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["STRING"]:
                switch (true) {
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["STRING"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](lf.getValue() <= rt.getValue());
                    default:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](false);
                }
            case lf instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NAN"]:
                switch (true) {
                    case rt instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"]:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](false);
                    default:
                        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](false);
                }
            default:
                return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["BOOLEAN"](false);
        }
    }
}


/***/ }),

/***/ "./src/utils/TSGraphControl.ts":
/*!*************************************!*\
  !*** ./src/utils/TSGraphControl.ts ***!
  \*************************************/
/*! exports provided: TSGraphControl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TSGraphControl", function() { return TSGraphControl; });
class TSGraphControl {
    static clearStructures() {
        TSGraphControl.graphIdCount = 0;
        TSGraphControl.nodeIdCount = 0;
        TSGraphControl.graphStrings = new Array();
    }
}
TSGraphControl.graphIdCount = 0;
TSGraphControl.GetGraphId = () => TSGraphControl.graphIdCount++;
TSGraphControl.nodeIdCount = 0;
TSGraphControl.GetNodeId = () => TSGraphControl.nodeIdCount++;
TSGraphControl.graphStrings = new Array();
TSGraphControl.AddGraphString = (graph) => TSGraphControl.graphStrings.push(graph);
TSGraphControl.GetGetGraphsString = () => TSGraphControl.graphStrings.join('\n');


/***/ }),

/***/ "./src/utils/Utils.ts":
/*!****************************!*\
  !*** ./src/utils/Utils.ts ***!
  \****************************/
/*! exports provided: SemanticException, ErrorCompo, DefaultValue, DefaultValueNoUndefined, IsPrimitiveTypo, GetObjectValue, FindVar, TSGraph, TSGraph2, PassPropsAndFuncs, GetReferenceValueCode, LogicWhile, LogicDoWhile, MyMap, ObjectStructure, ObjectsStructures, ArrayMemorySize, ArrayPosition, ArrayPositionCode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SemanticException", function() { return SemanticException; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ErrorCompo", function() { return ErrorCompo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultValue", function() { return DefaultValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultValueNoUndefined", function() { return DefaultValueNoUndefined; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IsPrimitiveTypo", function() { return IsPrimitiveTypo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GetObjectValue", function() { return GetObjectValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FindVar", function() { return FindVar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TSGraph", function() { return TSGraph; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TSGraph2", function() { return TSGraph2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PassPropsAndFuncs", function() { return PassPropsAndFuncs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GetReferenceValueCode", function() { return GetReferenceValueCode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LogicWhile", function() { return LogicWhile; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LogicDoWhile", function() { return LogicDoWhile; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MyMap", function() { return MyMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ObjectStructure", function() { return ObjectStructure; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ObjectsStructures", function() { return ObjectsStructures; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ArrayMemorySize", function() { return ArrayMemorySize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ArrayPosition", function() { return ArrayPosition; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ArrayPositionCode", function() { return ArrayPositionCode; });
/* harmony import */ var _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PrimitiveTypoContainer */ "./src/utils/PrimitiveTypoContainer.ts");
/* harmony import */ var _Envmnt__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Envmnt */ "./src/utils/Envmnt.ts");
/* harmony import */ var _Reference__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Reference */ "./src/utils/Reference.ts");
/* harmony import */ var _nodes_BreakObj__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../nodes/BreakObj */ "./src/nodes/BreakObj.ts");
/* harmony import */ var _nodes_ReturnObj__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../nodes/ReturnObj */ "./src/nodes/ReturnObj.ts");
/* harmony import */ var _nodes_ContinueObj__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../nodes/ContinueObj */ "./src/nodes/ContinueObj.ts");
/* harmony import */ var _TSGraphControl__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./TSGraphControl */ "./src/utils/TSGraphControl.ts");
/* harmony import */ var _ErrorsControl__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ErrorsControl */ "./src/utils/ErrorsControl.ts");
/* harmony import */ var _C3D_Code__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./C3D/Code */ "./src/utils/C3D/Code.ts");
/* harmony import */ var _C3D_Tmp__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./C3D/Tmp */ "./src/utils/C3D/Tmp.ts");










class SemanticException extends Error {
    constructor(message, position = new _ErrorsControl__WEBPACK_IMPORTED_MODULE_7__["Position"]()) {
        super(message);
        _ErrorsControl__WEBPACK_IMPORTED_MODULE_7__["ErrorsControl"].AddError(position.first_line, position.first_column, '', message, 'SEMANTIC');
    }
}
class ErrorCompo extends Error {
    constructor(message, position = new _ErrorsControl__WEBPACK_IMPORTED_MODULE_7__["Position"]()) {
        super(message);
        _ErrorsControl__WEBPACK_IMPORTED_MODULE_7__["ErrorsControl"].AddError(position.first_line, position.first_column, '', message, 'SEMANTIC');
    }
}
function DefaultValue(typo) {
    if (IsPrimitiveTypo(typo)) {
        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_0__["UNDEFINED"]();
    }
    return GetObjectValue(typo);
}
function DefaultValueNoUndefined(typo) {
    typo = typo.toUpperCase();
    switch (typo) {
        case "STRING":
            return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_0__["STRING"]();
        case "NUMBER":
            return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_0__["NUMBER"]();
        case "BOOLEAN":
            return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_0__["BOOLEAN"]();
        case "ANY":
            return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_0__["ARRAY"]();
        case "ARRAY":
            return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_0__["ARRAY"]();
        case "NULL":
            return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_0__["NULL"]();
        case "UNDEFINED":
            return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_0__["UNDEFINED"]();
        default:
            return GetObjectValue(typo);
    }
}
function IsPrimitiveTypo(typo) {
    typo = typo.toUpperCase();
    switch (typo) {
        case "STRING":
        case "NUMBER":
        case "BOOLEAN":
        case "ANY":
        case "ARRAY":
        case "NULL":
        case "UNDEFINED":
            return true;
        default:
            return false;
    }
}
function GetObjectValue(typo) {
    typo = typo.toUpperCase();
    let structure = ObjectsStructures.objects.get(typo);
    if (structure === null || structure === undefined) {
        throw new SemanticException(`No existe una definicion para el tipo ${typo}`);
    }
    return structure.GetDefaultValue();
}
function FindVar(cont, identifier) {
    let ownerCntnr = cont;
    while (ownerCntnr != null) {
        if (ownerCntnr.GetProperty(identifier) !== undefined) {
            return ownerCntnr.GetProperty(identifier);
        }
        ownerCntnr = ownerCntnr.GetOwner();
    }
    throw new SemanticException(`identificador ${identifier} no encontrado`);
}
function TSGraph(envmnt) {
    let ownerCntnr = envmnt;
    while (true) {
        if (ownerCntnr.GetOwner() == null) {
            break;
        }
        ownerCntnr = ownerCntnr.GetOwner();
    }
    return ownerCntnr.GetTSGraph('global');
}
function TSGraph2(sentences) {
    let value = '';
    const graphId = _TSGraphControl__WEBPACK_IMPORTED_MODULE_6__["TSGraphControl"].GetGraphId();
    value += `subgraph cluster_${graphId} { \n`;
    value += 'style=filled;\n' +
        'color="#2BBBAD";\n' +
        'fillcolor="#1E222A";\n';
    value += 'node [color="#2BBBAD" fontcolor="#2BBBAD" shape="rectangle"] \n';
    sentences.forEach(sentence => {
        value += sentence.GetTSGraph();
    });
    value += `label = "${'GLOBAL'}";\n`;
    value += `}\n`;
    return value;
}
function PassPropsAndFuncs(father, son) {
    // father.props.forEach((v, k) => {
    //     son.Declare(k, v);
    // });
}
function GetReferenceValueCode(code) {
    if (!(code.getValue() instanceof _Reference__WEBPACK_IMPORTED_MODULE_2__["Reference"]))
        return code;
    const codeAns = new _C3D_Code__WEBPACK_IMPORTED_MODULE_8__["Code"](code);
    codeAns.setValue(code.getValue().getValue());
    codeAns.setPointer(_C3D_Tmp__WEBPACK_IMPORTED_MODULE_9__["Tmp"].newTmp());
    if (!code.isHeap) {
        codeAns.GetFromStack(code.getPointer());
    }
    else {
        codeAns.GetFromHeap(code.getPointer());
        codeAns.isHeap = code.isHeap;
    }
    //TODO tmpmanager ??
    return codeAns;
}
function LogicWhile(env, condition, sentences, extra) {
    let ans = condition.Exe(env);
    if (ans instanceof _Reference__WEBPACK_IMPORTED_MODULE_2__["Reference"]) {
        ans = ans.getValue();
    }
    if (!(ans instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_0__["BOOLEAN"])) {
        throw new SemanticException("Condicion utilizada en ciclo while no soportada");
    }
    let tmp = ans;
    while (tmp.getValue()) {
        const env0 = new _Envmnt__WEBPACK_IMPORTED_MODULE_1__["Envmnt"](env, sentences);
        PassPropsAndFuncs(env, env0);
        const ret = env0.GO_ALL();
        if (ret instanceof _nodes_BreakObj__WEBPACK_IMPORTED_MODULE_3__["BreakObj"]) {
            break;
        }
        if (ret instanceof _nodes_ReturnObj__WEBPACK_IMPORTED_MODULE_4__["ReturnObj"]) {
            return ret;
        }
        if (ret instanceof _nodes_ContinueObj__WEBPACK_IMPORTED_MODULE_5__["ContinueObj"]) {
            continue;
        }
        if (extra !== null) {
            extra.Exe(env);
        }
        let ans0 = condition.Exe(env);
        if (ans0 instanceof _Reference__WEBPACK_IMPORTED_MODULE_2__["Reference"]) {
            ans0 = ans0.getValue();
        }
        tmp = ans0;
    }
    return null;
}
function LogicDoWhile(env, condition, sentences, extra) {
    let ans = condition.Exe(env);
    if (ans instanceof _Reference__WEBPACK_IMPORTED_MODULE_2__["Reference"]) {
        ans = ans.getValue();
    }
    if (!(ans instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_0__["BOOLEAN"])) {
        throw new SemanticException("Condicion utilizada en ciclo while no soportada");
    }
    let env0 = new _Envmnt__WEBPACK_IMPORTED_MODULE_1__["Envmnt"](env, sentences);
    PassPropsAndFuncs(env, env0);
    env0.GO_ALL();
    let ans0 = condition.Exe(env);
    if (ans0 instanceof _Reference__WEBPACK_IMPORTED_MODULE_2__["Reference"]) {
        ans0 = ans0.getValue();
    }
    let tmp = ans0;
    while (tmp.getValue()) {
        const env0 = new _Envmnt__WEBPACK_IMPORTED_MODULE_1__["Envmnt"](env, sentences);
        PassPropsAndFuncs(env, env0);
        const ret = env0.GO_ALL();
        if (ret instanceof _nodes_BreakObj__WEBPACK_IMPORTED_MODULE_3__["BreakObj"]) {
            break;
        }
        if (ret instanceof _nodes_ReturnObj__WEBPACK_IMPORTED_MODULE_4__["ReturnObj"]) {
            return ret;
        }
        if (ret instanceof _nodes_ContinueObj__WEBPACK_IMPORTED_MODULE_5__["ContinueObj"]) {
            continue;
        }
        if (extra !== null) {
            extra.Exe(env);
        }
        let ans0 = condition.Exe(env);
        if (ans0 instanceof _Reference__WEBPACK_IMPORTED_MODULE_2__["Reference"]) {
            ans0 = ans0.getValue();
        }
        tmp = ans0;
    }
    return null;
}
class MyMap {
    constructor() {
        this.map = new Map();
    }
    getMap() {
        return this.map;
    }
    addEntry(key, value) {
        this.map.set(key, value);
    }
}
class ObjectStructure {
    constructor(properties) {
        this.properties = properties;
    }
    GetDefaultValue() {
        const attributes = new Map();
        this.properties.forEach((v, k) => {
            if (IsPrimitiveTypo(v)) {
                attributes.set(k, DefaultValueNoUndefined(v));
            }
            else {
                attributes.set(k, new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_0__["UNDEFINED"]());
            }
        });
        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_0__["OBJECT"](attributes);
    }
}
class ObjectsStructures {
}
ObjectsStructures.objects = new Map();
function ArrayMemorySize(ranges) {
    let ans = 1;
    for (let range of ranges) {
        ans *= range.eIndex - range.sIndex + 1;
    }
    return ans;
}
function ArrayPosition(ranges, indexes) {
    let ans = 0;
    for (let i = 0; i < ranges.length; i++) {
        const range = ranges[i];
        let index = indexes[i];
        index = index - range.sIndex;
        for (let j = i + 1; j < ranges.length; j++) {
            const r = ranges[j];
            index *= (r.eIndex - r.sIndex + 1);
        }
        ans += index;
    }
    return ans;
}
function ArrayPositionCode(ranges, codes) {
    const ans = new _C3D_Code__WEBPACK_IMPORTED_MODULE_8__["Code"]();
    ans.setPointer(_C3D_Tmp__WEBPACK_IMPORTED_MODULE_9__["Tmp"].newTmp());
    ans.appendValueToPointer("0");
    for (let i = 0; i < ranges.length; i++) {
        const range = ranges[i];
        const index = codes[i];
        //index.appendResta(index.getPointer(), range.sIndex + "", "-sIndex");
        //index = index - range.sIndex;
        for (var j = i + 1; j < ranges.length; j++) {
            const r = ranges[j];
            //index *= (r.fIndex - r.sIndex + 1);
            const codeTmp = new _C3D_Code__WEBPACK_IMPORTED_MODULE_8__["Code"]();
            codeTmp.setPointer(_C3D_Tmp__WEBPACK_IMPORTED_MODULE_9__["Tmp"].newTmp());
            codeTmp.appendResta(r.eIndex + "", r.sIndex + "", "fIndex - sIndex");
            codeTmp.appendSuma(codeTmp.getPointer(), "1", "+1");
            ans.append(codeTmp);
            index.appendMulti(index.getPointer(), codeTmp.getPointer());
        }
        ans.append(index);
        ans.appendSuma(ans.getPointer(), index.getPointer());
        //ans += index;
    }
    return ans;
}


/***/ }),

/***/ "./src/utils/functions/FunctionRepresent.ts":
/*!**************************************************!*\
  !*** ./src/utils/functions/FunctionRepresent.ts ***!
  \**************************************************/
/*! exports provided: FunctionRepresent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FunctionRepresent", function() { return FunctionRepresent; });
/* harmony import */ var _Cntnr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Cntnr */ "./src/utils/Cntnr.ts");

class FunctionRepresent extends _Cntnr__WEBPACK_IMPORTED_MODULE_0__["Cntnr"] {
}


/***/ }),

/***/ "./src/utils/functions/Native.ts":
/*!***************************************!*\
  !*** ./src/utils/functions/Native.ts ***!
  \***************************************/
/*! exports provided: Native */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Native", function() { return Native; });
/* harmony import */ var _FunctionRepresent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./FunctionRepresent */ "./src/utils/functions/FunctionRepresent.ts");

class Native extends _FunctionRepresent__WEBPACK_IMPORTED_MODULE_0__["FunctionRepresent"] {
}


/***/ }),

/***/ "./src/utils/functions/UserDefined.ts":
/*!********************************************!*\
  !*** ./src/utils/functions/UserDefined.ts ***!
  \********************************************/
/*! exports provided: UserDefined */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UserDefined", function() { return UserDefined; });
/* harmony import */ var _FunctionRepresent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./FunctionRepresent */ "./src/utils/functions/FunctionRepresent.ts");
/* harmony import */ var _Envmnt__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Envmnt */ "./src/utils/Envmnt.ts");
/* harmony import */ var _Reference__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Reference */ "./src/utils/Reference.ts");
/* harmony import */ var _TSGraphControl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../TSGraphControl */ "./src/utils/TSGraphControl.ts");
/* harmony import */ var _C3D_Code__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../C3D/Code */ "./src/utils/C3D/Code.ts");
/* harmony import */ var _C3D_Lbl__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../C3D/Lbl */ "./src/utils/C3D/Lbl.ts");
/* harmony import */ var _nodes_DeclareVarNode__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../nodes/DeclareVarNode */ "./src/nodes/DeclareVarNode.ts");
/* harmony import */ var _nodes_DeclareVarListNode__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../nodes/DeclareVarListNode */ "./src/nodes/DeclareVarListNode.ts");








class UserDefined extends _FunctionRepresent__WEBPACK_IMPORTED_MODULE_0__["FunctionRepresent"] {
    constructor(src, params, type) {
        super();
        this.src = src;
        this.params = params;
        this.type = type.toUpperCase();
    }
    getType() {
        return this.type;
    }
    getSrc() {
        return this.src;
    }
    EXE(env0, args) {
        let env = new _Envmnt__WEBPACK_IMPORTED_MODULE_1__["Envmnt"](env0, this.src);
        const references = new Array();
        for (let param of this.params) {
            references.push(param.Exe(env));
        }
        for (let i = 0; i < args.length && i < references.length; i++) {
            references[i].PutValueOnReference(args[i]);
        }
        return env.GO_ALL();
    }
    GetC3DCode(env, name, code = null) {
        const codeAns = new _C3D_Code__WEBPACK_IMPORTED_MODULE_4__["Code"]();
        const exitLbl = _C3D_Lbl__WEBPACK_IMPORTED_MODULE_5__["Lbl"].newLbl();
        const funEnv = new _Envmnt__WEBPACK_IMPORTED_MODULE_1__["Envmnt"](env, this.src, "", "", exitLbl, `$${name.toUpperCase()}`);
        codeAns.appendMethodStart(name, `start ${name}`);
        const l = new Array();
        l.push(new _nodes_DeclareVarNode__WEBPACK_IMPORTED_MODULE_6__["DeclareVarNode"](null, `$${name}`));
        const a = new _nodes_DeclareVarListNode__WEBPACK_IMPORTED_MODULE_7__["DeclareVarListNode"](null, this.type.toUpperCase(), l);
        codeAns.append(a.ExeCode(funEnv));
        for (let p of this.params) {
            codeAns.append(p.ExeCode(funEnv));
        }
        codeAns.append(funEnv.GO_ALL_CODE());
        codeAns.appendLabel(exitLbl);
        codeAns.appendMethodEnd(`end ${name}`);
        codeAns.setValue(new _Reference__WEBPACK_IMPORTED_MODULE_2__["Reference"](this.type));
        return codeAns;
    }
    GetTSGraph(owner = '') {
        let value = '';
        const graphId = _TSGraphControl__WEBPACK_IMPORTED_MODULE_3__["TSGraphControl"].GetGraphId();
        value += `subgraph cluster_${graphId} { \n`;
        value += 'style=filled;\n' +
            'color="#2BBBAD";\n' +
            'fillcolor="#1E222A";\n';
        value += 'node [color="#2BBBAD" fontcolor="#2BBBAD" shape="rectangle"] \n';
        this.params.forEach((v) => {
            value += `n${_TSGraphControl__WEBPACK_IMPORTED_MODULE_3__["TSGraphControl"].GetNodeId()} [label="${v.GetName()}"]\n`;
        });
        value += `label = "${owner.toUpperCase()}";\n`;
        this.props.forEach((v, k) => {
            let vv = v;
            if (vv instanceof _Reference__WEBPACK_IMPORTED_MODULE_2__["Reference"]) {
                vv = vv.getValue();
            }
            console.log(vv);
            value += vv.GetTSGraph(k);
        });
        value += `}\n`;
        return value;
    }
}


/***/ }),

/***/ "./src/utils/nativeFunctions/charat.ts":
/*!*********************************************!*\
  !*** ./src/utils/nativeFunctions/charat.ts ***!
  \*********************************************/
/*! exports provided: Charat */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Charat", function() { return Charat; });
/* harmony import */ var _functions_Native__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../functions/Native */ "./src/utils/functions/Native.ts");
/* harmony import */ var _C3D_Code__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../C3D/Code */ "./src/utils/C3D/Code.ts");
/* harmony import */ var _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../PrimitiveTypoContainer */ "./src/utils/PrimitiveTypoContainer.ts");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Utils */ "./src/utils/Utils.ts");
/* harmony import */ var _nodes_ReturnObj__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../nodes/ReturnObj */ "./src/nodes/ReturnObj.ts");
/* harmony import */ var _C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../C3D/Tmp */ "./src/utils/C3D/Tmp.ts");






class Charat extends _functions_Native__WEBPACK_IMPORTED_MODULE_0__["Native"] {
    constructor(str) {
        super();
        this.str = str;
    }
    EXE(env0, args) {
        let value = args.pop();
        if (value === undefined) {
            throw new _Utils__WEBPACK_IMPORTED_MODULE_3__["SemanticException"]("char at requiere un argumento");
        }
        if (!(value instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["NUMBER"])) {
            throw new _Utils__WEBPACK_IMPORTED_MODULE_3__["SemanticException"]("se esperaba un argumento de tipo number");
        }
        let index = value.getValue();
        let retVal = this.str.getValue().charAt(index);
        return new _nodes_ReturnObj__WEBPACK_IMPORTED_MODULE_4__["ReturnObj"](new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["STRING"](retVal));
    }
    GetC3DCode(env0, name, ...codes) {
        let code = codes[0];
        code = Object(_Utils__WEBPACK_IMPORTED_MODULE_3__["GetReferenceValueCode"])(code);
        const codeAns = new _C3D_Code__WEBPACK_IMPORTED_MODULE_1__["Code"](code);
        codeAns.setPointer(_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
        codeAns.appendValueToPointer("H");
        const str1Code = new _C3D_Code__WEBPACK_IMPORTED_MODULE_1__["Code"]();
        const str2Code = new _C3D_Code__WEBPACK_IMPORTED_MODULE_1__["Code"]();
        str1Code.setPointer(_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
        str1Code.appendValueToPointer("1", "largo cadena a tratar");
        str2Code.setPointer(_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
        str2Code.appendValueToPointer("H", "puntero a char");
        const codeCicle = new _C3D_Code__WEBPACK_IMPORTED_MODULE_1__["Code"](str1Code, str2Code);
        codeCicle.setPointer(_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
        codeCicle.appendValueToPointer(1);
        let cref = Object(_Utils__WEBPACK_IMPORTED_MODULE_3__["GetReferenceValueCode"])(codes[1]);
        codeCicle.append(cref);
        codeCicle.appendSuma(codeCicle.getPointer(), cref.getPointer(), "char on position");
        const char = new _C3D_Code__WEBPACK_IMPORTED_MODULE_1__["Code"]();
        char.setPointer(_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
        char.GetFromHeap(codeCicle.getPointer());
        char.appendAsignToHeapPosition(str2Code.getPointer(), "1");
        char.appendLine(`${str2Code.getPointer()} = ${str2Code.getPointer()} + 1;`);
        char.appendAsignToHeapPosition(str2Code.getPointer(), char.getPointer());
        codeCicle.append(char);
        codeCicle.appendLine(`H = H + ${str1Code.getPointer()};`);
        codeAns.append(codeCicle);
        codeAns.setValue(this.str);
        return codeAns;
    }
}


/***/ }),

/***/ "./src/utils/nativeFunctions/concat.ts":
/*!*********************************************!*\
  !*** ./src/utils/nativeFunctions/concat.ts ***!
  \*********************************************/
/*! exports provided: Concat */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Concat", function() { return Concat; });
/* harmony import */ var _functions_Native__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../functions/Native */ "./src/utils/functions/Native.ts");
/* harmony import */ var _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../PrimitiveTypoContainer */ "./src/utils/PrimitiveTypoContainer.ts");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Utils */ "./src/utils/Utils.ts");
/* harmony import */ var _nodes_ReturnObj__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../nodes/ReturnObj */ "./src/nodes/ReturnObj.ts");
/* harmony import */ var _nodes_SumNode__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../nodes/SumNode */ "./src/nodes/SumNode.ts");





class Concat extends _functions_Native__WEBPACK_IMPORTED_MODULE_0__["Native"] {
    constructor(str) {
        super();
        this.str = str;
    }
    EXE(env0, args) {
        let value = args.pop();
        if (value === undefined) {
            throw new _Utils__WEBPACK_IMPORTED_MODULE_2__["SemanticException"]("char at requiere un argumento");
        }
        if (!(value instanceof _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_1__["STRING"])) {
            throw new _Utils__WEBPACK_IMPORTED_MODULE_2__["SemanticException"]("se esperaba un argumento de tipo string");
        }
        let retVal = this.str.getValue() + value.getValue();
        return new _nodes_ReturnObj__WEBPACK_IMPORTED_MODULE_3__["ReturnObj"](new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_1__["STRING"](retVal));
    }
    GetC3DCode(env0, name, ...code) {
        let codeLf = code[0];
        let codeRt = code[1];
        return _nodes_SumNode__WEBPACK_IMPORTED_MODULE_4__["SumNode"].SumConcat(codeLf, codeRt);
    }
}


/***/ }),

/***/ "./src/utils/nativeFunctions/graficar_ts.ts":
/*!**************************************************!*\
  !*** ./src/utils/nativeFunctions/graficar_ts.ts ***!
  \**************************************************/
/*! exports provided: Graficar_ts */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Graficar_ts", function() { return Graficar_ts; });
/* harmony import */ var _functions_Native__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../functions/Native */ "./src/utils/functions/Native.ts");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Utils */ "./src/utils/Utils.ts");
/* harmony import */ var _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../PrimitiveTypoContainer */ "./src/utils/PrimitiveTypoContainer.ts");
/* harmony import */ var _TSGraphControl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../TSGraphControl */ "./src/utils/TSGraphControl.ts");




class Graficar_ts extends _functions_Native__WEBPACK_IMPORTED_MODULE_0__["Native"] {
    GetC3DCode(env0, name, ...code) {
        throw new Error("Method not implemented.");
    }
    constructor() {
        super();
    }
    EXE(env0, args) {
        let ownerCntnr = env0;
        while (true) {
            if (ownerCntnr.GetOwner() == null) {
                break;
            }
            ownerCntnr = ownerCntnr.GetOwner();
        }
        let content = 'digraph G {bgcolor="#2E3440" gradientangle=0 rankdir=TB fontcolor="#2BBBAD" \n';
        content += Object(_Utils__WEBPACK_IMPORTED_MODULE_1__["TSGraph2"])(ownerCntnr.GetSentences());
        content += '}\n\n';
        console.log(content);
        _TSGraphControl__WEBPACK_IMPORTED_MODULE_3__["TSGraphControl"].AddGraphString(content);
        return new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_2__["UNDEFINED"]();
    }
}


/***/ }),

/***/ "./src/utils/nativeFunctions/length.ts":
/*!*********************************************!*\
  !*** ./src/utils/nativeFunctions/length.ts ***!
  \*********************************************/
/*! exports provided: Length */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Length", function() { return Length; });
/* harmony import */ var _functions_Native__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../functions/Native */ "./src/utils/functions/Native.ts");
/* harmony import */ var _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../PrimitiveTypoContainer */ "./src/utils/PrimitiveTypoContainer.ts");
/* harmony import */ var _nodes_ReturnObj__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../nodes/ReturnObj */ "./src/nodes/ReturnObj.ts");
/* harmony import */ var _C3D_Code__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../C3D/Code */ "./src/utils/C3D/Code.ts");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Utils */ "./src/utils/Utils.ts");
/* harmony import */ var _C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../C3D/Tmp */ "./src/utils/C3D/Tmp.ts");






class Length extends _functions_Native__WEBPACK_IMPORTED_MODULE_0__["Native"] {
    constructor(array) {
        super();
        this.array = array;
    }
    GetC3DCode(env0, name, ...codes) {
        let code = codes[0];
        code = Object(_Utils__WEBPACK_IMPORTED_MODULE_4__["GetReferenceValueCode"])(code);
        const codeAns = new _C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"](code);
        codeAns.setPointer(_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
        codeAns.appendValueToPointer(this.array.getValueList().length);
        codeAns.setValue(new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_1__["NUMBER"](this.array.getValueList().length));
        return codeAns;
    }
    EXE(env0, args) {
        let size = this.array.getValueList().length;
        return new _nodes_ReturnObj__WEBPACK_IMPORTED_MODULE_2__["ReturnObj"](new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_1__["NUMBER"](size));
    }
}


/***/ }),

/***/ "./src/utils/nativeFunctions/pop.ts":
/*!******************************************!*\
  !*** ./src/utils/nativeFunctions/pop.ts ***!
  \******************************************/
/*! exports provided: Pop */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Pop", function() { return Pop; });
/* harmony import */ var _functions_Native__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../functions/Native */ "./src/utils/functions/Native.ts");
/* harmony import */ var _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../PrimitiveTypoContainer */ "./src/utils/PrimitiveTypoContainer.ts");
/* harmony import */ var _nodes_ReturnObj__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../nodes/ReturnObj */ "./src/nodes/ReturnObj.ts");



class Pop extends _functions_Native__WEBPACK_IMPORTED_MODULE_0__["Native"] {
    constructor(array) {
        super();
        this.array = array;
    }
    GetC3DCode(env0, name, ...code) {
        throw new Error("Method not implemented.");
    }
    EXE(env0, args) {
        let value = this.array.getValueList().pop();
        if (value === undefined) {
            return new _nodes_ReturnObj__WEBPACK_IMPORTED_MODULE_2__["ReturnObj"](new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_1__["UNDEFINED"]());
        }
        return new _nodes_ReturnObj__WEBPACK_IMPORTED_MODULE_2__["ReturnObj"](value);
    }
}


/***/ }),

/***/ "./src/utils/nativeFunctions/push.ts":
/*!*******************************************!*\
  !*** ./src/utils/nativeFunctions/push.ts ***!
  \*******************************************/
/*! exports provided: Push */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Push", function() { return Push; });
/* harmony import */ var _functions_Native__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../functions/Native */ "./src/utils/functions/Native.ts");
/* harmony import */ var _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../PrimitiveTypoContainer */ "./src/utils/PrimitiveTypoContainer.ts");
/* harmony import */ var _nodes_ReturnObj__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../nodes/ReturnObj */ "./src/nodes/ReturnObj.ts");
/* harmony import */ var _Reference__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Reference */ "./src/utils/Reference.ts");




class Push extends _functions_Native__WEBPACK_IMPORTED_MODULE_0__["Native"] {
    constructor(array) {
        super();
        this.array = array;
    }
    GetC3DCode(env0, name, ...code) {
        throw new Error("Method not implemented.");
    }
    EXE(env0, args) {
        let size = this.array.getValueList().length;
        for (let i in args) {
            let ref = new _Reference__WEBPACK_IMPORTED_MODULE_3__["Reference"]();
            ref.setValue(args[i]);
            this.array.addValue(ref);
        }
        return new _nodes_ReturnObj__WEBPACK_IMPORTED_MODULE_2__["ReturnObj"](new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_1__["NUMBER"](size));
    }
}


/***/ }),

/***/ "./src/utils/nativeFunctions/stringLowerCase.ts":
/*!******************************************************!*\
  !*** ./src/utils/nativeFunctions/stringLowerCase.ts ***!
  \******************************************************/
/*! exports provided: StringLowrCase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StringLowrCase", function() { return StringLowrCase; });
/* harmony import */ var _functions_Native__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../functions/Native */ "./src/utils/functions/Native.ts");
/* harmony import */ var _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../PrimitiveTypoContainer */ "./src/utils/PrimitiveTypoContainer.ts");
/* harmony import */ var _C3D_Code__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../C3D/Code */ "./src/utils/C3D/Code.ts");
/* harmony import */ var _nodes_ReturnObj__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../nodes/ReturnObj */ "./src/nodes/ReturnObj.ts");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Utils */ "./src/utils/Utils.ts");
/* harmony import */ var _C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../C3D/Tmp */ "./src/utils/C3D/Tmp.ts");
/* harmony import */ var _C3D_Lbl__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../C3D/Lbl */ "./src/utils/C3D/Lbl.ts");







class StringLowrCase extends _functions_Native__WEBPACK_IMPORTED_MODULE_0__["Native"] {
    constructor(str) {
        super();
        this.str = str;
    }
    EXE(env0, args) {
        let base = this.str.getValue();
        return new _nodes_ReturnObj__WEBPACK_IMPORTED_MODULE_3__["ReturnObj"](new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_1__["STRING"](base.toLocaleLowerCase()));
    }
    GetC3DCode(env0, name, ...codes) {
        let code = codes[0];
        code = Object(_Utils__WEBPACK_IMPORTED_MODULE_4__["GetReferenceValueCode"])(code);
        const codeAns = new _C3D_Code__WEBPACK_IMPORTED_MODULE_2__["Code"](code);
        codeAns.setPointer(_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
        codeAns.appendValueToPointer("H");
        const str1Code = new _C3D_Code__WEBPACK_IMPORTED_MODULE_2__["Code"]();
        const str2Code = new _C3D_Code__WEBPACK_IMPORTED_MODULE_2__["Code"]();
        str1Code.setPointer(_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
        str1Code.GetFromHeap(code.getPointer(), "largo cadena a tratar");
        str2Code.setPointer(_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
        str2Code.appendValueToPointer("H", "puntero a nueva cadena upper");
        const codeCicle = new _C3D_Code__WEBPACK_IMPORTED_MODULE_2__["Code"](str1Code, str2Code);
        codeCicle.setPointer(_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
        codeCicle.appendValueToPointer(code.getPointer());
        const startLbl = _C3D_Lbl__WEBPACK_IMPORTED_MODULE_6__["Lbl"].newLbl();
        const endLbl = _C3D_Lbl__WEBPACK_IMPORTED_MODULE_6__["Lbl"].newLbl();
        const cicleCode = _C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp();
        codeCicle.appendLine(`${cicleCode} = ${0};`, "punto de partida");
        codeCicle.appendAsignToHeapPosition("H", str1Code.getPointer(), "tamaño de cadena para copia");
        codeCicle.appendLabel(startLbl);
        codeCicle.appendJGE(cicleCode, str1Code.getPointer(), endLbl);
        codeCicle.appendSuma(codeCicle.getPointer(), "1");
        codeCicle.appendLine(`${str2Code.getPointer()} = ${str2Code.getPointer()} + 1;`);
        codeCicle.appendLine(`${cicleCode} = ${cicleCode} + 1;`);
        const comp = _C3D_Lbl__WEBPACK_IMPORTED_MODULE_6__["Lbl"].newLbl();
        const char = new _C3D_Code__WEBPACK_IMPORTED_MODULE_2__["Code"]();
        char.setPointer(_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
        char.GetFromHeap(codeCicle.getPointer());
        char.appendJL(char.getPointer(), `${"A".charCodeAt(0)}`, comp);
        char.appendJG(char.getPointer(), `${"Z".charCodeAt(0)}`, comp);
        char.appendLine(`${char.getPointer()} = ${char.getPointer()} + 32;`);
        char.appendLabel(comp);
        char.appendAsignToHeapPosition(str2Code.getPointer(), char.getPointer());
        codeCicle.append(char);
        codeCicle.appendJMP(startLbl);
        codeCicle.appendLabel(endLbl);
        codeCicle.appendLine(`H = H + 1;`);
        codeCicle.appendLine(`H = H + ${str1Code.getPointer()};`);
        codeAns.append(codeCicle);
        codeAns.setValue(this.str);
        return codeAns;
    }
}


/***/ }),

/***/ "./src/utils/nativeFunctions/stringUpperCase.ts":
/*!******************************************************!*\
  !*** ./src/utils/nativeFunctions/stringUpperCase.ts ***!
  \******************************************************/
/*! exports provided: StringUperCase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StringUperCase", function() { return StringUperCase; });
/* harmony import */ var _functions_Native__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../functions/Native */ "./src/utils/functions/Native.ts");
/* harmony import */ var _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../PrimitiveTypoContainer */ "./src/utils/PrimitiveTypoContainer.ts");
/* harmony import */ var _C3D_Code__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../C3D/Code */ "./src/utils/C3D/Code.ts");
/* harmony import */ var _nodes_ReturnObj__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../nodes/ReturnObj */ "./src/nodes/ReturnObj.ts");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Utils */ "./src/utils/Utils.ts");
/* harmony import */ var _C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../C3D/Tmp */ "./src/utils/C3D/Tmp.ts");
/* harmony import */ var _C3D_Lbl__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../C3D/Lbl */ "./src/utils/C3D/Lbl.ts");







class StringUperCase extends _functions_Native__WEBPACK_IMPORTED_MODULE_0__["Native"] {
    constructor(str) {
        super();
        this.str = str;
    }
    EXE(env0, args) {
        let base = this.str.getValue();
        return new _nodes_ReturnObj__WEBPACK_IMPORTED_MODULE_3__["ReturnObj"](new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_1__["STRING"](base.toUpperCase()));
    }
    GetC3DCode(env0, name, ...codes) {
        let code = codes[0];
        code = Object(_Utils__WEBPACK_IMPORTED_MODULE_4__["GetReferenceValueCode"])(code);
        const codeAns = new _C3D_Code__WEBPACK_IMPORTED_MODULE_2__["Code"](code);
        codeAns.setPointer(_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
        codeAns.appendValueToPointer("H");
        const str1Code = new _C3D_Code__WEBPACK_IMPORTED_MODULE_2__["Code"]();
        const str2Code = new _C3D_Code__WEBPACK_IMPORTED_MODULE_2__["Code"]();
        str1Code.setPointer(_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
        str1Code.GetFromHeap(code.getPointer(), "largo cadena a tratar");
        str2Code.setPointer(_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
        str2Code.appendValueToPointer("H", "puntero a nueva cadena upper");
        const codeCicle = new _C3D_Code__WEBPACK_IMPORTED_MODULE_2__["Code"](str1Code, str2Code);
        codeCicle.setPointer(_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
        codeCicle.appendValueToPointer(code.getPointer());
        const startLbl = _C3D_Lbl__WEBPACK_IMPORTED_MODULE_6__["Lbl"].newLbl();
        const endLbl = _C3D_Lbl__WEBPACK_IMPORTED_MODULE_6__["Lbl"].newLbl();
        const cicleCode = _C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp();
        codeCicle.appendLine(`${cicleCode} = ${0};`, "punto de partida");
        codeCicle.appendAsignToHeapPosition("H", str1Code.getPointer(), "tamaño de cadena para copia");
        codeCicle.appendLabel(startLbl);
        codeCicle.appendJGE(cicleCode, str1Code.getPointer(), endLbl);
        codeCicle.appendSuma(codeCicle.getPointer(), "1");
        codeCicle.appendLine(`${str2Code.getPointer()} = ${str2Code.getPointer()} + 1;`);
        codeCicle.appendLine(`${cicleCode} = ${cicleCode} + 1;`);
        const comp = _C3D_Lbl__WEBPACK_IMPORTED_MODULE_6__["Lbl"].newLbl();
        const char = new _C3D_Code__WEBPACK_IMPORTED_MODULE_2__["Code"]();
        char.setPointer(_C3D_Tmp__WEBPACK_IMPORTED_MODULE_5__["Tmp"].newTmp());
        char.GetFromHeap(codeCicle.getPointer());
        char.appendJL(char.getPointer(), `${"a".charCodeAt(0)}`, comp);
        char.appendJG(char.getPointer(), `${"z".charCodeAt(0)}`, comp);
        char.appendLine(`${char.getPointer()} = ${char.getPointer()} - 32;`);
        char.appendLabel(comp);
        char.appendAsignToHeapPosition(str2Code.getPointer(), char.getPointer());
        codeCicle.append(char);
        codeCicle.appendJMP(startLbl);
        codeCicle.appendLabel(endLbl);
        codeCicle.appendLine(`H = H + 1;`);
        codeCicle.appendLine(`H = H + ${str1Code.getPointer()} + 1;`);
        codeAns.append(codeCicle);
        codeAns.setValue(this.str);
        return codeAns;
    }
}


/***/ }),

/***/ "./src/utils/nativeFunctions/stringlenght.ts":
/*!***************************************************!*\
  !*** ./src/utils/nativeFunctions/stringlenght.ts ***!
  \***************************************************/
/*! exports provided: Stringlenght */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Stringlenght", function() { return Stringlenght; });
/* harmony import */ var _functions_Native__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../functions/Native */ "./src/utils/functions/Native.ts");
/* harmony import */ var _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../PrimitiveTypoContainer */ "./src/utils/PrimitiveTypoContainer.ts");
/* harmony import */ var _nodes_ReturnObj__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../nodes/ReturnObj */ "./src/nodes/ReturnObj.ts");
/* harmony import */ var _C3D_Code__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../C3D/Code */ "./src/utils/C3D/Code.ts");
/* harmony import */ var _C3D_Tmp__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../C3D/Tmp */ "./src/utils/C3D/Tmp.ts");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Utils */ "./src/utils/Utils.ts");






class Stringlenght extends _functions_Native__WEBPACK_IMPORTED_MODULE_0__["Native"] {
    constructor(str) {
        super();
        this.str = str;
    }
    GetC3DCode(env0, name, ...codes) {
        let code = codes[0];
        code = Object(_Utils__WEBPACK_IMPORTED_MODULE_5__["GetReferenceValueCode"])(code);
        const codeAns = new _C3D_Code__WEBPACK_IMPORTED_MODULE_3__["Code"](code);
        codeAns.setPointer(_C3D_Tmp__WEBPACK_IMPORTED_MODULE_4__["Tmp"].newTmp());
        codeAns.GetFromHeap(code.getPointer());
        codeAns.setValue(new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_1__["NUMBER"]());
        return codeAns;
    }
    EXE(env0, args) {
        let size = this.str.getValue().length;
        return new _nodes_ReturnObj__WEBPACK_IMPORTED_MODULE_2__["ReturnObj"](new _PrimitiveTypoContainer__WEBPACK_IMPORTED_MODULE_1__["NUMBER"](size));
    }
}


/***/ })

/******/ });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,